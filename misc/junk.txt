/*
const int addend[] = {8, 9, 1, -7, -8, -9, -1, 7, 0};
int a, index = -1;
while((a = addend[++index])) {
    // printf("a = %d\n", a);
    int dest = ORIG, old_dest;
    while(dest + a >= 0 && dest + a < 64) {
        old_dest = dest, dest += a;
        // printf("%d %d\n", old_dest, dest);
        // printf("%lx %lx\n", bindex(dest), KING_SQS[old_dest] );
        if(!(SBA[dest] & KING_SQS[old_dest])) {
            // printf("Breaking\n");
            break;
        }
        if(bindex(dest) & friendly_cm) break;
        // char s[10];
        // rawmove(ORIG_DEST_RC[ORIG][dest], s);
        // printf("Adding \"%s\"\n", s);
        // pseudo[vacant++] = ORIG_DEST_RC[ORIG][dest];
        // pseudo[vacant++] = 1;
        if( bindex(dest) & enemy_cm ) break;
    }
}
assert(index == 8);
*/

/* Put in extra.*
const uint16_t one = 1;
char line[30 + 1], tmp[10 + 1];
for(uint8_t byte = 0; ; byte++) {
    uint8_t bit = (one << 7), bc = 0;
    // for(int i = 0; i < 30; i++) line[i] = '\0';
    // printf("[%3d]  ", byte);
    sprintf(line, "[%3d]  ", byte);
    while(true) {
        sprintf(tmp, "%c ", (bit & byte) ? '1' : '0');
        strcat(line, tmp);
        if(bit & byte) ++bc;
        if(bit == 1) break;
        bit >>= 1;
    }
    if(bc == 2) printf("%s\n", line);

    if(byte == 255) break;
}
*/
