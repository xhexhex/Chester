#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <ctype.h>
#include <assert.h>

#include "../src/base.h"
#include "../src/utils.h"
#include "../src/move_gen.h"
#include "../src/extra.h"
#include "../src/validation.h"

char *
create_APM_DATA_duplicate()
{
    char *dup = (char *) malloc( 10000 * sizeof(char) );
    assert(dup);

    char *ptr = dup;

    for( int file = 0; file <= 7; file++ ) {
        for( int rank = 0; rank <= 56; rank += 8 ) {
            int src = file + rank;
            assert( src >= 0 && src <= 63 );
            Bitboard dest_sqs = (
                ROOK_SQS[src] | BISHOP_SQS[src] | KNIGHT_SQS[src] );
            for( int file = 0; file <= 7; file++ ) {
                for( int rank = 0; rank <= 56; rank += 8 ) {
                    int dest = file + rank;
                    assert( dest >= 0 && dest <= 63 );

                    if( !(SBA[dest] & dest_sqs) ) continue;

                    ptr[0] = SQ_NAME[src][0], ptr[1] = SQ_NAME[src][1],
                        ptr[2] = SQ_NAME[dest][0], ptr[3] = SQ_NAME[dest][1];

                    ptr += 4;
                }
            }
        }
    }

    *ptr = '\0';

    assert( (ptr - dup) == (int) strlen(APM_DATA) );
    return dup;
}

static int
x_fen_find_and_count(char **fen, uint32_t size, char *search_key,
    uint32_t *ids)
{
    int match_count = 0, index = -1;

    for(uint32_t id = 1; id <= size; id++) {
        if(!strcmp(fen[id], search_key)) {
            ++match_count;
            if(ids) ids[++index] = id;
        }
    }

    return match_count;
}

#suite base_ts

//
// Test case
//
#tcase global_data_tests

#test C_quick_and_dirty_SB_and_SBA_test
    ck_assert_msg(
        SB.a1 == 1u && SBA[0] == 1u && // 1 = 2^0
        SB.c2 == 1024u && SBA[10] == 1024u && // kibi = 2^10
        SB.e3 == 1048576u && SBA[20] == 1048576u && // mebi = 2^20
        SB.g4 == 1073741824u && SBA[30] == 1073741824u && // gibi = 2^30
        SB.a6 == 1099511627776u && SBA[40] == 1099511627776u && // tebi = 2^40
        SB.c7 == 1125899906842624u && SBA[50] == 1125899906842624u && // pebi = 2^50
        SB.h8 == 9223372036854775808u && SBA[63] == 9223372036854775808u ); // 2^63

#test C_incremental_sum_of_SBA_elements_test
    unsigned long sum = 0;

    for( int i = 0; i < 64; i++ ) {
        sum += SBA[ i ];
        ck_assert_msg( sum == ( (unsigned long) pow( 2, i + 1 ) - 1 ) );
    }

//
// Test case
//
#tcase fen_to_pos_tests

#define PPA_CHECK( \
        exp_es, \
        exp_wk, exp_wq, exp_wr, exp_wb, exp_wn, exp_wp, \
        exp_bk, exp_bq, exp_br, exp_bb, exp_bn, exp_bp ) \
    ck_assert( p->ppa[EMPTY_SQUARE] == (exp_es) ); \
    ck_assert( p->ppa[WHITE_KING] == (exp_wk) ); \
    ck_assert( p->ppa[WHITE_QUEEN] == (exp_wq) ); \
    ck_assert( p->ppa[WHITE_ROOK] == (exp_wr) ); \
    ck_assert( p->ppa[WHITE_BISHOP] == (exp_wb) ); \
    ck_assert( p->ppa[WHITE_KNIGHT] == (exp_wn) ); \
    ck_assert( p->ppa[WHITE_PAWN] == (exp_wp) ); \
    ck_assert( p->ppa[BLACK_KING] == (exp_bk) ); \
    ck_assert( p->ppa[BLACK_QUEEN] == (exp_bq) ); \
    ck_assert( p->ppa[BLACK_ROOK] == (exp_br) ); \
    ck_assert( p->ppa[BLACK_BISHOP] == (exp_bb) ); \
    ck_assert( p->ppa[BLACK_KNIGHT] == (exp_bn) ); \
    ck_assert( p->ppa[BLACK_PAWN] == (exp_bp) );

#define CASTLING_RIGHTS_CHECK( exp_K, exp_Q, exp_k, exp_q ) \
    ck_assert( has_castling_right( p, "white", "kingside" ) == exp_K ); \
    ck_assert( has_castling_right( p, "white", "queenside" ) == exp_Q ); \
    ck_assert( has_castling_right( p, "black", "kingside" ) == exp_k ); \
    ck_assert( has_castling_right( p, "black", "queenside" ) == exp_q );

#define REMAINING_FOUR_FIELDS( exp_wt, exp_epts, exp_hmc, exp_fmn ) \
    ck_assert( (!exp_wt && !whites_turn(p)) || (exp_wt && whites_turn(p)) ), \
    ck_assert( get_epts(p) == exp_epts ), ck_assert( p->hmc == exp_hmc ), \
    ck_assert( p->fmn == exp_fmn );

#define IRP_CHECK( exp_queenside_value, exp_kingside_value, \
        exp_queenside_sq_bit, exp_kingside_sq_bit ) \
    ck_assert( p->irp[0] == exp_queenside_value ); \
    ck_assert( p->irp[1] == exp_kingside_value ); \
    ck_assert( SBA[sq_bit_index(p->irp[0])] == exp_queenside_sq_bit ); \
    ck_assert( SBA[sq_bit_index(p->irp[1])] == exp_kingside_sq_bit );

#test C_fen_to_pos_with_std_start_pos_fen
    Pos *p = fen_to_pos( INIT_POS );

    PPA_CHECK( 0xffffffff0000,
        0x10, 0x8, 0x81, 0x24, 0x42, 0xff00,
        0x1000000000000000, 0x800000000000000, 0x8100000000000000,
        0x2400000000000000, 0x4200000000000000, 0xff000000000000 )
    CASTLING_RIGHTS_CHECK( true, true, true, true )
    ck_assert( p->turn_and_ca_flags == 0x8f );
    REMAINING_FOUR_FIELDS( true, 0, 0, 1 )

    // Duplicate testing to make sure the above macro works as expected
    ck_assert( whites_turn(p) ), ck_assert( !get_epts(p) ),
    ck_assert( !p->hmc ), ck_assert( p->fmn == 1 );

    IRP_CHECK( 1, 0x80, SB.a1, SB.h1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_1
    Pos *p = fen_to_pos( "r3k3/8/8/8/4P3/8/8/4K2R b Kq e3 0 100" );

    PPA_CHECK( 0xeeffffffefffff6f,
        0x10, 0, 0x80, 0, 0, 0x10000000,
        0x1000000000000000, 0, 0x100000000000000, 0, 0, 0 )
    CASTLING_RIGHTS_CHECK( true, false, false, true )
    ck_assert( p->turn_and_ca_flags == 9 );
    REMAINING_FOUR_FIELDS( false, SB.e3, 0, 100 )

    // Duplicate testing to make sure the above macro works as expected
    ck_assert( !whites_turn(p) ), ck_assert( get_epts(p) == SB.e3 ),
        ck_assert( !p->hmc ), ck_assert( p->fmn == 100 );

    IRP_CHECK( 1, 0x80, SB.a1, SB.h1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_2
    Pos *p = fen_to_pos( "8/8/8/k7/P7/8/8/K7 b - a3 0 50" );

    PPA_CHECK( 0xfffffffefefffffe,
        1, 0, 0, 0, 0, 0x1000000,
        0x100000000, 0, 0, 0, 0, 0 )
    CASTLING_RIGHTS_CHECK( false, false, false, false )
    ck_assert( !p->turn_and_ca_flags );
    REMAINING_FOUR_FIELDS( false, SB.a3, 0, 50 )

    // Duplicate testing to make sure the above macro works as expected
    ck_assert( !whites_turn(p) ), ck_assert( get_epts(p) == SB.a3 ),
        ck_assert( !p->hmc ), ck_assert( p->fmn == 50 );

    IRP_CHECK( 1, 0x80, SB.a1, SB.h1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_3
    Pos *p = fen_to_pos( "5rk1/8/8/6p1/8/8/8/6KR w Hf g6 0 75" );

    PPA_CHECK( 0x9fffffbfffffff3f,
        0x40, 0, 0x80, 0, 0, 0,
        0x4000000000000000, 0, 0x2000000000000000, 0, 0, 0x4000000000 )
    CASTLING_RIGHTS_CHECK( true, false, false, true )
    ck_assert( p->turn_and_ca_flags == 0x89 );
    REMAINING_FOUR_FIELDS( true, SB.g6, 0, 75 )
    IRP_CHECK( 0x20, 0x80, SB.f1, SB.h1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_4
    Pos *p = fen_to_pos( "4rrk1/8/8/6p1/8/Q7/8/5RKR w FHf g6 0 75" );

    PPA_CHECK( 0x8fffffbffffeff1f,
        0x40, 0x10000, 0xa0, 0, 0, 0,
        0x4000000000000000, 0, 0x3000000000000000, 0, 0, 0x4000000000 )
    CASTLING_RIGHTS_CHECK( true, true, false, true )
    ck_assert( p->turn_and_ca_flags == 0x8d );
    REMAINING_FOUR_FIELDS( true, SB.g6, 0, 75 )
    IRP_CHECK( 0x20, 0x80, SB.f1, SB.h1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_5
    Pos *p = fen_to_pos(
        "brnqkbrn/pppppppp/8/8/8/8/PPPPPPPP/BRNQKBRN w BGbg - 0 1" );

    PPA_CHECK( rank('3') | rank('4') | rank('5') | rank('6'),
        0x10, 0x8, 0x42, 0x21, 0x84, rank('2'),
        0x1000000000000000, 0x800000000000000, 0x4200000000000000,
        0x2100000000000000, 0x8400000000000000, rank('7') )
    CASTLING_RIGHTS_CHECK( true, true, true, true )
    ck_assert( p->turn_and_ca_flags == 0x8f );
    REMAINING_FOUR_FIELDS( true, 0, 0, 1 )
    IRP_CHECK( 2, 0x40, SB.b1, SB.g1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_6
    Pos *p = fen_to_pos(
        "b1n1k1r1/p1pq1ppp/6n1/1rb1p3/8/1PN3N1/P1PP1PPP/BR1QK1R1 w GBg - 0 9" );

    PPA_CHECK( 0xaa12bfe9ffb912a4,
        0x10, 0x8, 0x42, 1, 0x440000, 0x2ed00,
        0x1000000000000000, 0x8000000000000, 0x4000000200000000,
        0x100000400000000, 0x400400000000000, 0xe5001000000000 )
    CASTLING_RIGHTS_CHECK( true, true, true, false )
    ck_assert( p->turn_and_ca_flags == 0x8e );
    REMAINING_FOUR_FIELDS( true, 0, 0, 9 )
    IRP_CHECK( 2, 0x40, SB.b1, SB.g1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_7
    Pos *p = fen_to_pos(
        "b1n2rk1/p1p2ppp/1q4n1/2b1p3/2P5/1P6/P2P1PPP/BR1QK1RN w BG - 3 12" );

    PPA_CHECK( 0x9a1abdebfbfd1624,
        0x10, 0x8, 0x42, 1, 0x80, 0x402e900,
        0x4000000000000000, 0x20000000000, 0x2000000000000000,
        0x100000400000000, 0x400400000000000, 0xe5001000000000 )
    CASTLING_RIGHTS_CHECK( true, true, false, false )
    ck_assert( p->turn_and_ca_flags == 0x8c );
    REMAINING_FOUR_FIELDS( true, 0, 3, 12 )
    IRP_CHECK( 2, 0x40, SB.b1, SB.g1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_8
    Pos *p = fen_to_pos(
        "b4rk1/p1p2ppp/1q1n2n1/2b1p3/2P3Q1/1P6/P2P1PPP/BR3RKN b - - 6 13" );

    PPA_CHECK( 0x9e1ab5ebbbfd161c,
        0x40, 0x40000000, 0x22, 1, 0x80, 0x402e900,
        0x4000000000000000, 0x20000000000, 0x2000000000000000,
        0x100000400000000, 0x480000000000, 0xe5001000000000 )
    CASTLING_RIGHTS_CHECK( false, false, false, false )
    ck_assert( !p->turn_and_ca_flags );
    REMAINING_FOUR_FIELDS( false, 0, 6, 13 )
    IRP_CHECK( 1, 0x80, SB.a1, SB.h1 )

    free(p);

#test C_fen_to_pos_manually_computed_test_9
    Pos *p = fen_to_pos( "2k5/8/8/2p5/8/8/8/2KR4 w D c6 0 50" );

    PPA_CHECK( 0xfbfffffbfffffff3,
        4, 0, 8, 0, 0, 0,
        0x400000000000000, 0, 0, 0, 0, 0x400000000 )
    CASTLING_RIGHTS_CHECK( true, false, false, false )
    ck_assert( p->turn_and_ca_flags == 0x88 );
    REMAINING_FOUR_FIELDS( true, SB.c6, 0, 50 )
    IRP_CHECK( 1, 8, SB.a1, SB.d1 )

    free(p);

#undef PPA_CHECK
#undef CASTLING_RIGHTS_CHECK
#undef REMAINING_FOUR_FIELDS
#undef IRP_CHECK

//
// Test case
//
#tcase pos_to_fen_tests

#define TEST_WITH_ARGS(fen) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    result = pos_to_fen( (const Pos *) p ); \
    ck_assert(!strcmp(result, fen)); \
    free(p), free(result);

#test pos_to_fen_inverse_fn_test_1
    Pos *p; char *result;

    TEST_WITH_ARGS("b1n1k1r1/p1pq1ppp/6n1/1rb1p3/8/1PN3N1/P1PP1PPP/BR1QK1R1 w GBg - 0 9")
    TEST_WITH_ARGS("R6R/3Q4/1Q4Q1/4Q3/2Q4Q/Q4Q2/pp1Q4/kBNN1KB1 w - - 0 1")
    TEST_WITH_ARGS(INIT_POS)
    TEST_WITH_ARGS("r2k3r/8/8/8/8/8/8/R2K3R b HAha - 19 75")
    TEST_WITH_ARGS("4k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1")
    TEST_WITH_ARGS("4k2r/8/8/8/8/8/8/R3K3 w Qk - 0 4000")
    TEST_WITH_ARGS("3rkr2/8/8/8/8/8/8/3RKR2 w FDfd - 0 50")
    TEST_WITH_ARGS("1rkr4/8/8/8/8/8/8/1RKR4 w DBdb - 0 50")
    TEST_WITH_ARGS("8/1k6/8/8/8/8/8/R3K2R w KQ - 0 51")
    TEST_WITH_ARGS("r2k3r/8/3K4/8/8/8/8/8 b ha - 1 2")

#undef TEST_WITH_ARGS

#define TEST_WITH_ARGS(orig, expected) \
    ck_assert( !che_fen_validator(orig) ), ck_assert( !che_fen_validator(expected) ); \
    p = fen_to_pos(orig); \
    actual = pos_to_fen( (const Pos *) p ); \
    ck_assert(!strcmp(actual, expected)); \
    free(p), free(actual);

#test pos_to_fen_inverse_fn_test_2
    Pos *p; char *actual;

    TEST_WITH_ARGS(INIT_POS,
        INIT_POS)
    TEST_WITH_ARGS("3rkr2/8/8/8/8/8/8/3RKR2 w DFdf - 0 50",
        "3rkr2/8/8/8/8/8/8/3RKR2 w FDfd - 0 50")
    TEST_WITH_ARGS("1rkr4/8/8/8/8/8/8/1RKR4 b BDbd - 0 50",
        "1rkr4/8/8/8/8/8/8/1RKR4 b DBdb - 0 50")
    TEST_WITH_ARGS("1rkr4/8/8/8/8/8/8/1RKR4 b DBdb - 0 50",
        "1rkr4/8/8/8/8/8/8/1RKR4 b DBdb - 0 50")
    TEST_WITH_ARGS("nrnqbbkr/pppppppp/8/8/8/8/PPPPPPPP/NRNQBBKR w BHbh - 0 1",
        "nrnqbbkr/pppppppp/8/8/8/8/PPPPPPPP/NRNQBBKR w HBhb - 0 1")
    TEST_WITH_ARGS("8/8/8/8/8/6k1/8/5RKR b FH - 19 83",
        "8/8/8/8/8/6k1/8/5RKR b HF - 19 83")
    TEST_WITH_ARGS("8/8/8/8/8/6k1/8/5RKR b HF - 19 83",
        "8/8/8/8/8/6k1/8/5RKR b HF - 19 83")
    TEST_WITH_ARGS("r3k2r/8/8/4p3/8/8/8/4K3 w ha e6 0 100",
        "r3k2r/8/8/4p3/8/8/8/4K3 w kq e6 0 100")

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase whites_turn_tests

#test C_whites_turn_works
    Pos *p;

    p = fen_to_pos( INIT_POS );
    ck_assert( whites_turn( p ) );
    free( p );

    p = fen_to_pos(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1" );
    ck_assert( !whites_turn( p ) );
    free( p );

//
// Test case
//
#tcase Chessman_enum_tests

#test C_EMPTY_SQUARE_equals_0
    Chessman cm = EMPTY_SQUARE;
    ck_assert( !cm );

#test C_BLACK_PAWN_equals_12
    Chessman cm = BLACK_PAWN;
    ck_assert( cm == 12 );

#tcase SS_DIAG_tests

#test C_SS_DIAG_constants_tested_with_sq_navigator

Bitboard sq_bit = ONE << sq_name_to_bindex( "h1" ), bb;
int index = 0;
while( true ) {
    bb = 0u;
    char *sq = (char *) SQ_NAME[bindex(sq_bit)];

    do {
        bb |= ONE << sq_name_to_bindex( sq );
    } while( ( sq = (char *) sq_navigator( sq, NORTHEAST ) ) );
    ck_assert( bb == sq_set_of_diag( index ) );
    ++index;

    if( sq_bit == ONE << sq_name_to_bindex( "a8" ) )
        break;
    else if( sq_bit < ONE << sq_name_to_bindex( "a2" ) &&
            sq_bit != ONE << sq_name_to_bindex( "a1" ) )
        sq_bit >>= 1;
    else
        sq_bit <<= 8;
}

#test C_SS_DIAG_constants_add_up_to_UINT64_MAX
    ck_assert( UINT64_MAX ==
        SS_DIAG_H1H1 + SS_DIAG_G1H2 + SS_DIAG_F1H3 + SS_DIAG_E1H4 + SS_DIAG_D1H5 +
        SS_DIAG_C1H6 + SS_DIAG_B1H7 + SS_DIAG_A1H8 + SS_DIAG_A2G8 + SS_DIAG_A3F8 +
        SS_DIAG_A4E8 + SS_DIAG_A5D8 + SS_DIAG_A6C8 + SS_DIAG_A7B8 + SS_DIAG_A8A8 );

#tcase SS_ANTIDIAG_tests

#test C_SS_ANTIDIAG_constants_tested_with_sq_navigator

Bitboard sq_bit = ONE << sq_name_to_bindex( "a1" ), bb;
int index = 0;
while( true ) {
    bb = 0u;
    char *sq = (char *) SQ_NAME[bindex(sq_bit)];

    do {
        bb |= ONE << sq_name_to_bindex( sq );
    } while( ( sq = (char *) sq_navigator( sq, NORTHWEST ) ) );
    ck_assert( bb == sq_set_of_antidiag( index ) );
    ++index;

    if( sq_bit == ONE << sq_name_to_bindex( "h8" ) )
        break;
    else if( sq_bit < ONE << sq_name_to_bindex( "h1" ) )
        sq_bit <<= 1;
    else
        sq_bit <<= 8;
}

#test C_SS_ANTIDIAG_constants_add_up_to_UINT64_MAX
    ck_assert( UINT64_MAX ==
        SS_ANTIDIAG_A1A1 + SS_ANTIDIAG_B1A2 + SS_ANTIDIAG_C1A3 +
        SS_ANTIDIAG_D1A4 + SS_ANTIDIAG_E1A5 + SS_ANTIDIAG_F1A6 +
        SS_ANTIDIAG_G1A7 + SS_ANTIDIAG_H1A8 + SS_ANTIDIAG_H2B8 +
        SS_ANTIDIAG_H3C8 + SS_ANTIDIAG_H4D8 + SS_ANTIDIAG_H5E8 +
        SS_ANTIDIAG_H6F8 + SS_ANTIDIAG_H7G8 + SS_ANTIDIAG_H8H8
    );

#tcase sq_set_of_diag_tests

#test C_sq_set_of_diag_comprehensive_input_test
    // ck_assert( sq_set_of_diag( -1 ) == 0 );
    ck_assert( sq_set_of_diag( 0 ) == SB.h1 );
    ck_assert( sq_set_of_diag( 1 ) == ( SB.g1 | SB.h2 ) );
    ck_assert( sq_set_of_diag( 2 ) == ( SB.f1 | SB.g2 | SB.h3 ) );
    ck_assert( sq_set_of_diag( 3 ) == ( SB.e1 | SB.f2 | SB.g3 | SB.h4 ) );
    ck_assert( sq_set_of_diag( 4 ) ==
        ( SB.d1 | SB.e2 | SB.f3 | SB.g4 | SB.h5 ) );
    ck_assert( sq_set_of_diag( 5 ) ==
        ( SB.c1 | SB.d2 | SB.e3 | SB.f4 | SB.g5 | SB.h6 ) );
    ck_assert( sq_set_of_diag( 6 ) ==
        ( SB.b1 | SB.c2 | SB.d3 | SB.e4 | SB.f5 | SB.g6 | SB.h7 ) );
    ck_assert( sq_set_of_diag( 7 ) ==
        ( SB.a1 | SB.b2 | SB.c3 | SB.d4 | SB.e5 | SB.f6 | SB.g7 | SB.h8 ) );
    ck_assert( sq_set_of_diag( 8 ) ==
        ( SB.a2 | SB.b3 | SB.c4 | SB.d5 | SB.e6 | SB.f7 | SB.g8 ) );
    ck_assert( sq_set_of_diag( 9 ) ==
        ( SB.a3 | SB.b4 | SB.c5 | SB.d6 | SB.e7 | SB.f8 ) );
    ck_assert( sq_set_of_diag( 10 ) ==
        ( SB.a4 | SB.b5 | SB.c6 | SB.d7 | SB.e8 ) );
    ck_assert( sq_set_of_diag( 11 ) == ( SB.a5 | SB.b6 | SB.c7 | SB.d8 ) );
    ck_assert( sq_set_of_diag( 12 ) == ( SB.a6 | SB.b7 | SB.c8 ) );
    ck_assert( sq_set_of_diag( 13 ) == ( SB.a7 | SB.b8 ) );
    ck_assert( sq_set_of_diag( 14 ) == SB.a8 );
    // ck_assert( sq_set_of_diag( 15 ) == 0 );

#tcase sq_set_of_antidiag_tests

#test C_sq_set_of_antidiag_comprehensive_input_test
    // ck_assert( sq_set_of_antidiag( -1 ) == 0 );
    ck_assert( sq_set_of_antidiag( 0 ) == SB.a1 );
    ck_assert( sq_set_of_antidiag( 1 ) == ( SB.b1 | SB.a2 ) );
    ck_assert( sq_set_of_antidiag( 2 ) == ( SB.c1 | SB.b2 | SB.a3 ) );
    ck_assert( sq_set_of_antidiag( 3 ) == ( SB.d1 | SB.c2 | SB.b3 | SB.a4 ) );
    ck_assert( sq_set_of_antidiag( 4 ) ==
        ( SB.e1 | SB.d2 | SB.c3 | SB.b4 | SB.a5 ) );
    ck_assert( sq_set_of_antidiag( 5 ) ==
        ( SB.f1 | SB.e2 | SB.d3 | SB.c4 | SB.b5 | SB.a6 ) );
    ck_assert( sq_set_of_antidiag( 6 ) ==
        ( SB.g1 | SB.f2 | SB.e3 | SB.d4 | SB.c5 | SB.b6 | SB.a7 ) );
    ck_assert( sq_set_of_antidiag( 7 ) ==
        ( SB.h1 | SB.g2 | SB.f3 | SB.e4 | SB.d5 | SB.c6 | SB.b7 | SB.a8 ) );
    ck_assert( sq_set_of_antidiag( 8 ) ==
        ( SB.h2 | SB.g3 | SB.f4 | SB.e5 | SB.d6 | SB.c7 | SB.b8 ) );
    ck_assert( sq_set_of_antidiag( 9 ) ==
        ( SB.h3 | SB.g4 | SB.f5 | SB.e6 | SB.d7 | SB.c8 ) );
    ck_assert( sq_set_of_antidiag( 10 ) ==
        ( SB.h4 | SB.g5 | SB.f6 | SB.e7 | SB.d8 ) );
    ck_assert( sq_set_of_antidiag( 11 ) == ( SB.h5 | SB.g6 | SB.f7 | SB.e8 ) );
    ck_assert( sq_set_of_antidiag( 12 ) == ( SB.h6 | SB.g7 | SB.f8 ) );
    ck_assert( sq_set_of_antidiag( 13 ) == ( SB.h7 | SB.g8 ) );
    ck_assert( sq_set_of_antidiag( 14 ) == SB.h8 );
    // ck_assert( sq_set_of_antidiag( 15 ) == 0 );

#tcase SQ_NAV_tests

#test C_SQ_NAV_basic_integrity_test
    int num_of_valid_elements = 0, num_of_valid_non_zero_elements = 0;

    for( int i = 0; i < 64; i++ ) {
        for( enum sq_dir d = NORTH; d <= ELEVEN_OCLOCK; d++ ) {
            Bitboard bb = SQ_NAV[ i ][ d ];
            if( !bb || is_sq_bit( bb ) ) {
                ++num_of_valid_elements;
                if( bb )
                    ++num_of_valid_non_zero_elements;

                continue;
            }

            ck_assert( false );
        }
    }

    if( num_of_valid_elements != 1024 || num_of_valid_non_zero_elements != 756 )
        ck_assert( false );

#test C_SQ_NAV_comprehensive_test_with_ALT_sq_navigator
    for( int row = 0; row < 64; row++ ) {
        const char *origin_sq = SQ_NAME[ row ];
        for( int col = 0; col < 16; col++ ) {
            const char *sq_in_dir =
                ALT_sq_navigator( origin_sq, (enum sq_dir) col );

            const Bitboard sq_bit = sq_in_dir ? (ONE << sq_name_to_bindex(
                sq_in_dir)) : 0u;
            ck_assert( SQ_NAV[ row ][ col ] == sq_bit );
        }
    }

#test C_SQ_NAV_comprehensive_test_with_KING_SQS_and_KNIGHT_SQS
    for( int row = 0; row < 64; row++ ) {
        Bitboard bb = 0u;
        for( int col = 0; col < 16; col++ ) {
            bb |= SQ_NAV[ row ][ col ];
        }
        ck_assert( bb == ( KING_SQS[ row ] | KNIGHT_SQS[ row ] ) );
    }

#tcase sq_nav_tests

#test C_sq_nav_comprehensive_test_with_KING_SQS_and_KNIGHT_SQS
    for( int i = 0; i < 64; i++ ) {
        Bitboard bb = 0;
        for( int dir = 0; dir < 16; dir++ ) {
            bb |= sq_nav( SBA[ i ], dir );
        }
        ck_assert( bb == ( KING_SQS[ i ] | KNIGHT_SQS[ i ] ) );
    }

//
// Test case
//
#tcase str_array_SHREDDER_FEN_CAFS_tests

#test C_SHREDDER_FEN_CAFS_array_size_test
    int counter = 0;
    for( ; SHREDDER_FEN_CAFS[ counter ]; counter++ ) {}
    ck_assert( counter == SHREDDER_FEN_CAFS_COUNT );

#define N_CHAR_ELEMENTS_COUNT( length, exp_count ) \
int counter = 0; \
for( int i = 0; i < SHREDDER_FEN_CAFS_COUNT; i++ ) \
    if( strlen( SHREDDER_FEN_CAFS[ i ] ) == length ) ++counter; \
ck_assert( counter == exp_count );

// 1c, one-character
#test C_SHREDDER_FEN_CAFS_array_1c_elements_test
    N_CHAR_ELEMENTS_COUNT( 1, 17 ) // "abcdefgh", "ABCDEFGH", "-"

#test C_SHREDDER_FEN_CAFS_array_2c_elements_test
    N_CHAR_ELEMENTS_COUNT( 2, 6 * POSSIBLE_IRPF_VALUES_COUNT + 8 )

#test C_SHREDDER_FEN_CAFS_array_3c_elements_test
    N_CHAR_ELEMENTS_COUNT( 3, 8 * POSSIBLE_IRPF_VALUES_COUNT )

#test C_SHREDDER_FEN_CAFS_array_4c_elements_test
    N_CHAR_ELEMENTS_COUNT( 4, 2 * POSSIBLE_IRPF_VALUES_COUNT )

#undef N_CHAR_ELEMENTS_COUNT

//
// Test case
//
#tcase has_castling_right_tests

// evoc: expected value of call
#define EIGHT_CALL_TEST( value, evoc_1_and_5, evoc_2_and_6, \
        evoc_3_and_7, evoc_4_and_8 ) \
    pos.turn_and_ca_flags = value; \
    ck_assert( \
        has_castling_right( &pos, "white", "kingside" ) == evoc_1_and_5 && \
        has_castling_right( &pos, "white", "queenside" ) == evoc_2_and_6 && \
        has_castling_right( &pos, "black", "kingside" ) == evoc_3_and_7 && \
        has_castling_right( &pos, "black", "queenside" ) == evoc_4_and_8 \
    ); \
    ck_assert( \
        has_castling_right( &pos, "white", "h-side" ) == evoc_1_and_5 && \
        has_castling_right( &pos, "white", "a-side" ) == evoc_2_and_6 && \
        has_castling_right( &pos, "black", "h-side" ) == evoc_3_and_7 && \
        has_castling_right( &pos, "black", "a-side" ) == evoc_4_and_8 \
    );

#test C_has_castling_right_works
    Pos pos;

    EIGHT_CALL_TEST( 0x0fU, true, true, true, true )
    EIGHT_CALL_TEST( 0xf0U, false, false, false, false );
    //     KQkq
    // 10101010 in binary
    EIGHT_CALL_TEST( 0xaaU, true, false, true, false )
    //     KQkq
    // 00001010 in binary
    EIGHT_CALL_TEST( 0x0aU, true, false, true, false )
    //     KQkq
    // 00000101 in binary
    EIGHT_CALL_TEST( 0x05U, false, true, false, true )

    EIGHT_CALL_TEST( 0, false, false, false, false )
    EIGHT_CALL_TEST( 1, false, false, false, true )
    EIGHT_CALL_TEST( 2, false, false, true, false )
    EIGHT_CALL_TEST( 4, false, true, false, false )
    EIGHT_CALL_TEST( 8, true, false, false, false )

#undef EIGHT_CALL_TEST

//
// Test case
//
#tcase epts_tests

#define CREATE_ASSERT_AND_FREE( fen_arg, expected_value ) \
    p = fen_to_pos( fen_arg ); \
    ck_assert( get_epts(p) == expected_value ); \
    free(p);

#test C_epts_returns_zero
    Pos *p;

    CREATE_ASSERT_AND_FREE(
        INIT_POS, 0 )
    CREATE_ASSERT_AND_FREE(
        "nrnqbbkr/pppppppp/8/8/8/8/PPPPPPPP/NRNQBBKR w BHbh - 0 1", 0 )
    CREATE_ASSERT_AND_FREE(
        "nqnrkbbr/pppppppp/8/8/8/8/PPPPPPPP/NQNRKBBR w DHdh - 0 1", 0 )
    CREATE_ASSERT_AND_FREE(
        "rnbk3r/ppp2Bp1/3b1n1p/4p3/4P3/5N2/PPP2PPP/RNB1K2R w KQ - 1 8", 0 )
    CREATE_ASSERT_AND_FREE(
        "rrrrkrrr/pppppppp/pppppppp/pppppppp/PPPPPPPP/PPPPPPPP/PPPPPPPP/RRRRKRRR "
            "w KQkq - 59998 30000", 0 )

#test C_epts_returns_sq_bit
    Pos *p;

    CREATE_ASSERT_AND_FREE(
        "2r1k3/8/8/8/4P3/8/8/4K2R b Hc e3 0 100", SB.e3 )
    CREATE_ASSERT_AND_FREE(
        "rnbqkbnr/pppp1ppp/8/4p3/8/8/PPPPPPPP/RNBQKBNR w KQkq e6 0 1", SB.e6 )
    CREATE_ASSERT_AND_FREE(
        "rnbqkbnr/ppppppp1/8/7p/8/8/PPPPPPPP/RNBQKBNR w KQkq h6 0 1", SB.h6 )
    CREATE_ASSERT_AND_FREE(
        "8/8/8/k7/P7/8/8/K7 b - a3 0 50", SB.a3 )
    CREATE_ASSERT_AND_FREE(
        "8/8/8/7k/7P/8/8/7K b - h3 0 50", SB.h3 )
    CREATE_ASSERT_AND_FREE(
        "k7/8/8/p7/K7/8/8/8 w - a6 0 50", SB.a6 )
    CREATE_ASSERT_AND_FREE(
        "7k/8/8/7p/7K/8/8/8 w - h6 0 50", SB.h6 )

#undef CREATE_ASSERT_AND_FREE

//
// Test case
//
#tcase APM_DATA_tests

#test C_APM_DATA_length_test
    ck_assert( strlen( APM_DATA ) == 4*1792 );

#test C_APM_DATA_valid_characters_test
    int i = 0;
    for( ; APM_DATA[i]; i++ ) {
        char c = APM_DATA[i];
        ck_assert( ( c >= 'a' && c <= 'h' ) || ( c >= '1' && c <= '8' ) );
    }
    ck_assert( i == 4*1792 );

#test C_APM_DATA_has_equal_number_of_letters_and_digits
    int letter_count = 0, digit_count = 0;
    for( int i = 0; APM_DATA[i]; i++ ) {
        char c = APM_DATA[i];

        if( isalpha(c) )
            ++letter_count;
        else if( isdigit(c) )
            ++digit_count;
    }
    ck_assert( letter_count == 2*1792 );
    ck_assert( letter_count == digit_count );

#test C_APM_DATA_compared_to_dynamically_created_duplicate
    char *dup = create_APM_DATA_duplicate();
    ck_assert( !strcmp( APM_DATA, dup ) );
    free(dup);

#test C_APM_DATA_tested_for_ascending_lexiographical_order
    ck_assert( strcmp( "abc", "xyz" ) < 0 );

    char left[4 + 1] = {'\0'}, right[4 + 1] = {'\0'};

    int i = 0, pair_count = 0;
    for( ; i < (int) strlen(APM_DATA) - 4; i += 4 ) {
        for( int j = 0, lindex = i, rindex = i + 4; j < 4; j++ ) {
            left[j]  = APM_DATA[lindex + j];
            right[j] = APM_DATA[rindex + j];
        }
        ++pair_count;

        assert( strlen(left) == 4 );
        assert( strlen(right) == 4);
        assert( str_m_pat( left,  "^[a-h][1-8][a-h][1-8]$" ) );
        assert( str_m_pat( right, "^[a-h][1-8][a-h][1-8]$" ) );

        // printf( "%s  %s\n", left, right );
        ck_assert( strcmp( left, right ) < 0 );
    }

    assert( i + 4 == (int) strlen(APM_DATA) );
    assert( pair_count == (int) (strlen(APM_DATA) / 4) - 1 );

//
// Test case
//
#tcase rawcode_tests

#define RAWCODE_TEST(rawmove_arg, expected_rawcode) \
    ck_assert( rawcode(rawmove_arg) == expected_rawcode );

#test rawcode_tested_with_manually_selected_rawmoves
    RAWCODE_TEST("a1a2", 1)
    RAWCODE_TEST("a1a4", 3)
    RAWCODE_TEST("a1e5", 17)
    RAWCODE_TEST("h8h7", 1792)
    RAWCODE_TEST("h8h6", 1791)
    RAWCODE_TEST("a3a4", 50)

#test rawcode_comprehensive_sequential_check
    char current[4 + 1] = {'\0'};
    assert( !current[4] );

    for( int i = 0; i < MAX_RAWCODE; i++ ) {
        for( int j = 0; j < 4; j++ )
            current[j] = APM_DATA[4*i + j];

        RAWCODE_TEST(current, i + 1)
    }

#undef RAWCODE_TEST

//
// Test case
//
#tcase rawmove_tests

#define TEST_WITH_ARGS( rawcode_arg, expected_rawmove ) \
    rawmove( rawcode_arg, move ); \
    ck_assert( !strcmp( move, expected_rawmove ) );

#test C_rawmove_tested_with_manually_selected_valid_rawcodes
    char move[4 + 1];
    TEST_WITH_ARGS( 1, "a1a2" )
    TEST_WITH_ARGS( 17, "a1e5" )
    TEST_WITH_ARGS( 1792, "h8h7" )

#undef TEST_WITH_ARGS

#test C_rawmove_inverse_function_test_with_rawcode
    char move[4 + 1];
    for( int code = 1; code <= 1792; code++ ) {
        rawmove( code, move );
        ck_assert( rawcode(move) == code );
    }

//
// Test case
//
#tcase make_move_castling_tests

#define TEST_WITH_ARGS( fen_arg, code, promotion, empty, \
        wking, wqueen, wrook, wbishop, wknight, wpawn, \
        bking, bqueen, brook, bbishop, bknight, bpawn, \
        turn_and_ca_flags_arg, irp0_arg, irp1_arg, \
        epts_file_arg, hmc_arg, fmn_arg ) \
    ck_assert( !che_fen_validator( fen_arg ) ); \
    p = fen_to_pos( fen_arg ); \
    make_move( p, code, promotion ); \
    ck_assert( p->ppa[EMPTY_SQUARE] == (empty) ); \
    ck_assert( p->ppa[WHITE_KING] == (wking) ); \
    ck_assert( p->ppa[WHITE_QUEEN] == (wqueen) ); \
    ck_assert( p->ppa[WHITE_ROOK] == (wrook) ); \
    ck_assert( p->ppa[WHITE_BISHOP] == (wbishop) ); \
    ck_assert( p->ppa[WHITE_KNIGHT] == (wknight) ); \
    ck_assert( p->ppa[WHITE_PAWN] == (wpawn) ); \
    ck_assert( p->ppa[BLACK_KING] == (bking) ); \
    ck_assert( p->ppa[BLACK_QUEEN] == (bqueen) ); \
    ck_assert( p->ppa[BLACK_ROOK] == (brook) ); \
    ck_assert( p->ppa[BLACK_BISHOP] == (bbishop) ); \
    ck_assert( p->ppa[BLACK_KNIGHT] == (bknight) ); \
    ck_assert( p->ppa[BLACK_PAWN] == (bpawn) ); \
    ck_assert( p->turn_and_ca_flags == (turn_and_ca_flags_arg) ); \
    ck_assert( p->irp[0] == (irp0_arg) ); \
    ck_assert( p->irp[1] == (irp1_arg) ); \
    ck_assert( p->epts_file == (epts_file_arg) ); \
    ck_assert( p->hmc == (hmc_arg) ); \
    ck_assert( p->fmn == (fmn_arg) ); \
    free(p);

#test make_move_tested_with_kingside_castling_moves_for_white
    Pos *p;

    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/4K2R w K - 0 1", rawcode("e1h1"), '-',
        ~( SB.f1 | SB.g1 | SB.e8 ),
        SB.g1, 0, SB.f1, 0, 0, 0,
        SB.e8, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 1, 1 )
    TEST_WITH_ARGS(
        "qrnb1krn/p1p2ppp/1p6/1b1p4/3P4/4P3/PP2NPPP/QR1BBKRN w BGbg - 0 6",
        rawcode("f1g1"), '-',
        0x101afdf5f7ef0c04U,
        SB.g1, SB.a1, SB.b1 | SB.f1, SB.d1 | SB.e1, SB.h1 | SB.e2,
            SB.a2 | SB.b2 | SB.d4 | SB.e3 | SB.f2 | SB.g2 | SB.h2,
        SB.f8, SB.a8, SB.b8 | SB.g8, SB.b5 | SB.d8, SB.c8 | SB.h8,
            SB.a7 | SB.b6 | SB.c7 | SB.d5 | SB.f7 | SB.g7 | SB.h7,
        3, 2, 64, 0, 1, 6 )
    TEST_WITH_ARGS(
        "r1k1q2r/1ppn2pp/4bp2/p3p3/1b1n4/N1NP1PP1/PP1QPBBP/R1K4R w AHah - 4 11",
        rawcode("c1h1"), '-',
        0x6a31cfeef592049eU,
        SB.g1, SB.d2, (SB.a1 | SB.f1), (SB.f2 | SB.g2), (SB.a3 | SB.c3),
            (SB.a2 | SB.b2 | SB.d3 | SB.e2 | SB.f3 | SB.g3 | SB.h2),
        SB.c8, SB.e8, (SB.a8 | SB.h8), (SB.b4 | SB.e6), (SB.d4 | SB.d7),
            (SB.a5 | SB.b7 | SB.c7 | SB.e5 | SB.f6 | SB.g7 | SB.h7),
        3, 1, 128, 0, 5, 11 )

#test make_move_tested_with_queenside_castling_moves_for_white
    Pos *p;

    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/R3K3 w Q - 12 99", rawcode("e1a1"), '-',
        ~( SB.c1 | SB.d1 | SB.e8 ),
        SB.c1, 0, SB.d1, 0, 0, 0,
        SB.e8, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 13, 99 )
    TEST_WITH_ARGS(
        "1r2krbq/p1pp2bp/4p1p1/3nPp2/3P1P2/1N1N2P1/PPP4P/1R2KRBQ w FBfb f6 0 11",
        rawcode("e1b1"), '-',
        0xd32afc7d7b57813U,
        SB.c1, SB.h1, SB.d1 | SB.f1, SB.g1, SB.b3 | SB.d3,
            SB.a2 | SB.b2 | SB.c2 | SB.d4 | SB.e5 | SB.f4 | SB.g3 | SB.h2,
        SB.e8, SB.h8, SB.b8 | SB.f8, SB.g7 | SB.g8, SB.d5,
            SB.a7 | SB.c7 | SB.d7 | SB.e6 | SB.f5 | SB.g6 | SB.h7,
        3, 2, 32, 0, 1, 11 )
    TEST_WITH_ARGS(
        "r1k1q2r/1ppn2pp/4bp2/p3p3/1b1n4/N1NP1PP1/PP1QPBBP/R1K4R w AHah - 4 11",
        rawcode("c1a1"), '-',
        0x6a31cfeef5920473U,
        SB.c1, SB.d2, (SB.d1 | SB.h1), (SB.f2 | SB.g2), (SB.a3 | SB.c3),
            (SB.a2 | SB.b2 | SB.d3 | SB.e2 | SB.f3 | SB.g3 | SB.h2),
        SB.c8, SB.e8, (SB.a8 | SB.h8), (SB.b4 | SB.e6), (SB.d4 | SB.d7),
            (SB.a5 | SB.b7 | SB.c7 | SB.e5 | SB.f6 | SB.g7 | SB.h7),
        3, 1, 128, 0, 5, 11 )

#test make_move_tested_with_kingside_castling_moves_for_black
    Pos *p;

    TEST_WITH_ARGS(
        "r3k2r/8/8/8/4P3/8/8/R3K2R b KQkq e3 0 99", rawcode("e8h8"), '-',
        ~( SB.a1 | SB.e1 | SB.h1 | SB.e4 | SB.a8 | SB.f8 | SB.g8 ),
        SB.e1, 0, SB.a1 | SB.h1, 0, 0, SB.e4,
        SB.g8, 0, SB.a8 | SB.f8, 0, 0, 0,
        140, 1, 128, 0, 1, 100 )
    TEST_WITH_ARGS(
        "r1bqk2r/2ppbppp/p1n2n2/1p2p3/4P3/1B3N2/PPPP1PPP/RNBQR1K1 b kq - 1 7",
        rawcode("e8h8"), '-',
        0x9203daedefdd10a0U,
        SB.g1, SB.d1, SB.a1 | SB.e1, SB.c1 | SB.b3, SB.b1 | SB.f3,
            SB.a2 | SB.b2 | SB.c2 | SB.d2 | SB.e4 | SB.f2 | SB.g2 | SB.h2,
        SB.g8, SB.d8, SB.a8 | SB.f8, SB.e7 | SB.c8, SB.c6 | SB.f6,
            SB.a6 | SB.b5 | SB.c7 | SB.d7 | SB.e5 | SB.f7 | SB.g7 | SB.h7,
        128, 1, 128, 0, 2, 8 )
    TEST_WITH_ARGS(
        "nqrk2rn/ppp1ppbp/6p1/1b1p4/3P4/2P3N1/PPNBPPPP/1QRK1BR1 b CGcg - 2 5",
        rawcode("d8g8"), '-',
        0x1808bff5f7bb0091U,
        SB.d1, SB.b1, (SB.c1 | SB.g1), (SB.f1 | SB.d2), (SB.c2 | SB.g3),
            (SB.a2 | SB.b2 | SB.c3 | SB.d4 | SB.e2 | SB.f2 | SB.g2 | SB.h2),
        SB.g8, SB.b8, (SB.c8 | SB.f8), (SB.b5 | SB.g7), (SB.a8 | SB.h8),
            (SB.a7 | SB.b7 | SB.c7 | SB.d5 | SB.e7 | SB.f7 | SB.g6 | SB.h7),
        140, 4, 64, 0, 3, 6 )

#test make_move_tested_with_queenside_castling_moves_for_black
    Pos *p;

    TEST_WITH_ARGS(
        "r3k2r/8/8/8/4P3/8/8/R3K2R b KQkq e3 0 149", rawcode("e8a8"), '-',
        ~( SB.a1 | SB.e1 | SB.h1 | SB.e4 | SB.c8 | SB.d8 | SB.h8 ),
        SB.e1, 0, SB.a1 | SB.h1, 0, 0, SB.e4,
        SB.c8, 0, SB.d8 | SB.h8, 0, 0, 0,
        140, 1, 128, 0, 1, 150 )
    TEST_WITH_ARGS(
        "3rk1r1/P7/8/8/8/8/8/4K1R1 b Gdg - 10 50", rawcode("e8d8"), '-',
        ~( SB.e1 | SB.g1 | SB.a7 | SB.c8 | SB.d8 | SB.g8 ),
        SB.e1, 0, SB.g1, 0, 0, SB.a7,
        SB.c8, 0, SB.d8 | SB.g8, 0, 0, 0,
        136, 8, 64, 0, 11, 51 )
    TEST_WITH_ARGS(
        "nqrk2rn/ppp1ppbp/6p1/1b1p4/3P4/2P3N1/PPNBPPPP/1QRK1BR1 b CGcg - 2 5",
        rawcode("d8c8"), '-',
        0x3008bff5f7bb0091U,
        SB.d1, SB.b1, (SB.c1 | SB.g1), (SB.f1 | SB.d2), (SB.c2 | SB.g3),
            (SB.a2 | SB.b2 | SB.c3 | SB.d4 | SB.e2 | SB.f2 | SB.g2 | SB.h2),
        SB.c8, SB.b8, (SB.d8 | SB.g8), (SB.b5 | SB.g7), (SB.a8 | SB.h8),
            (SB.a7 | SB.b7 | SB.c7 | SB.d5 | SB.e7 | SB.f7 | SB.g6 | SB.h7),
        140, 4, 64, 0, 3, 6 )

//
// Test case
//
#tcase make_move_non_castling_non_pawn_move_tests

#test make_move_tested_with_white_king_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "8/8/4k3/8/4K3/3N1b2/4R3/8 w - - 0 100", rawcode("e4d4"), '-',
        ~( SB.e2 | SB.d3 | SB.f3 | SB.d4 | SB.e6 ),
        SB.d4, 0, SB.e2, 0, SB.d3, 0,
        SB.e6, 0, 0, SB.f3, 0, 0,
        0, 1, 128, 0, 1, 100 )
    TEST_WITH_ARGS(
        "3rkr2/8/8/8/8/8/8/3RKR2 w DFdf - 0 1", rawcode("e1e2"), '-',
        ~( SB.d1 | SB.f1 | SB.e2 | SB.d8 | SB.e8 | SB.f8 ),
        SB.e2, 0, (SB.d1 | SB.f1), 0, 0, 0,
        SB.e8, 0, (SB.d8 | SB.f8), 0, 0, 0,
        (2 + 1), 8, 32, 0, 1, 1 )

    // Captures
    TEST_WITH_ARGS(
        "8/8/4k3/8/4K3/3N1b2/4R3/8 w - - 0 100", rawcode("e4f3"), '-',
        ~( SB.e2 | SB.d3 | SB.f3 | SB.e6 ),
        SB.f3, 0, SB.e2, 0, SB.d3, 0,
        SB.e6, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 0, 100 )
    TEST_WITH_ARGS(
        "3rkr2/8/8/8/8/8/4b3/3RKR2 w DFdf - 0 1", rawcode("e1e2"), '-',
        ~( SB.d1 | SB.f1 | SB.e2 | SB.d8 | SB.e8 | SB.f8 ),
        SB.e2, 0, (SB.d1 | SB.f1), 0, 0, 0,
        SB.e8, 0, (SB.d8 | SB.f8), 0, 0, 0,
        (2 + 1), 8, 32, 0, 0, 1 )

#test make_move_tested_with_black_king_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "8/8/4k3/3R4/4K3/8/8/8 b - - 10 100", rawcode("e6f6"), '-',
        ~( SB.e4 | SB.d5 | SB.f6 ),
        SB.e4, 0, SB.d5, 0, 0, 0,
        SB.f6, 0, 0, 0, 0, 0,
        128, 1, 128, 0, 11, 101 )
    TEST_WITH_ARGS(
        "3Bk2r/8/8/8/8/8/8/R3K3 b Qk - 50 100", rawcode("e8f8"), '-',
        ~( SB.a1 | SB.e1 | SB.d8 | SB.f8 | SB.h8 ),
        SB.e1, 0, SB.a1, SB.d8, 0, 0,
        SB.f8, 0, SB.h8, 0, 0, 0,
        (128 + 4), 1, 128, 0, 51, 101 )

    // Captures
    TEST_WITH_ARGS(
        "8/8/4k3/3R4/4K3/8/8/8 b - - 10 100", rawcode("e6d5"), '-',
        ~( SB.e4 | SB.d5 ),
        SB.e4, 0, 0, 0, 0, 0,
        SB.d5, 0, 0, 0, 0, 0,
        128, 1, 128, 0, 0, 101 )
    TEST_WITH_ARGS(
        "3Bk2r/8/8/8/8/8/8/R3K3 b Qk - 50 100", rawcode("e8d8"), '-',
        ~( SB.a1 | SB.e1 | SB.d8 | SB.h8 ),
        SB.e1, 0, SB.a1, 0, 0, 0,
        SB.d8, 0, SB.h8, 0, 0, 0,
        (128 + 4), 1, 128, 0, 0, 101 )

#test make_move_tested_with_white_queen_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "r4k1r/2pq1pp1/1p2p3/p6p/2P5/P3QN2/1P1b1NPP/R2K3R w - - 0 20",
        rawcode("e3g5"), '-',
        0x5e93ed3efbde1576U,
        SB.d1, SB.g5, (SB.a1 | SB.h1), 0, (SB.f2 | SB.f3),
            (SB.a3 | SB.b2 | SB.c4 | SB.g2 | SB.h2),
        SB.f8, SB.d7, (SB.a8 | SB.h8), SB.d2, 0,
            (SB.a5 | SB.b6 | SB.c7 | SB.e6 | SB.f7 | SB.g7 | SB.h5),
        0, 1, 128, 0, 1, 20 )

    // Captures
    TEST_WITH_ARGS(
        "r4k1r/2pq1pp1/1p2p3/p6p/2P5/P3QN2/1P1b1NPP/R2K3R w - - 0 20",
        rawcode("e3d2"), '-',
        0x5e93ed7efbde1576U,
        SB.d1, SB.d2, (SB.a1 | SB.h1), 0, (SB.f2 | SB.f3),
            (SB.a3 | SB.b2 | SB.c4 | SB.g2 | SB.h2),
        SB.f8, SB.d7, (SB.a8 | SB.h8), 0, 0,
            (SB.a5 | SB.b6 | SB.c7 | SB.e6 | SB.f7 | SB.g7 | SB.h5),
        0, 1, 128, 0, 0, 20 )

#test make_move_tested_with_black_queen_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "3qk3/8/8/8/8/8/8/3QK3 b - - 10 100", rawcode("d8a5"), '-',
        ~( SB.d1 | SB.e1 | SB.a5 | SB.e8 ),
        SB.e1, SB.d1, 0, 0, 0, 0,
        SB.e8, SB.a5, 0, 0, 0, 0,
        128, 1, 128, 0, 11, 101 )

    // Captures
    TEST_WITH_ARGS(
        "3qk3/8/8/8/8/8/8/3QK3 b - - 10 100", rawcode("d8d1"), '-',
        ~( SB.d1 | SB.e1 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, 0,
        SB.e8, SB.d1, 0, 0, 0, 0,
        128, 1, 128, 0, 0, 101 )

#test make_move_tested_with_white_rook_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "3rkr2/8/8/8/8/8/8/3RKR2 w DFdf - 0 1", rawcode("d1d7"), '-',
        ~( SB.e1 | SB.f1 | SB.d7 | SB.d8 | SB.e8 | SB.f8 ),
        SB.e1, 0, (SB.f1 | SB.d7), 0, 0, 0,
        SB.e8, 0, (SB.d8 | SB.f8), 0, 0, 0,
        (8 + 2 + 1), 8, 32, 0, 1, 1 )
    TEST_WITH_ARGS(
        "1q2k3/8/8/8/8/8/8/1RR1K1R1 w GC - 1 123", rawcode("b1a1"), '-',
        ~( SB.a1 | SB.c1 | SB.e1 | SB.g1 | SB.b8 | SB.e8 ),
        SB.e1, 0, (SB.a1 | SB.c1 | SB.g1), 0, 0, 0,
        SB.e8, SB.b8, 0, 0, 0, 0,
        (8 + 4), 4, 64, 0, 2, 123 )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K2R w Qq - 0 1", rawcode("h1h2"), '-',
        ~( SB.a1 | SB.e1 | SB.h2 | SB.a8 | SB.e8 | SB.h8 ),
        SB.e1, 0, (SB.a1 | SB.h2), 0, 0, 0,
        SB.e8, 0, (SB.a8 | SB.h8), 0, 0, 0,
        (4 + 1), 1, 128, 0, 1, 1 )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K2R w Qq - 0 1", rawcode("a1b1"), '-',
        ~( SB.b1 | SB.e1 | SB.h1 | SB.a8 | SB.e8 | SB.h8 ),
        SB.e1, 0, (SB.b1 | SB.h1), 0, 0, 0,
        SB.e8, 0, (SB.a8 | SB.h8), 0, 0, 0,
        1, 1, 128, 0, 1, 1 )

    // Captures
    TEST_WITH_ARGS(
        "3rkr2/8/8/8/8/8/8/3RKR2 w DFdf - 0 1", rawcode("f1f8"), '-',
        ~( SB.d1 | SB.e1 | SB.d8 | SB.e8 | SB.f8 ),
        SB.e1, 0, (SB.d1 | SB.f8), 0, 0, 0,
        SB.e8, 0, SB.d8, 0, 0, 0,
        (4 + 1), 8, 32, 0, 0, 1 )
    TEST_WITH_ARGS(
        "1q2k3/8/8/8/8/8/8/1RR1K1R1 w GC - 1 123", rawcode("b1b8"), '-',
        ~( SB.c1 | SB.e1 | SB.g1 | SB.b8 | SB.e8 ),
        SB.e1, 0, (SB.b8 | SB.c1 | SB.g1), 0, 0, 0,
        SB.e8, 0, 0, 0, 0, 0,
        (8 + 4), 4, 64, 0, 0, 123 )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K2R w Qq - 0 1", rawcode("a1a8"), '-',
        ~( SB.e1 | SB.h1 | SB.a8 | SB.e8 | SB.h8 ),
        SB.e1, 0, (SB.a8 | SB.h1), 0, 0, 0,
        SB.e8, 0, SB.h8, 0, 0, 0,
        0, 1, 128, 0, 0, 1 )

#test make_move_tested_with_black_rook_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "4k3/8/8/8/R3r3/1K6/8/8 b - - 0 1", rawcode("e4e3"), '-',
        ~( SB.b3 | SB.a4 | SB.e3 | SB.e8 ),
        SB.b3, 0, SB.a4, 0, 0, 0,
        SB.e8, 0, SB.e3, 0, 0, 0,
        128, 1, 128, 0, 1, 2 )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K2R b KQkq - 1 13", rawcode("a8d8"), '-',
        ~( SB.a1 | SB.e1 | SB.h1 | SB.d8 | SB.e8 | SB.h8 ),
        SB.e1, 0, (SB.a1 | SB.h1), 0, 0, 0,
        SB.e8, 0, (SB.d8 | SB.h8), 0, 0, 0,
        (128 + 8 + 4 + 2), 1, 128, 0, 2, 14 )
    TEST_WITH_ARGS(
        "1rkr4/1r6/8/8/8/8/8/1RKR4 b BDbd - 1 1", rawcode("b7c7"), '-',
        ~( SB.b1 | SB.c1 | SB.d1 | SB.c7 | SB.b8 | SB.c8 | SB.d8 ),
        SB.c1, 0, (SB.b1 | SB.d1), 0, 0, 0,
        SB.c8, 0, (SB.b8 | SB.d8 | SB.c7), 0, 0, 0,
        (128 + 8 + 4 + 2 + 1), 2, 8, 0, 2, 2 )
    TEST_WITH_ARGS(
        "1rkr4/1r6/8/8/8/8/8/1RKR4 b BDbd - 1 1", rawcode("d8d7"), '-',
        ~( SB.b1 | SB.c1 | SB.d1 | SB.b7 | SB.b8 | SB.c8 | SB.d7 ),
        SB.c1, 0, (SB.b1 | SB.d1), 0, 0, 0,
        SB.c8, 0, (SB.b8 | SB.d7 | SB.b7), 0, 0, 0,
        (128 + 8 + 4 + 1), 2, 8, 0, 2, 2 )

    // Captures
    TEST_WITH_ARGS(
        "4k3/8/8/8/R3r3/1K6/8/8 b - - 0 1", rawcode("e4a4"), '-',
        ~( SB.b3 | SB.a4 | SB.e8 ),
        SB.b3, 0, 0, 0, 0, 0,
        SB.e8, 0, SB.a4, 0, 0, 0,
        128, 1, 128, 0, 0, 2 )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K2R b KQkq - 1 13", rawcode("a8a1"), '-',
        ~( SB.a1 | SB.e1 | SB.h1 | SB.e8 | SB.h8 ),
        SB.e1, 0, SB.h1, 0, 0, 0,
        SB.e8, 0, (SB.a1 | SB.h8), 0, 0, 0,
        (128 + 8 + 2), 1, 128, 0, 0, 14 )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K2R b KQkq - 1 13", rawcode("h8h1"), '-',
        ~( SB.a1 | SB.e1 | SB.h1 | SB.a8 | SB.e8 ),
        SB.e1, 0, SB.a1, 0, 0, 0,
        SB.e8, 0, (SB.a8 | SB.h1), 0, 0, 0,
        (128 + 4 + 1), 1, 128, 0, 0, 14 )
    TEST_WITH_ARGS(
        "1rkr4/1r6/8/8/8/8/8/1RKR4 b BDbd - 1 1", rawcode("b7b1"), '-',
        ~( SB.b1 | SB.c1 | SB.d1 | SB.b8 | SB.c8 | SB.d8 ),
        SB.c1, 0, SB.d1, 0, 0, 0,
        SB.c8, 0, (SB.b1 | SB.b8 | SB.d8), 0, 0, 0,
        (128 + 8 + 2 + 1), 2, 8, 0, 0, 2 )
    TEST_WITH_ARGS(
        "1rkr4/1r6/8/8/8/8/8/1RKR4 b BDbd - 1 1", rawcode("d8d1"), '-',
        ~( SB.b1 | SB.c1 | SB.d1 | SB.b7 | SB.b8 | SB.c8 ),
        SB.c1, 0, SB.b1, 0, 0, 0,
        SB.c8, 0, (SB.b8 | SB.d1 | SB.b7), 0, 0, 0,
        (128 + 4 + 1), 2, 8, 0, 0, 2 )

#test make_move_tested_with_white_bishop_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "rq1k3r/1bp2ppp/1p2p3/p1b5/2P3n1/3B1N2/PP3PPP/RQBKN2R w AHah - 2 10",
        rawcode("d3f5"), '-',
        0x7419eddabbdf1c60U,
        SB.d1, SB.b1, (SB.a1 | SB.h1), (SB.c1 | SB.f5), (SB.e1 | SB.f3),
            (SB.a2 | SB.b2 | SB.c4 | SB.f2 | SB.g2 | SB.h2),
        SB.d8, SB.b8, (SB.a8 | SB.h8), (SB.c5 | SB.b7), SB.g4,
            (SB.a5 | SB.b6 | SB.c7 | SB.e6 | SB.f7 | SB.g7 | SB.h7),
        (8 + 4 + 2 + 1), 1, 128, 0, 3, 10 )

    // Captures
    TEST_WITH_ARGS(
        "rq1k3r/1bp2ppp/1p2p3/p1b5/2P3n1/3B1N2/PP3PPP/RQBKN2R w AHah - 2 10",
        rawcode("d3h7"), '-',
        0x7419edfabbdf1c60U,
        SB.d1, SB.b1, (SB.a1 | SB.h1), (SB.c1 | SB.h7), (SB.e1 | SB.f3),
            (SB.a2 | SB.b2 | SB.c4 | SB.f2 | SB.g2 | SB.h2),
        SB.d8, SB.b8, (SB.a8 | SB.h8), (SB.c5 | SB.b7), SB.g4,
            (SB.a5 | SB.b6 | SB.c7 | SB.e6 | SB.f7 | SB.g7),
        (8 + 4 + 2 + 1), 1, 128, 0, 0, 10 )

#test make_move_tested_with_black_bishop_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "b3k3/8/8/8/3P4/8/8/4K2R b K d3 0 9",
        rawcode("a8d5"), '-',
        ~( SB.e1 | SB.h1 | SB.d4 | SB.d5 | SB.e8 ),
        SB.e1, 0, SB.h1, 0, 0, SB.d4,
        SB.e8, 0, 0, SB.d5, 0, 0,
        (128 + 8), 1, 128, 0, 1, 10 )

    // Captures
    TEST_WITH_ARGS(
        "b3k3/8/8/8/3P4/8/8/4K2R b K d3 0 9",
        rawcode("a8h1"), '-',
        ~( SB.e1 | SB.h1 | SB.d4 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, SB.d4,
        SB.e8, 0, 0, SB.h1, 0, 0,
        128, 1, 128, 0, 0, 10 )

#test make_move_tested_with_white_knight_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "8/p7/1p2k2p/1P1NP2b/4P3/4K3/8/8 w - - 0 77", rawcode("d5c7"), '-',
        0xfffa6d6defefffffU,
        SB.e3, 0, 0, 0, SB.c7, (SB.b5 | SB.e4 | SB.e5),
        SB.e6, 0, 0, SB.h5, 0, (SB.a7 | SB.b6 | SB.h6),
        0, 1, 128, 0, 1, 77 )

    // Captures
    TEST_WITH_ARGS(
        "8/p7/1p2k2p/1P1NP2b/4Pp2/4K3/8/8 w - - 0 77", rawcode("d5f4"), '-',
        0xfffe6d6dcfefffffU,
        SB.e3, 0, 0, 0, SB.f4, (SB.b5 | SB.e4 | SB.e5),
        SB.e6, 0, 0, SB.h5, 0, (SB.a7 | SB.b6 | SB.h6),
        0, 1, 128, 0, 0, 77 )

#test make_move_tested_with_black_knight_moves
    Pos *p;

    // Non-captures
    TEST_WITH_ARGS(
        "4k3/8/8/8/4P3/1n6/8/R3K3 b Q e3 0 1", rawcode("b3d2"), '-',
        ~( SB.a1 | SB.e1 | SB.d2 | SB.e4 | SB.e8 ),
        SB.e1, 0, SB.a1, 0, 0, SB.e4,
        SB.e8, 0, 0, 0, SB.d2, 0,
        (128 + 4), 1, 128, 0, 1, 2 )

    // Captures
    TEST_WITH_ARGS(
        "4k3/8/8/8/4P3/1n6/8/R3K3 b Q e3 0 1", rawcode("b3a1"), '-',
        ~( SB.a1 | SB.e1 | SB.e4 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, SB.e4,
        SB.e8, 0, 0, 0, SB.a1, 0,
        128, 1, 128, 0, 0, 2 )

//
// Test case
//
#tcase make_move_pawn_move_tests

#test make_move_tested_with_double_advancing_white_pawns
    Pos *p;

    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/4P3/4K3 w - - 1 50", rawcode("e2e4"), '-',
        ~( SB.e1 | SB.e4 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, SB.e4,
        SB.e8, 0, 0, 0, 0, 0,
        0, 1, 128, 16, 0, 50 )
    TEST_WITH_ARGS(
        "k7/8/8/p7/8/8/P7/K7 w - a6 0 100", rawcode("a2a4"), '-',
        ~( SB.a1 | SB.a4 | SB.a5 | SB.a8 ),
        SB.a1, 0, 0, 0, 0, SB.a4,
        SB.a8, 0, 0, 0, 0, SB.a5,
        0, 1, 128, 1, 0, 100 )
    TEST_WITH_ARGS(
        "8/8/8/6k1/8/8/7P/7K w - - 1 100", rawcode("h2h4"), '-',
        ~( SB.h1 | SB.h4 | SB.g5 ),
        SB.h1, 0, 0, 0, 0, SB.h4,
        SB.g5, 0, 0, 0, 0, 0,
        0, 1, 128, 128, 0, 100 )

#test make_move_tested_with_double_advancing_black_pawns
    Pos *p;

    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        rawcode("c7c5"), '-',
        0x4fffbefff1000U,
        SB.e1, SB.d1, (SB.a1 | SB.h1), (SB.c1 | SB.f1), (SB.b1 | SB.g1),
            (SB.a2 | SB.b2 | SB.c2 | SB.d2 | SB.e4 | SB.f2 | SB.g2 | SB.h2),
        SB.e8, SB.d8, (SB.a8 | SB.h8), (SB.c8 | SB.f8), (SB.b8 | SB.g8),
            (SB.a7 | SB.b7 | SB.c5 | SB.d7 | SB.e7 | SB.f7 | SB.g7 | SB.h7),
        128 + 8 + 4 + 2 + 1, 1, 128, 4, 0, 2 )
    TEST_WITH_ARGS(
        "k7/p7/8/1K6/8/8/8/8 b - - 1 123", rawcode("a7a5"), '-',
        ~( SB.a5 | SB.b5 | SB.a8 ),
        SB.b5, 0, 0, 0, 0, 0,
        SB.a8, 0, 0, 0, 0, SB.a5,
        128, 1, 128, 1, 0, 124 )
    TEST_WITH_ARGS(
        "1r1kr3/7p/8/6P1/7P/8/8/1R1KR3 b BEbe h3 0 50", rawcode("h7h5"), '-',
        ~( SB.b1 | SB.d1 | SB.e1 | SB.h4 | SB.g5 | SB.h5 |
            SB.b8 | SB.d8 | SB.e8 ),
        SB.d1, 0, (SB.b1 | SB.e1), 0, 0, (SB.h4 | SB.g5),
        SB.d8, 0, (SB.b8 | SB.e8), 0, 0, SB.h5,
        128 + 8 + 4 + 2 + 1, 2, 16, 128, 0, 51 )

#test make_move_tested_with_white_pawns_doing_non_en_passant_captures
    Pos *p;

    TEST_WITH_ARGS(
        "4k3/8/8/3rbp2/4P3/8/8/4K3 w - f6 0 100", rawcode("e4d5"), '-',
        ~( SB.e1 | SB.d5 | SB.e5 | SB.f5 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, SB.d5,
        SB.e8, 0, 0, SB.e5, 0, SB.f5,
        0, 1, 128, 0, 0, 100 )
    TEST_WITH_ARGS(
        "4k3/8/8/3rbp2/4P3/8/8/4K3 w - - 1 100", rawcode("e4f5"), '-',
        ~( SB.e1 | SB.d5 | SB.e5 | SB.f5 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, SB.f5,
        SB.e8, 0, SB.d5, SB.e5, 0, 0,
        0, 1, 128, 0, 0, 100 )

#test make_move_tested_with_black_pawns_doing_non_en_passant_captures
    Pos *p;

    TEST_WITH_ARGS(
        "4k2r/1p6/P7/4p3/3N4/8/6p1/K6B b - - 10 20", rawcode("b7a6"), '-',
        ~( SB.a1 | SB.h1 | SB.g2 | SB.d4 | SB.e5 | SB.a6 | SB.e8 | SB.h8 ),
        SB.a1, 0, 0, SB.h1, SB.d4, 0,
        SB.e8, 0, SB.h8, 0, 0, (SB.g2 | SB.e5 | SB.a6),
        128, 1, 128, 0, 0, 21 )
    TEST_WITH_ARGS(
        "4k2r/1p6/P7/4p3/3N4/8/6p1/K6B b - - 10 20", rawcode("e5d4"), '-',
        ~( SB.a1 | SB.h1 | SB.g2 | SB.d4 | SB.a6 | SB.b7 | SB.e8 | SB.h8 ),
        SB.a1, 0, 0, SB.h1, 0, SB.a6,
        SB.e8, 0, SB.h8, 0, 0, (SB.g2 | SB.d4 | SB.b7),
        128, 1, 128, 0, 0, 21 )
    TEST_WITH_ARGS(
        "4k2r/1p6/P7/4p3/3N4/8/6p1/K6B b - - 10 20", rawcode("g2h1"), 'n',
        ~( SB.a1 | SB.h1 | SB.d4 | SB.e5 | SB.a6 | SB.b7 | SB.e8 | SB.h8 ),
        SB.a1, 0, 0, 0, SB.d4, SB.a6,
        SB.e8, 0, SB.h8, 0, SB.h1, (SB.e5 | SB.b7),
        128, 1, 128, 0, 0, 21 )

#test make_move_tested_with_white_pawns_getting_a_promotion
    Pos *p;

    TEST_WITH_ARGS(
        "3b4/P3P3/8/8/8/8/8/K6k w - - 1 123", rawcode("a7a8"), 'q',
        ~( SB.a1 | SB.h1 | SB.e7 | SB.a8 | SB.d8 ),
        SB.a1, SB.a8, 0, 0, 0, SB.e7,
        SB.h1, 0, 0, SB.d8, 0, 0,
        0, 1, 128, 0, 0, 123 )
    TEST_WITH_ARGS(
        "3b4/P3P3/8/8/8/8/8/K6k w - - 1 123", rawcode("e7d8"), 'q',
        ~( SB.a1 | SB.h1 | SB.a7 | SB.d8 ),
        SB.a1, SB.d8, 0, 0, 0, SB.a7,
        SB.h1, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 0, 123 )
    TEST_WITH_ARGS(
        "3b4/P3P3/8/8/8/8/8/K6k w - - 1 123", rawcode("e7d8"), 'r',
        ~( SB.a1 | SB.h1 | SB.a7 | SB.d8 ),
        SB.a1, 0, SB.d8, 0, 0, SB.a7,
        SB.h1, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 0, 123 )

#test make_move_tested_with_black_pawns_getting_a_promotion
    Pos *p;

    TEST_WITH_ARGS(
        "4k3/8/8/8/7P/8/1p2p3/RK3R2 b AF h3 0 100", rawcode("b2a1"), 'q',
        ~( SB.a1 | SB.b1 | SB.f1 | SB.e2 | SB.h4 | SB.e8 ),
        SB.b1, 0, SB.f1, 0, 0, SB.h4,
        SB.e8, SB.a1, 0, 0, 0, SB.e2,
        128 + 8, 1, 32, 0, 0, 101 )
    TEST_WITH_ARGS(
        "4k3/8/8/8/7P/8/1p2p3/RK3R2 b AF h3 0 100", rawcode("e2e1"), 'r',
        ~( SB.a1 | SB.b1 | SB.e1 | SB.f1 | SB.b2 | SB.h4 | SB.e8 ),
        SB.b1, 0, (SB.a1 | SB.f1), 0, 0, SB.h4,
        SB.e8, 0, SB.e1, 0, 0, SB.b2,
        128 + 8 + 4, 1, 32, 0, 0, 101 )
    TEST_WITH_ARGS(
        "4k3/8/8/8/7P/8/1p2p3/RK3R2 b AF h3 0 100", rawcode("e2f1"), 'b',
        ~( SB.a1 | SB.b1 | SB.f1 | SB.b2 | SB.h4 | SB.e8 ),
        SB.b1, 0, SB.a1, 0, 0, SB.h4,
        SB.e8, 0, 0, SB.f1, 0, SB.b2,
        128 + 4, 1, 32, 0, 0, 101 )

#test make_move_tested_with_white_pawns_doing_en_passant_captures
    Pos *p;

    TEST_WITH_ARGS(
        "4k3/8/8/4pP2/8/8/8/4K3 w - e6 0 2", rawcode("f5e6"), '-',
        ~( SB.e1 | SB.e6 | SB.e8 ),
        SB.e1, 0, 0, 0, 0, SB.e6,
        SB.e8, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 0, 2 )
    TEST_WITH_ARGS(
        "8/2k5/8/Pp6/2K5/8/8/8 w - b6 0 100", rawcode("a5b6"), '-',
        ~( SB.c4 | SB.b6 | SB.c7 ),
        SB.c4, 0, 0, 0, 0, SB.b6,
        SB.c7, 0, 0, 0, 0, 0,
        0, 1, 128, 0, 0, 100 )

#test make_move_tested_with_black_pawns_doing_en_passant_captures
    Pos *p;

    TEST_WITH_ARGS(
        "4k2r/8/8/8/6Pp/8/8/7K b k g3 0 75", rawcode("h4g3"), '-',
        ~( SB.h1 | SB.g3 | SB.e8 | SB.h8 ),
        SB.h1, 0, 0, 0, 0, 0,
        SB.e8, 0, SB.h8, 0, 0, SB.g3,
        128 + 2, 1, 128, 0, 0, 76 )
    TEST_WITH_ARGS(
        "3rk1r1/8/8/8/pPp5/8/8/3RK1R1 b DGdg b3 0 123", rawcode("a4b3"), '-',
        ~( SB.d1 | SB.e1 | SB.g1 | SB.b3 | SB.c4 | SB.d8 | SB.e8 | SB.g8 ),
        SB.e1, 0, (SB.d1 | SB.g1), 0, 0, 0,
        SB.e8, 0, (SB.d8 | SB.g8), 0, 0, (SB.b3 | SB.c4),
        128 + 8 + 4 + 2 + 1, 8, 64, 0, 0, 124 )
    TEST_WITH_ARGS(
        "3rk1r1/8/8/8/pPp5/8/8/3RK1R1 b DGdg b3 0 123", rawcode("c4b3"), '-',
        ~( SB.d1 | SB.e1 | SB.g1 | SB.b3 | SB.a4 | SB.d8 | SB.e8 | SB.g8 ),
        SB.e1, 0, (SB.d1 | SB.g1), 0, 0, 0,
        SB.e8, 0, (SB.d8 | SB.g8), 0, 0, (SB.b3 | SB.a4),
        128 + 8 + 4 + 2 + 1, 8, 64, 0, 0, 124 )

//
// Test case
//
#tcase make_move_misc_tests

#test make_move_tested_with_misc_positions_batch_01
    Pos *p;

    TEST_WITH_ARGS(
        FEN_GAME_OF_THE_CENTURY, rawcode("b6a4"), '-',
        0x960c9bbba6db1c47U,
        SB.e1, SB.c5, (SB.d1 | SB.h1), (SB.f1 | SB.g5), (SB.c3 | SB.f3),
            (SB.a2 | SB.b2 | SB.d4 | SB.e4 | SB.f2 | SB.g2 | SB.h2),
        SB.g8, SB.d8, (SB.a8 | SB.f8), (SB.g4 | SB.g7), (SB.a4 | SB.f6),
            (SB.a7 | SB.b7 | SB.c6 | SB.e7 | SB.f7 | SB.g6 | SB.h7),
        128 + 8, 1, 128, 0, 7, 12 )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase remove_castling_rights_tests

#define TEST_WITH_ARGS( fen, color, side, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    remove_castling_rights( p, color, side ); \
    ck_assert( p->turn_and_ca_flags == (expected) ); \
    free( (Pos *) p );

#test remove_castling_rights_test_01
    Pos *p;

    TEST_WITH_ARGS( INIT_POS, "white", "kingside",
        (128 + 4 + 2 + 1) )
    TEST_WITH_ARGS( INIT_POS, "white", "h-side",
        (128 + 4 + 2 + 1) )
    TEST_WITH_ARGS( INIT_POS, "white", "queenside",
        (128 + 8 + 2 + 1) )
    TEST_WITH_ARGS( INIT_POS, "white", "a-side",
        (128 + 8 + 2 + 1) )
    TEST_WITH_ARGS( INIT_POS, "white", "both",
        (128 + 2 + 1) )

    TEST_WITH_ARGS( INIT_POS, "black", "kingside",
        (128 + 8 + 4 + 1) )
    TEST_WITH_ARGS( INIT_POS, "black", "h-side",
        (128 + 8 + 4 + 1) )
    TEST_WITH_ARGS( INIT_POS, "black", "queenside",
        (128 + 8 + 4 + 2) )
    TEST_WITH_ARGS( INIT_POS, "black", "a-side",
        (128 + 8 + 4 + 2) )
    TEST_WITH_ARGS( INIT_POS, "black", "both",
        (128 + 8 + 4) )

#test remove_castling_rights_test_02
    Pos *p;

    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "white", "kingside", (4 + 2 + 1) )
    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "white", "queenside", (8 + 2 + 1) )
    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "white", "both", (2 + 1) )

    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "black", "kingside", (8 + 4 + 1) )
    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "black", "queenside", (8 + 4 + 2) )
    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "black", "both", (8 + 4) )

#test remove_castling_rights_test_03
    Pos *p;

    TEST_WITH_ARGS(
        "brknrnqb/pppppppp/8/8/8/8/PPPPPPPP/BRKNRNQB w BEbe - 0 1",
        "white", "kingside", (128 + 4 + 2 + 1) )
    TEST_WITH_ARGS(
        "brknrnqb/pppppppp/8/8/8/8/PPPPPPPP/BRKNRNQB w BEbe - 0 1",
        "white", "queenside", (128 + 8 + 2 + 1) )
    TEST_WITH_ARGS(
        "brknrnqb/pppppppp/8/8/8/8/PPPPPPPP/BRKNRNQB w BEbe - 0 1",
        "white", "both", (128 + 2 + 1) )

    TEST_WITH_ARGS(
        "brknrnqb/pppppppp/8/8/8/8/PPPPPPPP/BRKNRNQB w BEbe - 0 1",
        "black", "kingside", (128 + 8 + 4 + 1) )
    TEST_WITH_ARGS(
        "brknrnqb/pppppppp/8/8/8/8/PPPPPPPP/BRKNRNQB w BEbe - 0 1",
        "black", "queenside", (128 + 8 + 4 + 2) )
    TEST_WITH_ARGS(
        "brknrnqb/pppppppp/8/8/8/8/PPPPPPPP/BRKNRNQB w BEbe - 0 1",
        "black", "both", (128 + 8 + 4) )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase ecaf_tests

#test ecaf_test
    char
        *fen[] = {
            INIT_POS,
            "1rkr4/8/8/8/8/8/8/1RKR4 w DBdb - 0 50",
            "1rkr4/8/8/8/8/8/8/1RKR4 b BDbd - 0 50",
            "nqnrk2r/pppp1ppb/7p/8/1bB5/1N2P3/PPPRN1PP/1Q2K1BR b Hdh - 4 7",
            "4k3/8/8/8/8/4p3/8/4K2R w K - 10 50",
            "r3k3/8/8/8/4P3/8/8/4K2R b Kq e3 0 100",
            "5rk1/8/8/6p1/8/8/8/6KR w Hf g6 0 75",
            "8/8/8/k7/P7/8/8/K7 b - a3 0 50",
            "7k/8/8/8/8/2n5/1B6/R3K3 w Q - 10 100",
            NULL },
        *expected[] = {
            "HAha",
            "DBdb",
            "DBdb",
            "H-hd",
            "H---",
            "H--a",
            "H--f",
            "----",
            "-A--" };

    for(int i = 0; fen[i]; i++) {
        ck_assert( !che_fen_validator(fen[i]) );
        Pos *p = fen_to_pos(fen[i]);
        char *the_ecaf = get_ecaf(p);
        // printf("%s\n", the_ecaf);
        free(p);
        ck_assert( !strcmp(the_ecaf, expected[i]) );
        free(the_ecaf); }

//
// Test case
//
#tcase single_san_make_move_tests

#define TEST_WITH_ARGS(orig_fen, san, expected_fen) \
    ck_assert(!che_fen_validator(orig_fen)), \
        ck_assert(!che_fen_validator(expected_fen)), \
        ck_assert(che_is_san(san)); \
    actual_fen = single_san_make_move(orig_fen, san); \
    ck_assert(!strcmp(actual_fen, expected_fen)); \
    free(actual_fen);

#test single_san_make_move_test_1
    char *actual_fen;

    TEST_WITH_ARGS(
        INIT_POS,
        "e4",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1")
    TEST_WITH_ARGS(
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
        "Nf6",
        "rnbqkb1r/pppppppp/5n2/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 1 2")
    TEST_WITH_ARGS(
        "rnbqkb1r/pppppppp/5n2/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 1 2",
        "e5",
        "rnbqkb1r/pppppppp/5n2/4P3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2")
    TEST_WITH_ARGS(
        "rnbqkb1r/pppppppp/5n2/4P3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2",
        "Nd5",
        "rnbqkb1r/pppppppp/8/3nP3/8/8/PPPP1PPP/RNBQKBNR w KQkq - 1 3")

#test single_san_make_move_test_2
    char *actual_fen;

    TEST_WITH_ARGS(
        "k7/4P3/8/8/8/8/8/4K3 w - - 19 83",
        "e8=Q+",
        "k3Q3/8/8/8/8/8/8/4K3 b - - 0 83")
    TEST_WITH_ARGS(
        "k7/4P3/8/8/8/8/8/4K3 w - - 19 83",
        "e8=N",
        "k3N3/8/8/8/8/8/8/4K3 b - - 0 83")
    TEST_WITH_ARGS(
        "k7/8/8/8/7P/8/p7/1RKR4 b BD h3 0 123",
        "a1=Q",
        "k7/8/8/8/7P/8/8/qRKR4 w DB - 0 124")
    TEST_WITH_ARGS(
        "k7/8/8/8/7P/8/p7/1RKR4 b BD h3 0 123",
        "axb1=R+",
        "k7/8/8/8/7P/8/8/1rKR4 w D - 0 124")

#test single_san_make_move_test_3
    char *actual_fen;

    TEST_WITH_ARGS(
        "5k2/8/8/4p3/8/8/8/R3K2R w KQ e6 0 99",
        "O-O+",
        "5k2/8/8/4p3/8/8/8/R4RK1 b - - 1 99")
    TEST_WITH_ARGS(
        "5k2/8/8/4p3/8/8/8/R3K2R w KQ e6 0 99",
        "O-O-O",
        "5k2/8/8/4p3/8/8/8/2KR3R b - - 1 99")
    TEST_WITH_ARGS(
        "rk2qrnb/ppp1pppp/2n5/8/3P2b1/5B2/PPP1PP1P/RKBNQRN1 b AFaf - 2 4",
        "O-O-O",
        "2krqrnb/ppp1pppp/2n5/8/3P2b1/5B2/PPP1PP1P/RKBNQRN1 w FA - 3 5")
    TEST_WITH_ARGS(
        "qb1rk1r1/pp1n1ppp/2p3n1/3ppb2/8/PP1P4/BBPNPPPP/Q2RK1RN w GDgd - 4 7",
        "O-O",
        "qb1rk1r1/pp1n1ppp/2p3n1/3ppb2/8/PP1P4/BBPNPPPP/Q2R1RKN b gd - 5 7")
    TEST_WITH_ARGS(
        "qb1rk1r1/pp1n1ppp/2p3n1/3ppb2/8/PP1P4/BBPNPPPP/Q2RK1RN w DGdg - 4 7",
        "O-O-O",
        "qb1rk1r1/pp1n1ppp/2p3n1/3ppb2/8/PP1P4/BBPNPPPP/Q1KR2RN b gd - 5 7")

#test single_san_make_move_test_4
    char *actual_fen;

    TEST_WITH_ARGS(
        "4k3/8/8/3Pp3/8/8/8/4K3 w - e6 0 79",
        "dxe6",
        "4k3/8/4P3/8/8/8/8/4K3 b - - 0 79")
    TEST_WITH_ARGS(
        "8/8/8/4k3/4pP2/8/4K3/8 b - f3 0 89",
        "exf3+",
        "8/8/8/4k3/8/5p2/4K3/8 w - - 0 90")
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/Pp6/8/8/R3K2R b KQkq a3 0 99",
        "bxa3",
        "r3k2r/8/8/8/8/p7/8/R3K2R w KQkq - 0 100")

#test single_san_make_move_test_5
    char *actual_fen;

    TEST_WITH_ARGS(
        FEN_GAME_OF_THE_CENTURY,
        "Na4",
        "r2q1rk1/pp2ppbp/2p2np1/2Q3B1/n2PP1b1/2N2N2/PP3PPP/3RKB1R w K - 7 12")
    TEST_WITH_ARGS(
        FEN_GAME_OF_THE_CENTURY,
        "Bxf3",
        "r2q1rk1/pp2ppbp/1np2np1/2Q3B1/3PP3/2N2b2/PP3PPP/3RKB1R w K - 0 12")
    TEST_WITH_ARGS(
        FEN_GAME_OF_THE_CENTURY,
        "e5",
        "r2q1rk1/pp3pbp/1np2np1/2Q1p1B1/3PP1b1/2N2N2/PP3PPP/3RKB1R w K e6 0 12")

#undef TEST_WITH_ARGS

#test single_san_make_move_test_6
    char *fen = single_san_make_move(
        "5k2/8/8/4p3/8/8/8/R3K2R w KQ e6 0 99", "O-O-O");
    ck_assert(!strcmp(fen, "5k2/8/8/4p3/8/8/8/2KR3R b - - 1 99"));
    free(fen);

//
// Test case
//
#tcase che_make_moves_tests

#define TEST_WITH_ARGS(fen, sans, exp_fens) \
    ck_assert(!fen || !che_fen_validator(fen)); \
    actual_fens = che_make_moves(fen, sans); \
    ck_assert(!strcmp(actual_fens, exp_fens)); \
    free(actual_fens);

#test che_make_moves_test_1
    char *actual_fens;

    TEST_WITH_ARGS(NULL, "e4",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n")
    TEST_WITH_ARGS(INIT_POS, "e4",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n")
    TEST_WITH_ARGS(INIT_POS, "e4\ne5",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\n")
    TEST_WITH_ARGS(INIT_POS, "e4\ne5\nf4\n",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2\n")
    TEST_WITH_ARGS(FEN_PERSONALLY_SIGNIFICANT, "Kf8",
        "5k2/r1q1b2n/6QP/p3R3/1p3p2/1P6/1PP2P2/2K4R w - - 2 36\n")
    TEST_WITH_ARGS(FEN_GAME_OF_THE_CENTURY, "Na4",
        "r2q1rk1/pp2ppbp/2p2np1/2Q3B1/n2PP1b1/2N2N2/PP3PPP/3RKB1R w K - 7 12\n")

#test che_make_moves_test_2
    char *actual_fens;

    TEST_WITH_ARGS(INIT_POS,
        "e4\ne5\nNf3\nNc6\nBc4\nNd4\nNxe5\nQg5\nNxf7\nQxg2\nRf1\nQxe4+\nBe2\nNf3#\n",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2\n"
        "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3\n"
        "r1bqkbnr/pppp1ppp/2n5/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3\n"
        "r1bqkbnr/pppp1ppp/8/4p3/2BnP3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4\n"
        "r1bqkbnr/pppp1ppp/8/4N3/2BnP3/8/PPPP1PPP/RNBQK2R b KQkq - 0 4\n"
        "r1b1kbnr/pppp1ppp/8/4N1q1/2BnP3/8/PPPP1PPP/RNBQK2R w KQkq - 1 5\n"
        "r1b1kbnr/pppp1Npp/8/6q1/2BnP3/8/PPPP1PPP/RNBQK2R b KQkq - 0 5\n"
        "r1b1kbnr/pppp1Npp/8/8/2BnP3/8/PPPP1PqP/RNBQK2R w KQkq - 0 6\n"
        "r1b1kbnr/pppp1Npp/8/8/2BnP3/8/PPPP1PqP/RNBQKR2 b Qkq - 1 6\n"
        "r1b1kbnr/pppp1Npp/8/8/2Bnq3/8/PPPP1P1P/RNBQKR2 w Qkq - 0 7\n"
        "r1b1kbnr/pppp1Npp/8/8/3nq3/8/PPPPBP1P/RNBQKR2 b Qkq - 1 7\n"
        "r1b1kbnr/pppp1Npp/8/8/4q3/5n2/PPPPBP1P/RNBQKR2 w Qkq - 2 8\n")

#test che_make_moves_test_3
    char *actual_fens;

    TEST_WITH_ARGS("8/8/8/8/8/7k/8/N6K w - - 12 34", NULL,
        "8/8/8/8/8/7k/8/N5K1 b - - 13 34\n"
        "8/8/8/8/8/1N5k/8/7K b - - 13 34\n"
        "8/8/8/8/8/7k/2N5/7K b - - 13 34\n")
    TEST_WITH_ARGS(NULL, NULL,
        "rnbqkbnr/pppppppp/8/8/8/N7/PPPPPPPP/R1BQKBNR b KQkq - 1 1\n" // Na3
        "rnbqkbnr/pppppppp/8/8/8/2N5/PPPPPPPP/R1BQKBNR b KQkq - 1 1\n" // Nc3
        "rnbqkbnr/pppppppp/8/8/8/5N2/PPPPPPPP/RNBQKB1R b KQkq - 1 1\n" // Nf3
        "rnbqkbnr/pppppppp/8/8/8/7N/PPPPPPPP/RNBQKB1R b KQkq - 1 1\n" // Nh3
        "rnbqkbnr/pppppppp/8/8/8/P7/1PPPPPPP/RNBQKBNR b KQkq - 0 1\n" // a3
        "rnbqkbnr/pppppppp/8/8/P7/8/1PPPPPPP/RNBQKBNR b KQkq a3 0 1\n" // a4
        "rnbqkbnr/pppppppp/8/8/8/1P6/P1PPPPPP/RNBQKBNR b KQkq - 0 1\n" // b3
        "rnbqkbnr/pppppppp/8/8/1P6/8/P1PPPPPP/RNBQKBNR b KQkq b3 0 1\n" // b4
        "rnbqkbnr/pppppppp/8/8/8/2P5/PP1PPPPP/RNBQKBNR b KQkq - 0 1\n" // c3
        "rnbqkbnr/pppppppp/8/8/2P5/8/PP1PPPPP/RNBQKBNR b KQkq c3 0 1\n" // c4
        "rnbqkbnr/pppppppp/8/8/8/3P4/PPP1PPPP/RNBQKBNR b KQkq - 0 1\n" // d3
        "rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 1\n" // d4
        "rnbqkbnr/pppppppp/8/8/8/4P3/PPPP1PPP/RNBQKBNR b KQkq - 0 1\n" // e3
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n" // e4
        "rnbqkbnr/pppppppp/8/8/8/5P2/PPPPP1PP/RNBQKBNR b KQkq - 0 1\n" // f3
        "rnbqkbnr/pppppppp/8/8/5P2/8/PPPPP1PP/RNBQKBNR b KQkq f3 0 1\n" // f4
        "rnbqkbnr/pppppppp/8/8/8/6P1/PPPPPP1P/RNBQKBNR b KQkq - 0 1\n" // g3
        "rnbqkbnr/pppppppp/8/8/6P1/8/PPPPPP1P/RNBQKBNR b KQkq g3 0 1\n" // g4
        "rnbqkbnr/pppppppp/8/8/8/7P/PPPPPPP1/RNBQKBNR b KQkq - 0 1\n" // h3
        "rnbqkbnr/pppppppp/8/8/7P/8/PPPPPPP1/RNBQKBNR b KQkq h3 0 1\n") // h4
    TEST_WITH_ARGS("1rk3r1/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 b bg c3 0 123", NULL,
        "1r4r1/1p1k2p1/NP4P1/8/2Pp4/8/4p3/2K5 w - - 1 124\n" // Kd7
        "1r1k2r1/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w - - 1 124\n" // Kd8
        "1r3rk1/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w - - 1 124\n" // O-O
        "2kr2r1/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w - - 1 124\n" // O-O-O
        "r1k3r1/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w g - 1 124\n" // Ra8
        "1rkr4/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w b - 1 124\n" // Rd8
        "1rk1r3/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w b - 1 124\n" // Re8
        "1rk2r2/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w b - 1 124\n" // Rf8
        "1rk4r/1p4p1/NP4P1/8/2Pp4/8/4p3/2K5 w b - 1 124\n" // Rh8
        "1rk3r1/6p1/pP4P1/8/2Pp4/8/4p3/2K5 w gb - 0 124\n" // bxa6
        "1rk3r1/1p4p1/NP4P1/8/2P5/3p4/4p3/2K5 w gb - 0 124\n" // d3
        "1rk3r1/1p4p1/NP4P1/8/8/2p5/4p3/2K5 w gb - 0 124\n" // dxc3
        "1rk3r1/1p4p1/NP4P1/8/2Pp4/8/8/2K1b3 w gb - 0 124\n" // e1=B
        "1rk3r1/1p4p1/NP4P1/8/2Pp4/8/8/2K1n3 w gb - 0 124\n" // e1=N
        "1rk3r1/1p4p1/NP4P1/8/2Pp4/8/8/2K1q3 w gb - 0 124\n" // e1=Q+
        "1rk3r1/1p4p1/NP4P1/8/2Pp4/8/8/2K1r3 w gb - 0 124\n") // e1=R+

#test che_make_moves_test_4
    char *actual_fens;

    TEST_WITH_ARGS(INIT_POS, "e4 e5",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\n")
    TEST_WITH_ARGS(INIT_POS, "e4\ne5 f4 ",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2\n")
    TEST_WITH_ARGS(INIT_POS, "e4 e5 f4\n",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\n"
        "rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2\n")
    TEST_WITH_ARGS("k7/8/8/8/8/8/8/K7 w - - 0 99", "Kb2 Ka7",
        "k7/8/8/8/8/8/1K6/8 b - - 1 99\n8/k7/8/8/8/8/1K6/8 w - - 2 100\n")

#test che_make_moves_test_5
    char *actual_fens;

    TEST_WITH_ARGS(
        "qnbrkb1r/p3nNpp/2p5/1p1ppp2/4P3/1B6/PPPP1PPP/QNBRK2R w DHdh - 0 8", "Nxh8",
        "qnbrkb1N/p3n1pp/2p5/1p1ppp2/4P3/1B6/PPPP1PPP/QNBRK2R b HDd - 0 8\n")
    TEST_WITH_ARGS(
        "qnbrkb1N/p3n1pp/2p5/1p1ppp2/4P3/1B6/PPPP1PPP/QNBRK2R b HDd - 0 8", "dxe4",
        "qnbrkb1N/p3n1pp/2p5/1p2pp2/4p3/1B6/PPPP1PPP/QNBRK2R w HDd - 0 9\n")
    TEST_WITH_ARGS(
        "qnbrkb1N/p3n1pp/2p5/1p2pp2/4p3/1B6/PPPP1PPP/QNBRK2R w HDd - 0 9", "Nf7",
        "qnbrkb2/p3nNpp/2p5/1p2pp2/4p3/1B6/PPPP1PPP/QNBRK2R b HDd - 1 9\n")
    TEST_WITH_ARGS(
        "qnbrkb2/p3nNpp/2p5/1p2pp2/4p3/1B6/PPPP1PPP/QNBRK2R b HDd - 1 9", "a5",
        "qnbrkb2/4nNpp/2p5/pp2pp2/4p3/1B6/PPPP1PPP/QNBRK2R w HDd a6 0 10\n")
    TEST_WITH_ARGS(
        "qnbrkb2/4nNpp/2p5/pp2pp2/4p3/1B6/PPPP1PPP/QNBRK2R w HDd a6 0 10", "Nxd8",
        "qnbNkb2/4n1pp/2p5/pp2pp2/4p3/1B6/PPPP1PPP/QNBRK2R b HD - 0 10\n")

#undef TEST_WITH_ARGS

#test che_make_moves_test_6
    char opera_game[] =
            "e4\ne5\nNf3\nd6\nd4\nBg4\ndxe5\nBxf3\nQxf3\ndxe5\nBc4\nNf6\nQb3\n"
            "Qe7\nNc3\nc6\nBg5\nb5\nNxb5\ncxb5\nBxb5+\nNbd7\nO-O-O\nRd8\nRxd7\n"
            "Rxd7\nRd1\nQe6\nBxd7+\nNxd7\nQb8+\nNxb8\nRd8#",
        *fens = che_make_moves(NULL, opera_game);

    int index = strlen(fens) - 1;
    ck_assert(fens[index] == '\n');
    fens[index] = '\0';
    while(fens[--index] != '\n');
    char *result = &fens[index + 1];
    ck_assert(!strcmp(result,
        "1n1Rkb1r/p4ppp/4q3/4p1B1/4P3/8/PPP2PPP/2K5 b k - 1 17"));
    free(fens);

//
// Test case
//
#tcase RC_XXXX_SQ_BINDEX_tests

#test RC_ORIG_SQ_BINDEX_and_RC_DEST_SQ_BINDEX_comprehensive_test
    int orig, dest;

    for(Rawcode rc = 1; rc <= 1792; rc++) {
        rawcode_bit_indexes(rc, &orig, &dest);
        ck_assert(orig == RC_ORIG_SQ_BINDEX[rc]);
        ck_assert(dest == RC_DEST_SQ_BINDEX[rc]); }

//
// Test case
//
#tcase ORIG_DEST_RC_tests

#test ORIG_DEST_RC_test_1
    ck_assert(sizeof(ORIG_DEST_RC) == 64 * 64 * sizeof(Rawcode));

#test ORIG_DEST_RC_test_2
    for(int orig = 0; orig < 64; orig++) {
        for(int dest = 0; dest < 64; dest++) {
            Rawcode value = ORIG_DEST_RC[orig][dest];
            ck_assert(value <= 1792);
        }
    }

#test ORIG_DEST_RC_test_3
    for(int orig = 0; orig < 64; orig++) {
        for(int dest = 0; dest < 64; dest++) {
            Rawcode rc = ORIG_DEST_RC[orig][dest];
            if(!rc) continue;
            int orig_2 = RC_ORIG_SQ_BINDEX[rc],
                dest_2 = RC_DEST_SQ_BINDEX[rc];
            ck_assert(orig == orig_2);
            ck_assert(dest == dest_2);
        }
    }

//
// Test case
//
#tcase SQ_RAY_tests

#test SQ_RAY_test_1
    ck_assert(sizeof(SQ_RAY) == 64 * 8 * 8);

#test SQ_RAY_test_2
    for(int sq = 0; sq < 64; sq++)
        for(enum sq_dir dir = NORTH; dir <= NORTHWEST; ++dir)
            ck_assert(!(SQ_RAY[sq][dir] & ONE << sq));

#test SQ_RAY_test_3
    for(int sq = 0; sq < 64; sq++) {
        Bitboard bb = 0;
        for(enum sq_dir dir = NORTH; dir <= NORTHWEST; ++dir)
            bb |= SQ_RAY[sq][dir];
        ck_assert(bb == (ROOK_SQS[sq] | BISHOP_SQS[sq])); }

//
// Test case
//
#tcase che_build_fen_gt_tests

#test che_build_fen_gt_test_1
    printf("%s: Update!\n", __func__);

    /*
    struct fen_game_tree gt = che_build_fen_gt(NULL, 0);

    ck_assert(!strcmp(INIT_POS, gt.ufen[1]));
    ck_assert(gt.height == 0);
    ck_assert(gt.nc == 1);
    ck_assert(gt.lo[0] == 1);
    ck_assert(!gt.parent[1]);

    che_free_fen_gt(gt);
    */

#test che_build_fen_gt_test_2
    /*
    struct fen_game_tree gt = che_build_fen_gt(NULL, 1);

    ck_assert(!gt.parent[1]);
    for(uint32_t id = 2; id <= gt.nc; id++)
        ck_assert(gt.parent[id] == 1);
    ck_assert(gt.height == 1);
    ck_assert(gt.nc == 21);
    ck_assert(gt.cc[1] == 20);
    for(int i = 0; i < (int) gt.cc[1]; i++)
        ck_assert(gt.children[1][i] == (uint32_t) (i + 2));
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.lo[1] == 2);

    che_free_fen_gt(gt);
    */

#test che_build_fen_gt_test_3
    /*
    struct fen_game_tree gt = che_build_fen_gt(NULL, 2);

    ck_assert(gt.nc == 421);
    uint32_t cc = 0;
    for(uint32_t id = 1; id < gt.lo[2]; id++) cc += gt.cc[id];
    ck_assert(cc == gt.nc - 1);
    uint32_t id;
    ck_assert( x_fen_find_and_count(gt.ufen, gt.nc,
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2",
        &id) == 1 );
    ck_assert(!strcmp("rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b "
        "KQkq e3 0 1", gt.ufen[ gt.parent[id] ]));
    ck_assert(!strcmp(INIT_POS, gt.ufen[ gt.parent[ gt.parent[id] ] ]));

    che_free_fen_gt(gt);
    */

#test che_build_fen_gt_test_4
    /*
    struct fen_game_tree gt = che_build_fen_gt(NULL, 3);

    ck_assert(gt.nc == 9323);
    uint32_t cc = 0;
    for(uint32_t id = 1; id < gt.lo[gt.height]; id++) cc += gt.cc[id];
    ck_assert(cc == gt.nc - 1);
    ck_assert(x_fen_find_and_count(gt.ufen, gt.nc,
        "rnbqkbnr/ppp1pppp/8/3p4/8/2N2N2/PPPPPPPP/R1BQKB1R b KQkq - 1 2",
        NULL) == 2);

    che_free_fen_gt(gt);
    */

#test che_build_fen_gt_test_5
    /*
    struct fen_game_tree gt = che_build_fen_gt(FEN_SUPERPOSITION_1, 1);

    ck_assert(gt.nc == MAX_LEGAL_MOVE_COUNT + 1);

    che_free_fen_gt(gt);
    */

//
// Test case
//
#tcase che_children_tests

#test che_children_test_1
    char *c1 = che_children(INIT_POS),
        *c2 = che_make_moves(INIT_POS, NULL);

    ck_assert(strlen(c1) == strlen(c2));

    int freq_1[128], freq_2[128];
    for(int i = 0; i < 128; i++) freq_1[i] = 0, freq_2[i] = 0;
    for(int i = 0; i < (int) strlen(c1); i++)
        ++freq_1[(int) c1[i]], ++freq_2[(int) c2[i]];

    assert(freq_1[(int) '\n'] == 20);
    for(int i = 0; i < 128; i++) ck_assert(freq_1[i] == freq_2[i]);

    free(c1), free(c2);

#test che_children_test_2
    const char fen[] = "k7/pp6/P7/1P6/8/8/4p3/7K b - - 12 34";
    ck_assert(!che_fen_validator(fen));

    const char expected[] =
        "1k6/pp6/P7/1P6/8/8/4p3/7K w - - 13 35\n"
        "k7/p7/p7/1P6/8/8/4p3/7K w - - 0 35\n"
        "k7/p7/Pp6/1P6/8/8/4p3/7K w - - 0 35\n"
        "k7/pp6/P7/1P6/8/8/8/4q2K w - - 0 35\n"
        "k7/pp6/P7/1P6/8/8/8/4r2K w - - 0 35\n"
        "k7/pp6/P7/1P6/8/8/8/4b2K w - - 0 35\n"
        "k7/pp6/P7/1P6/8/8/8/4n2K w - - 0 35\n";

    char *actual = che_children(fen);
    ck_assert(!strcmp(actual, expected));
    free(actual);
