#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include "../src/move_gen.h"
#include "../src/utils.h"
#include "../src/validation.h"
#include "../src/extra.h"
#include "../src/chester.h"

#suite move_gen_ts

//
// Test case
//
#tcase forsaken_king_tests

#test forsaken_king_returns_true
    // Test FENs moved to
    // #test C_che_fen_str_validator_returns_FEN_*_KING_CAN_BE_CAPTURED
    const char *positions_in_which_king_can_be_captured[] = {
        "Q6k/8/8/8/8/8/8/K7 w - - 0 1",
        NULL };

    for( int i = 0; positions_in_which_king_can_be_captured[ i ]; i++ ) {
        ck_assert( forsaken_king( fen_to_pos(
            positions_in_which_king_can_be_captured[ i ] ) ) );
    }

#test forsaken_king_returns_false
    // Test FENs moved to #test C_che_fen_str_validator_returns_FEN_NO_ERRORS
    const char *positions_in_which_king_cannot_be_captured[] = {
        INIT_POS,
        NULL };

    for( int i = 0; positions_in_which_king_cannot_be_captured[ i ]; i++ ) {
        ck_assert( !forsaken_king( fen_to_pos(
            positions_in_which_king_cannot_be_captured[ i ] ) ) );
    }

//
// Test case
//
#tcase attackers_tests

#define INIT_POS_PTR(fen) \
    ck_assert( !che_fen_validator(fen) ); \
    Pos *p = fen_to_pos(fen);

#define TEST_WITH_ARGS( expected_bb, attacked_sq, num_var_arg, ... ) \
    ck_assert( (expected_bb) == \
        attackers( p->ppa, attacked_sq, num_var_arg, __VA_ARGS__ ) );

#test C_attackers_tested_with_kings
    INIT_POS_PTR( "8/8/8/4k3/8/4K3/8/8 w - - 0 100" )

    TEST_WITH_ARGS( SB.e3, SB.e4, 1, WHITE_KING )
    TEST_WITH_ARGS( SB.e5, SB.e4, 1, BLACK_KING )
    TEST_WITH_ARGS( SB.e3 | SB.e5, SB.e4, 2, WHITE_KING, BLACK_KING )
    TEST_WITH_ARGS( SB.e3 | SB.e5, SB.d4, 2, WHITE_KING, BLACK_KING )
    TEST_WITH_ARGS( 0, SB.c4, 2, WHITE_KING, BLACK_KING )
    TEST_WITH_ARGS( SB.e3, SB.e2, 2, WHITE_KING, BLACK_KING )

    free(p);

#test C_attackers_tested_with_rooks
    INIT_POS_PTR( "4r2k/8/8/8/R4rR1/8/4R3/K3R3 w - - 0 100" )

    TEST_WITH_ARGS( SB.e2 | SB.a4, SB.e4, 1, WHITE_ROOK )
    TEST_WITH_ARGS( SB.f4 | SB.e8, SB.e4, 1, BLACK_ROOK )
    TEST_WITH_ARGS( SB.e2 | SB.a4 | SB.f4 | SB.e8,
        SB.e4, 2, WHITE_ROOK, BLACK_ROOK )
    TEST_WITH_ARGS( SB.e2 | SB.a4, SB.a2, 1, WHITE_ROOK )
    TEST_WITH_ARGS( 0, SB.a2, 1, BLACK_ROOK )
    TEST_WITH_ARGS( 0, SB.h3, 2, WHITE_ROOK, BLACK_ROOK )

    free(p);

#test C_attackers_tested_with_queens_1
    INIT_POS_PTR( "3Q4/7k/3q4/8/4q2q/8/3Q4/K2Q4 b - - 0 100" )

    TEST_WITH_ARGS( SB.d2, SB.d4, 1, WHITE_QUEEN )
    TEST_WITH_ARGS( SB.e4 | SB.d6, SB.d4, 1, BLACK_QUEEN )
    TEST_WITH_ARGS( SB.d2 | SB.e4 | SB.d6, SB.d4, 2, WHITE_QUEEN, BLACK_QUEEN )
    TEST_WITH_ARGS( SB.d2 | SB.e4 | SB.d6, SB.d4, 12,
        WHITE_KING, WHITE_QUEEN, WHITE_ROOK,
        WHITE_BISHOP, WHITE_KNIGHT, WHITE_PAWN,
        BLACK_KING, BLACK_QUEEN, BLACK_ROOK,
        BLACK_BISHOP, BLACK_KNIGHT, BLACK_PAWN )
    TEST_WITH_ARGS( 0, SB.a7, 2, WHITE_QUEEN, BLACK_QUEEN )
    TEST_WITH_ARGS( SB.d8, SB.a8, 1, WHITE_QUEEN )
    TEST_WITH_ARGS( SB.e4, SB.a8, 1, BLACK_QUEEN )

    free(p);

#test C_attackers_tested_with_queens_2
    INIT_POS_PTR( "q3Q3/7Q/6q1/k7/1qQ3Qq/3qQ3/2Q1q1q1/2K4Q w - - 10 50" )

    TEST_WITH_ARGS( 0, SB.e4, 6, WHITE_KING, BLACK_KING, WHITE_ROOK,
        BLACK_ROOK, WHITE_BISHOP, BLACK_BISHOP)
    TEST_WITH_ARGS( SB.e3 | SB.c4 | SB.g4 | SB.e8, SB.e4, 1, WHITE_QUEEN )
    TEST_WITH_ARGS( SB.g2 | SB.d3 | SB.g6 | SB.a8, SB.e4, 1, BLACK_QUEEN )
    TEST_WITH_ARGS(
        SB.e3 | SB.c4 | SB.g4 | SB.e8 | SB.g2 | SB.d3 | SB.g6 | SB.a8,
        SB.e4, 2, WHITE_QUEEN, BLACK_QUEEN )
    TEST_WITH_ARGS( 0, SB.a1, 2, WHITE_QUEEN, BLACK_QUEEN )

    free(p);

#test C_attackers_tested_with_bishops
    INIT_POS_PTR( "b3B3/7B/6b1/k7/1bB3Bb/3bB3/2B1b1b1/2K4B w - - 10 50" )

    TEST_WITH_ARGS( SB.c2 | SB.c4, SB.d3, 1, WHITE_BISHOP )
    TEST_WITH_ARGS( SB.e2 | SB.g6, SB.d3, 1, BLACK_BISHOP )
    TEST_WITH_ARGS( SB.c2 | SB.e2 | SB.c4 | SB.g6,
        SB.d3, 2, WHITE_BISHOP, BLACK_BISHOP )
    TEST_WITH_ARGS( SB.e3 | SB.b4, SB.d2, 2, WHITE_BISHOP, BLACK_BISHOP )
    TEST_WITH_ARGS( 0, SB.e5, 2, WHITE_BISHOP, BLACK_BISHOP )

    free(p);

#test C_attackers_tested_with_knights
    INIT_POS_PTR( "7k/8/3n1N2/2N1N1n1/3nnn2/2n1N1N1/3N1n2/K7 b - - 20 60" )

    TEST_WITH_ARGS( SB.d2 | SB.g3 | SB.c5 | SB.f6, SB.e4, 1, WHITE_KNIGHT )
    TEST_WITH_ARGS( SB.f2 | SB.c3 | SB.g5 | SB.d6, SB.e4, 1, BLACK_KNIGHT )
    TEST_WITH_ARGS(
        SB.d2 | SB.g3 | SB.c5 | SB.f6 | SB.f2 | SB.c3 | SB.g5 | SB.d6,
        SB.e4, 2, WHITE_KNIGHT, BLACK_KNIGHT )
    TEST_WITH_ARGS( 0, SB.b2, 2, WHITE_KNIGHT, BLACK_KNIGHT )
    TEST_WITH_ARGS( SB.g3, SB.h1, 1, WHITE_KNIGHT )
    TEST_WITH_ARGS( SB.f2, SB.h1, 1, BLACK_KNIGHT )
    TEST_WITH_ARGS( SB.f2 | SB.g3, SB.h1, 2, WHITE_KNIGHT, BLACK_KNIGHT )

    free(p);

#test C_attackers_tested_with_pawns
    INIT_POS_PTR( "7k/8/8/ppp5/8/PPP5/8/K7 w - - 0 100" )

    TEST_WITH_ARGS( SB.b3 | SB.b5, SB.a4, 2, WHITE_PAWN, BLACK_PAWN )
    TEST_WITH_ARGS( SB.a3 | SB.c3 | SB.a5 | SB.c5,
        SB.b4, 2, WHITE_PAWN, BLACK_PAWN )
    TEST_WITH_ARGS( SB.b3 | SB.b5, SB.c4, 2, WHITE_PAWN, BLACK_PAWN )
    TEST_WITH_ARGS( SB.c3 | SB.c5, SB.d4, 2, WHITE_PAWN, BLACK_PAWN )
    TEST_WITH_ARGS( 0, SB.e4, 2, WHITE_PAWN, BLACK_PAWN )
    TEST_WITH_ARGS( SB.a3 | SB.c3, SB.b4, 1, WHITE_PAWN )
    TEST_WITH_ARGS( SB.a5 | SB.c5, SB.b4, 1, BLACK_PAWN )

    free(p);

#test C_attackers_tested_with_multiple_types_of_chessmen_1
    INIT_POS_PTR( "q3R3/5P1P/3n1N2/8/1r3k2/3B4/1p2Q1b1/2K5 w - - 0 40" )

    TEST_WITH_ARGS( 0, SB.e4, 1, WHITE_KING )
    TEST_WITH_ARGS( SB.e2, SB.e4, 1, WHITE_QUEEN )
    TEST_WITH_ARGS( SB.e8, SB.e4, 1, WHITE_ROOK )
    TEST_WITH_ARGS( SB.d3, SB.e4, 1, WHITE_BISHOP )
    TEST_WITH_ARGS( SB.f6, SB.e4, 1, WHITE_KNIGHT )
    TEST_WITH_ARGS( 0, SB.e4, 1, WHITE_PAWN )

    TEST_WITH_ARGS( SB.f4, SB.e4, 1, BLACK_KING )
    TEST_WITH_ARGS( SB.a8, SB.e4, 1, BLACK_QUEEN )
    TEST_WITH_ARGS( SB.b4, SB.e4, 1, BLACK_ROOK )
    TEST_WITH_ARGS( SB.g2, SB.e4, 1, BLACK_BISHOP )
    TEST_WITH_ARGS( SB.d6, SB.e4, 1, BLACK_KNIGHT )
    TEST_WITH_ARGS( 0, SB.e4, 1, BLACK_PAWN )

    ck_assert( ( SB.e2 | SB.e8 | SB.d3 | SB.f6 ) ==
        white_attackers( p->ppa, SB.e4 ) );
    ck_assert( ( SB.f4 | SB.a8 | SB.b4 | SB.g2 | SB.d6 ) ==
        black_attackers( p->ppa, SB.e4 ) );

    TEST_WITH_ARGS( SB.b2, SB.c1, 1, BLACK_PAWN )
    TEST_WITH_ARGS( 0, SB.b1, 1, BLACK_PAWN )
    TEST_WITH_ARGS( SB.f7 | SB.h7, SB.g8, 1, WHITE_PAWN )
    TEST_WITH_ARGS( 0, SB.f8, 1, WHITE_PAWN )

    free(p);

#test C_attackers_tested_with_multiple_types_of_chessmen_2
    INIT_POS_PTR( "rk5b/8/8/1b6/8/8/BN6/K1Q5 w - - 10 50" )

    ck_assert( ( SB.c1 | SB.a2 | SB.b2 ) ==
        white_attackers( p->ppa, SB.c4 ) );
    ck_assert( SB.b5 == black_attackers( p->ppa, SB.c4 ) );

    TEST_WITH_ARGS( SB.c1 | SB.a2 | SB.b2 | SB.b5,
        SB.c4, 12,
        WHITE_KING, WHITE_QUEEN, WHITE_ROOK,
        WHITE_BISHOP, WHITE_KNIGHT, WHITE_PAWN,
        BLACK_KING, BLACK_QUEEN, BLACK_ROOK,
        BLACK_BISHOP, BLACK_KNIGHT, BLACK_PAWN )
    TEST_WITH_ARGS( SB.a1 | SB.a8,
        SB.a2, 12,
        WHITE_KING, WHITE_QUEEN, WHITE_ROOK,
        WHITE_BISHOP, WHITE_KNIGHT, WHITE_PAWN,
        BLACK_KING, BLACK_QUEEN, BLACK_ROOK,
        BLACK_BISHOP, BLACK_KNIGHT, BLACK_PAWN )

    free(p);

#test C_attackers_tested_with_multiple_types_of_chessmen_3
    INIT_POS_PTR( "4k3/8/8/8/8/4p3/8/4K2R w K - 10 50" )

    TEST_WITH_ARGS( SB.e1, SB.f1, 1, WHITE_KING )
    TEST_WITH_ARGS( 0, SB.g1, 1, WHITE_KING )
    TEST_WITH_ARGS( SB.e1 | SB.e3, SB.d2, 2, WHITE_KING, BLACK_PAWN )
    TEST_WITH_ARGS( SB.e1, SB.e2, 2, WHITE_KING, BLACK_PAWN )
    TEST_WITH_ARGS( SB.e1 | SB.e3, SB.f2, 2, WHITE_KING, BLACK_PAWN )
    TEST_WITH_ARGS( SB.h1, SB.g1, 1, WHITE_ROOK )
    TEST_WITH_ARGS( SB.h1, SB.h8, 1, WHITE_ROOK )

    free(p);

#undef TEST_WITH_ARGS
#undef INIT_POS_PTR

//
// Test case
//
#tcase castle_tests

#define TEST_WITH_ARGS( fen, side, expected_rawcode, expected_castle_error ) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    ck_assert( castle(p, side) == expected_rawcode ); \
    ck_assert( castle_error == expected_castle_error ); \
    free(p);

#test castle_returns_zero_and_sets_castle_error_to_CASTLE_NO_CASTLING_RIGHT
    Pos *p;

    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/R3K2R w Qkq - 10 50", "kingside",
        0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/R3K2R w Kkq - 10 50", "queenside",
        0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/R3K2R b KQq - 10 50", "h-side",
        0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/R3K2R b KQk - 10 50", "a-side",
        0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "8/8/3k4/8/3K4/8/8/8 w - - 0 100", "kingside",
        0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "8/8/3k4/8/3K4/8/8/8 b - - 0 100", "queenside",
        0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "qrkbbrnn/pppppppp/8/8/8/8/PPPPPPPP/QRKBBRNN w Bbf - 0 1",
        "kingside", 0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "qrkbbrnn/pppppppp/8/8/8/8/PPPPPPPP/QRKBBRNN w Fbf - 0 1",
        "queenside", 0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "qrkbbrnn/pppppppp/8/8/8/8/PPPPPPPP/QRKBBRNN b BFb - 0 1",
        "kingside", 0, CASTLE_NO_CASTLING_RIGHT )
    TEST_WITH_ARGS( "qrkbbrnn/pppppppp/8/8/8/8/PPPPPPPP/QRKBBRNN b BFf - 0 1",
        "queenside", 0, CASTLE_NO_CASTLING_RIGHT )

#test castle_returns_zero_and_sets_castle_error_to_CASTLE_KING_IN_CHECK
    Pos *p;

    TEST_WITH_ARGS( "4r1kr/8/8/8/8/8/6R1/6K1 b he - 5 50", "kingside",
        0, CASTLE_KING_IN_CHECK )
    TEST_WITH_ARGS( "4r1kr/8/8/8/8/8/6R1/6K1 b he - 5 50", "queenside",
        0, CASTLE_KING_IN_CHECK )
    TEST_WITH_ARGS( "2k5/8/8/8/8/8/PPPpPPPP/QRKBBRNN w BF - 0 123",
        "kingside", 0, CASTLE_KING_IN_CHECK )
    TEST_WITH_ARGS( "2k5/8/8/8/8/8/PPPpPPPP/QRKBBRNN w BF - 0 123",
        "queenside", 0, CASTLE_KING_IN_CHECK )
    TEST_WITH_ARGS( "2k5/8/q7/8/8/8/8/4RK1R w EH - 0 50",
        "kingside", 0, CASTLE_KING_IN_CHECK )
    TEST_WITH_ARGS( "2k5/8/8/8/8/6n1/8/4RK1R w EH - 0 50",
        "queenside", 0, CASTLE_KING_IN_CHECK )

#test castle_returns_zero_and_sets_castle_error_to_CASTLE_KINGS_PATH_BLOCKED
    Pos *p;

    TEST_WITH_ARGS( "8/8/8/8/8/4k3/8/4K1NR w K - 0 100", "kingside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "8/8/8/8/8/4k3/8/4KB1R w K - 0 100", "h-side",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( INIT_POS, "kingside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( INIT_POS, "queenside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r4Nk1/8/8/8/8/8/8/RRK5 b a - 10 100", "a-side",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r4rk1/8/8/8/8/8/8/RRK5 b a - 10 100", "queenside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r3B1k1/8/8/8/8/8/8/RRK5 b a - 10 100", "queenside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r2q2k1/8/8/8/8/8/8/RRK5 b a - 10 100", "queenside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r1N3k1/8/8/8/8/8/8/RRK5 b a - 10 100", "queenside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r1b3k1/8/8/8/8/8/8/RRK5 b a - 10 100", "queenside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "4kr2/8/8/8/8/8/8/4KR1R w K - 5 100", "kingside",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "4kr2/8/8/8/8/8/8/4K1RR w K - 5 100", "h-side",
        0, CASTLE_KINGS_PATH_BLOCKED )
    TEST_WITH_ARGS( "4k3/8/8/8/b7/8/8/3RKRr1 w DF - 3 50", "kingside",
        0, CASTLE_KINGS_PATH_BLOCKED )

#test castle_returns_zero_and_sets_castle_error_to_CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK
    Pos *p;

    TEST_WITH_ARGS( "r5k1/8/8/8/8/8/5R2/5K2 b a - 0 123", "a-side",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "r5k1/8/2B5/8/8/8/8/5K2 b a - 0 123", "a-side",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "r5k1/2P5/8/8/8/8/8/5K2 b a - 0 123", "queenside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "4k3/8/8/8/8/3n1q2/8/1K5R w K - 0 75", "kingside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/1p6/1K5R w K - 0 75", "kingside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/5n2/1K5R w K - 0 75", "kingside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "4k3/8/8/8/4q3/3P4/8/1K5R w K - 0 75", "kingside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "4k3/8/8/8/8/7b/8/1K5R w K - 0 75", "kingside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "4k3/8/8/8/b7/8/8/3RKRr1 w DF - 3 50", "queenside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "3rk3/8/8/8/8/8/8/3RK3 w D - 4 75", "queenside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )
    TEST_WITH_ARGS( "1r3k2/3ppppp/5N2/8/8/8/8/5K2 b b - 0 100", "queenside",
        0, CASTLE_KINGS_EXCLUSIVE_PATH_IN_CHECK )

#test castle_returns_zero_and_sets_castle_error_to_CASTLE_ROOKS_PATH_BLOCKED
    Pos *p;

    TEST_WITH_ARGS( "rrk5/8/8/8/8/8/8/2K5 b a - 0 43", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/RN2K3 w Q - 0 51", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r1kr4/8/8/8/8/8/8/2K5 b a - 1 10", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "6k1/8/8/8/8/8/8/5bKR w H - 2 222", "kingside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "8/8/8/8/8/8/8/RK1k4 w A - 3 99", "a-side",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/RK1Q4 w A - 3 99", "a-side",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "rNk5/8/8/8/8/8/8/4K3 b a - 4 75", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "r1kB4/8/8/8/8/8/8/4K3 b a - 4 75", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "rn2k3/8/8/8/8/8/8/R3K3 b Qq - 0 1", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )
    TEST_WITH_ARGS( "rn2k3/8/8/8/8/8/8/Rn2K3 w Qq - 0 1", "queenside",
        0, CASTLE_ROOKS_PATH_BLOCKED )

#test castle_returns_217_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/3b4/8/8/8/1K5R w H - 1 75", "kingside",
        rawcode("b1h1"), CASTLE_OK )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/7p/1K5R w K - 0 75", "kingside",
        rawcode("b1h1"), CASTLE_OK )
    TEST_WITH_ARGS( "4k3/8/8/8/3b4/8/8/1K5R w H - 1 75", "kingside",
        rawcode("b1h1"), CASTLE_OK )

#test castle_returns_633_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "rrk5/8/8/8/8/8/8/2K5 b b - 0 43", "queenside",
        rawcode("c8b8"), CASTLE_OK )

#test castle_returns_904_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "4kr2/8/8/8/8/8/8/3RK2R w HD - 0 1", "queenside",
        rawcode("e1d1"), CASTLE_OK )

#test castle_returns_920_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "8/8/8/8/8/4k3/8/4K2R w K - 0 50", "kingside",
        rawcode("e1h1"), CASTLE_OK )
    TEST_WITH_ARGS( "b3k3/6Q1/8/8/8/3NN3/8/4K2R w H - 10 80", "h-side",
        rawcode("e1h1"), CASTLE_OK )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/4K2R w K - 0 1", "kingside",
        rawcode("e1h1"), CASTLE_OK )

#test castle_returns_1135_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "4kr2/8/8/8/8/8/8/3RK2R b f - 0 1", "kingside",
        rawcode("e8f8"), CASTLE_OK )

#test castle_returns_1138_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "b1n1k1r1/p1p2ppp/1q4n1/2b1p3/2P5/1P6/P2P1PPP/BR1QK1RN "
        "b GBg - 2 11", "kingside", rawcode("e8g8"), CASTLE_OK )
    TEST_WITH_ARGS( "brnqk1r1/pppp1ppp/6n1/2b1p3/4P3/1P4N1/P1PPNPPP/BR1QKBR1 "
        "b BGbg - 4 4", "kingside", rawcode("e8g8"), CASTLE_OK )

#test castle_returns_1380_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "4rk1r/8/8/8/8/8/6R1/6K1 b he - 5 50", "h-side",
        rawcode("f8h8"), CASTLE_OK )

#test castle_returns_1402_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "r5kr/8/8/8/8/8/8/R5KR w AHah - 5 50", "kingside",
        rawcode("g1h1"), CASTLE_OK )

#test castle_returns_1576_and_sets_castle_error_to_CASTLE_OK
    Pos *p;

    TEST_WITH_ARGS( "r5k1/P7/8/8/8/8/8/5K2 b a - 0 123", "queenside",
        rawcode("g8a8"), CASTLE_OK )
    TEST_WITH_ARGS( "r5kr/8/8/8/8/8/8/R5KR b AHah - 5 50", "queenside",
        rawcode("g8a8"), CASTLE_OK )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase rawcodes_tests

#define TEST_WITH_ARGS( fen_arg, expected ) \
    ck_assert( !che_fen_validator(fen_arg) ); \
    Pos *p = fen_to_pos(fen_arg); \
    Rawcode *codes = rawcodes(p); \
    ck_assert( expected[0] == codes[0] ); \
    for( int i = 1; i <= codes[0]; i++ ) \
        ck_assert( codes[i] == expected[i] ); \
    free(codes); \
    free(p);

#test C_rawcodes_tested_with_lone_kings
    Rawcode expected[3 + 1];

    expected[ 0] = 3,
    expected[ 1] = rawcode( "h8g7" ),
    expected[ 2] = rawcode( "h8g8" ),
    expected[ 3] = rawcode( "h8h7" );

    TEST_WITH_ARGS( "7k/8/8/8/4K3/8/8/8 b - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_rooks_1
    Rawcode expected[23 + 1];

    expected[ 0] = 23,
    expected[ 1] = rawcode( "a1a2" ),
    expected[ 2] = rawcode( "a1a3" ),
    expected[ 3] = rawcode( "a1a4" ),
    expected[ 4] = rawcode( "a1a5" ),
    expected[ 5] = rawcode( "a1a6" ),
    expected[ 6] = rawcode( "a1a7" ),
    expected[ 7] = rawcode( "a1a8" ),
    expected[ 8] = rawcode( "a1b1" ),
    expected[ 9] = rawcode( "a1c1" ),
    expected[10] = rawcode( "a1d1" ),
    expected[11] = rawcode( "e1a1" ),
    expected[12] = rawcode( "e1d1" ),
    expected[13] = rawcode( "e1f1" ),
    expected[14] = rawcode( "e1h1" ),
    expected[15] = rawcode( "h1f1" ),
    expected[16] = rawcode( "h1g1" ),
    expected[17] = rawcode( "h1h2" ),
    expected[18] = rawcode( "h1h3" ),
    expected[19] = rawcode( "h1h4" ),
    expected[20] = rawcode( "h1h5" ),
    expected[21] = rawcode( "h1h6" ),
    expected[22] = rawcode( "h1h7" ),
    expected[23] = rawcode( "h1h8" );

    TEST_WITH_ARGS( "8/8/8/8/8/4k3/8/R3K2R w KQ - 1 100", expected )

#test C_rawcodes_tested_with_kings_and_rooks_2
    Rawcode expected[9 + 1];

    expected[ 0] = 9,
    expected[ 1] = rawcode( "e6d6" ),
    expected[ 2] = rawcode( "e6e1" ),
    expected[ 3] = rawcode( "e6e2" ),
    expected[ 4] = rawcode( "e6e3" ),
    expected[ 5] = rawcode( "e6e4" ),
    expected[ 6] = rawcode( "e6e5" ),
    expected[ 7] = rawcode( "e6f6" ),
    expected[ 8] = rawcode( "e7d6" ),
    expected[ 9] = rawcode( "e7e8" );

    TEST_WITH_ARGS( "8/4k3/3RrR2/6K1/8/8/8/8 b - - 2 34", expected )

#test C_rawcodes_tested_with_kings_and_rooks_3
    Rawcode expected[2 + 1];

    expected[ 0] = 2,
    expected[ 1] = rawcode( "h3h2" ),
    expected[ 2] = rawcode( "h3h4" );

    TEST_WITH_ARGS( "8/8/8/8/7r/7R/r7/5k1K w - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_bishops_1
    Rawcode expected[13 + 1];

    expected[ 0] = 13,
    expected[ 1] = rawcode( "d4a1" ),
    expected[ 2] = rawcode( "d4a7" ),
    expected[ 3] = rawcode( "d4b2" ),
    expected[ 4] = rawcode( "d4b6" ),
    expected[ 5] = rawcode( "d4c3" ),
    expected[ 6] = rawcode( "d4c5" ),
    expected[ 7] = rawcode( "d4e3" ),
    expected[ 8] = rawcode( "d4e5" ),
    expected[ 9] = rawcode( "d4f2" ),
    expected[10] = rawcode( "d4f6" ),
    expected[11] = rawcode( "d4g1" ),
    expected[12] = rawcode( "d4g7" ),
    expected[13] = rawcode( "d4h8" );

    TEST_WITH_ARGS( "8/8/8/8/3B4/6b1/8/5k1K w - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_bishops_2
    Rawcode expected[2 + 1];

    expected[ 0] = 2,
    expected[ 1] = rawcode( "b7c6" ),
    expected[ 2] = rawcode( "b7d5" );

    TEST_WITH_ARGS( "k7/1b6/8/3B4/4K3/8/7B/6B1 b - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_queens_1
    Rawcode expected[27 + 1];

    expected[ 0] = 27,
    expected[ 1] = rawcode( "d4a1" ),
    expected[ 2] = rawcode( "d4a4" ),
    expected[ 3] = rawcode( "d4a7" ),
    expected[ 4] = rawcode( "d4b2" ),
    expected[ 5] = rawcode( "d4b4" ),
    expected[ 6] = rawcode( "d4b6" ),
    expected[ 7] = rawcode( "d4c3" ),
    expected[ 8] = rawcode( "d4c4" ),
    expected[ 9] = rawcode( "d4c5" ),
    expected[10] = rawcode( "d4d1" ),
    expected[11] = rawcode( "d4d2" ),
    expected[12] = rawcode( "d4d3" ),
    expected[13] = rawcode( "d4d5" ),
    expected[14] = rawcode( "d4d6" ),
    expected[15] = rawcode( "d4d7" ),
    expected[16] = rawcode( "d4d8" ),
    expected[17] = rawcode( "d4e3" ),
    expected[18] = rawcode( "d4e4" ),
    expected[19] = rawcode( "d4e5" ),
    expected[20] = rawcode( "d4f2" ),
    expected[21] = rawcode( "d4f4" ),
    expected[22] = rawcode( "d4f6" ),
    expected[23] = rawcode( "d4g1" ),
    expected[24] = rawcode( "d4g4" ),
    expected[25] = rawcode( "d4g7" ),
    expected[26] = rawcode( "d4h4" ),
    expected[27] = rawcode( "d4h8" );

    TEST_WITH_ARGS( "k1K5/4q3/8/8/3Q4/8/8/8 w - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_queens_2
    Rawcode expected[7 + 1];

    expected[ 0] = 7,
    expected[ 1] = rawcode( "h1g1" ),
    expected[ 2] = rawcode( "h1g2" ),
    expected[ 3] = rawcode( "h1h2" ),
    expected[ 4] = rawcode( "h1h3" ),
    expected[ 5] = rawcode( "h1h4" ),
    expected[ 6] = rawcode( "h1h5" ),
    expected[ 7] = rawcode( "h6g6" );

    TEST_WITH_ARGS( "7K/8/7k/Q7/8/6p1/6Q1/6Qq b - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_knights_1
    Rawcode expected[3 + 1];

    expected[ 0] = 3,
    expected[ 1] = rawcode( "b1a3" ),
    expected[ 2] = rawcode( "b1c3" ),
    expected[ 3] = rawcode( "b1d2" );

    TEST_WITH_ARGS( "8/8/8/8/8/1k6/8/KN6 w - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_knights_2
    Rawcode expected[6 + 1];

    expected[ 0] = 6,
    expected[ 1] = rawcode( "a1a2" ),
    expected[ 2] = rawcode( "e2c3" ),
    expected[ 3] = rawcode( "e2d4" ),
    expected[ 4] = rawcode( "e2f4" ),
    expected[ 5] = rawcode( "e2g1" ),
    expected[ 6] = rawcode( "e2g3" );

    TEST_WITH_ARGS( "1R5K/8/8/8/8/8/4n3/k1n3R1 b - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_pawns_1
    Rawcode expected[2 + 1];

    expected[ 0] = 2,
    expected[ 1] = rawcode( "h2h3" ),
    expected[ 2] = rawcode( "h2h4" );

    TEST_WITH_ARGS( "8/8/8/8/8/8/7P/5k1K w - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_pawns_2
    Rawcode expected[2 + 1];

    expected[ 0] = 2,
    expected[ 1] = rawcode( "e7e5" ),
    expected[ 2] = rawcode( "e7e6" );

    TEST_WITH_ARGS( "1k6/1P2p3/1K6/8/8/8/8/8 b - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_pawns_3
    Rawcode expected[3 + 1];

    expected[ 0] = 3,
    expected[ 1] = rawcode( "e1f1" ),
    expected[ 2] = rawcode( "e2d3" );
    expected[ 3] = rawcode( "e2f3" );

    TEST_WITH_ARGS( "8/8/8/8/8/3qkp2/4P3/4K3 w - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_pawns_4
    Rawcode expected[3 + 1];

    expected[ 0] = 3,
    expected[ 1] = rawcode( "d2c1" ),
    expected[ 2] = rawcode( "d2d1" );
    expected[ 3] = rawcode( "d2e1" );

    TEST_WITH_ARGS( "8/8/8/8/1Q6/3k4/1K1p4/2B1R3 b - - 0 1", expected )

#test C_rawcodes_tested_with_kings_and_pawns_5
    Rawcode expected[5 + 1];

    expected[ 0] = 5,
    expected[ 1] = rawcode( "c5c6" );
    expected[ 2] = rawcode( "c5d6" );
    expected[ 3] = rawcode( "e5d6" );
    expected[ 4] = rawcode( "e5e6" );
    expected[ 5] = rawcode( "h1g1" );

    // Two white pawns can do an en passant capture
    TEST_WITH_ARGS( "8/8/8/2PpP3/8/7k/8/7K w - d6 0 75", expected )

#test C_rawcodes_tested_with_kings_and_pawns_6
    Rawcode expected[2 + 1];

    expected[ 0] = 2,
    expected[ 1] = rawcode( "b4a3" );
    expected[ 2] = rawcode( "h8g8" );

    // Black pawn can do en passant capture
    TEST_WITH_ARGS( "7k/8/7K/8/Pp6/1P6/8/8 b - a3 0 123", expected )

#test C_rawcodes_tested_with_stalemate_positions_1
    Rawcode expected[0 + 1];

    expected[0] = 0;

    TEST_WITH_ARGS( "8/8/3p4/3R4/4k3/3R4/4p2B/4K3 b - - 0 99", expected )

#test C_rawcodes_tested_with_stalemate_positions_2
    Rawcode expected[0 + 1];

    expected[0] = 0;

    TEST_WITH_ARGS( "8/8/8/8/8/4k3/4p3/4K3 w - - 0 99", expected )

#test C_rawcodes_tested_with_game_of_the_century_after_11_Bg5
    Rawcode expected[37 + 1];

    expected[ 0] = 37,
    expected[ 1] = rawcode( "a7a5" ),
    expected[ 2] = rawcode( "a7a6" ),
    expected[ 3] = rawcode( "a8b8" ),
    expected[ 4] = rawcode( "a8c8" ),
    expected[ 5] = rawcode( "b6a4" ),
    expected[ 6] = rawcode( "b6c4" ),
    expected[ 7] = rawcode( "b6c8" ),
    expected[ 8] = rawcode( "b6d5" ),
    expected[ 9] = rawcode( "b6d7" ),
    expected[10] = rawcode( "d8b8" ),
    expected[11] = rawcode( "d8c7" ),
    expected[12] = rawcode( "d8c8" ),
    expected[13] = rawcode( "d8d4" ),
    expected[14] = rawcode( "d8d5" ),
    expected[15] = rawcode( "d8d6" ),
    expected[16] = rawcode( "d8d7" ),
    expected[17] = rawcode( "d8e8" ),
    expected[18] = rawcode( "e7e5" ),
    expected[19] = rawcode( "e7e6" ),
    expected[20] = rawcode( "f6d5" ),
    expected[21] = rawcode( "f6d7" ),
    expected[22] = rawcode( "f6e4" ),
    expected[23] = rawcode( "f6e8" ),
    expected[24] = rawcode( "f6h5" ),
    expected[25] = rawcode( "f8e8" ),
    expected[26] = rawcode( "g4c8" ),
    expected[27] = rawcode( "g4d7" ),
    expected[28] = rawcode( "g4e6" ),
    expected[29] = rawcode( "g4f3" ),
    expected[30] = rawcode( "g4f5" ),
    expected[31] = rawcode( "g4h3" ),
    expected[32] = rawcode( "g4h5" ),
    expected[33] = rawcode( "g7h6" ),
    expected[34] = rawcode( "g7h8" ),
    expected[35] = rawcode( "g8h8" ),
    expected[36] = rawcode( "h7h5" ),
    expected[37] = rawcode( "h7h6" );

    TEST_WITH_ARGS( FEN_GAME_OF_THE_CENTURY, expected )

#test C_rawcodes_tested_with_marshall_attack_position
    Rawcode expected[26 + 1];

    expected[ 0] = 26,
    expected[ 1] = rawcode( "a2a3" ),
    expected[ 2] = rawcode( "a2a4" ),
    expected[ 3] = rawcode( "b1a3" ),
    expected[ 4] = rawcode( "b3a4" ),
    expected[ 5] = rawcode( "b3c2" ),
    expected[ 6] = rawcode( "b3c4" ),
    expected[ 7] = rawcode( "b3d5" ),
    expected[ 8] = rawcode( "c3c4" ),
    expected[ 9] = rawcode( "d1c2" ),
    expected[10] = rawcode( "d1e2" ),
    expected[11] = rawcode( "d2d3" ),
    expected[12] = rawcode( "d2d4" ),
    expected[13] = rawcode( "e1e2" ),
    expected[14] = rawcode( "e1e3" ),
    expected[15] = rawcode( "e1f1" ),
    expected[16] = rawcode( "e4d5" ),
    expected[17] = rawcode( "f3d4" ),
    expected[18] = rawcode( "f3e5" ),
    expected[19] = rawcode( "f3g5" ),
    expected[20] = rawcode( "f3h4" ),
    expected[21] = rawcode( "g1f1" ),
    expected[22] = rawcode( "g1h1" ),
    expected[23] = rawcode( "g2g3" ),
    expected[24] = rawcode( "g2g4" ),
    expected[25] = rawcode( "h2h3" ),
    expected[26] = rawcode( "h2h4" );

    TEST_WITH_ARGS(
        "r1bq1rk1/2p1bppp/p1n2n2/1p1pp3/4P3/1BP2N2/PP1P1PPP/RNBQR1K1 w - - 0 9",
        expected )

#test C_rawcodes_tested_with_made_up_position_1
    Rawcode expected[21 + 1];

    expected[ 0] = 21,
    expected[ 1] = rawcode( "b1a1" ),
    expected[ 2] = rawcode( "b1b2" ),
    expected[ 3] = rawcode( "b1b3" ),
    expected[ 4] = rawcode( "b1b4" ),
    expected[ 5] = rawcode( "b1b5" ),
    expected[ 6] = rawcode( "b1b6" ),
    expected[ 7] = rawcode( "b7b8" ),
    expected[ 8] = rawcode( "b7c8" ),
    expected[ 9] = rawcode( "c1b1" ),
    expected[10] = rawcode( "c1b2" ),
    expected[11] = rawcode( "c1d1" ),
    expected[12] = rawcode( "c1d2" ),
    expected[13] = rawcode( "c1g1" ),
    expected[14] = rawcode( "g1d1" ),
    expected[15] = rawcode( "g1e1" ),
    expected[16] = rawcode( "g1f1" ),
    expected[17] = rawcode( "g1h1" ),
    expected[18] = rawcode( "g2g3" ),
    expected[19] = rawcode( "g2g4" ),
    expected[20] = rawcode( "h5g6" ),
    expected[21] = rawcode( "h5h6" );

    TEST_WITH_ARGS( "2q1k3/1P6/8/6pP/8/8/2B3P1/1RK3R1 w BG g6 0 123", expected )

#test C_rawcodes_tested_with_made_up_position_2
    Rawcode expected[19 + 1];

    expected[ 0] = 19,
    expected[ 1] = rawcode( "a7a5" ),
    expected[ 2] = rawcode( "a7a6" ),
    expected[ 3] = rawcode( "a8b8" ),
    expected[ 4] = rawcode( "a8c8" ),
    expected[ 5] = rawcode( "a8d8" ),
    expected[ 6] = rawcode( "d4c3" ),
    expected[ 7] = rawcode( "d4d3" ),
    expected[ 8] = rawcode( "d4e3" ),
    expected[ 9] = rawcode( "e8a8" ),
    expected[10] = rawcode( "e8d7" ),
    expected[11] = rawcode( "e8d8" ),
    expected[12] = rawcode( "e8e7" ),
    expected[13] = rawcode( "e8f7" ),
    expected[14] = rawcode( "e8f8" ),
    expected[15] = rawcode( "e8h8" ),
    expected[16] = rawcode( "h7h5" ),
    expected[17] = rawcode( "h7h6" ),
    expected[18] = rawcode( "h8f8" ),
    expected[19] = rawcode( "h8g8" );

    TEST_WITH_ARGS( "r3k2r/p6p/8/8/3pP3/2P5/8/7K b kq e3 0 123", expected )

#test C_rawcodes_tested_with_made_up_position_3
    Rawcode expected[12 + 1];

    expected[ 0] = 12,
    expected[ 1] = rawcode( "a1a2" ),
    expected[ 2] = rawcode( "a1b1" ),
    expected[ 3] = rawcode( "a1c1" ),
    expected[ 4] = rawcode( "a1d1" ),
    expected[ 5] = rawcode( "e1a1" ),
    expected[ 6] = rawcode( "e1d1" ),
    expected[ 7] = rawcode( "e1d2" ),
    expected[ 8] = rawcode( "e1e2" ),
    expected[ 9] = rawcode( "e1f1" ),
    expected[10] = rawcode( "e1f2" ),
    expected[11] = rawcode( "g7g8" ),
    expected[12] = rawcode( "g7h8" );

    TEST_WITH_ARGS( "3k3r/6P1/8/8/8/8/p7/R3K3 w Q - 19 75", expected )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_short_and_is_long_castle_tests

#define TEST_WITH_ARGS( fen_arg, move, expected_O_O, expected_O_O_O ) \
    ck_assert( !che_fen_validator(fen_arg) ); \
    p = fen_to_pos(fen_arg); \
    ck_assert( is_short_castle( p, rawcode(move) ) == expected_O_O ); \
    ck_assert( is_long_castle( p, rawcode(move) ) == expected_O_O_O ); \
    free( (Pos *) p );

#test is_short_and_is_long_castle_test_01
    const Pos *p;
    const char fen[] = "r3k2r/8/8/8/8/8/8/R3K2R w KQkq - 0 1";

    TEST_WITH_ARGS( fen, "e1h1", true, false )
    TEST_WITH_ARGS( fen, "e1a1", false, true )
    TEST_WITH_ARGS( fen, "e1e2", false, false )
    TEST_WITH_ARGS( fen, "a1a4", false, false )
    TEST_WITH_ARGS( fen, "h1h8", false, false )

#test is_short_and_is_long_castle_test_02
    const Pos *p;
    const char fen[] = "r3k2r/8/8/8/8/8/8/R3K2R b KQkq - 0 1";

    TEST_WITH_ARGS( fen, "e8h8", true, false )
    TEST_WITH_ARGS( fen, "e8a8", false, true )
    TEST_WITH_ARGS( fen, "e8e7", false, false )
    TEST_WITH_ARGS( fen, "a8a5", false, false )
    TEST_WITH_ARGS( fen, "h8h1", false, false )

#test is_short_and_is_long_castle_test_03
    const Pos *p;
    const char fen[] = "6k1/8/8/8/8/8/5r2/5RKR w FH - 1 5";

    TEST_WITH_ARGS( fen, "g1h1", true, false )
    TEST_WITH_ARGS( fen, "g1f1", false, true )
    TEST_WITH_ARGS( fen, "g1f2", false, false )
    TEST_WITH_ARGS( fen, "g1g2", false, false )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_capture_tests

#define TEST_WITH_ARGS( fen_arg, move, expected ) \
    ck_assert( !che_fen_validator(fen_arg) ); \
    p = fen_to_pos(fen_arg); \
    ck_assert( is_capture( p, rawcode(move) ) == expected ); \
    free( (Pos *) p );

#test is_capture_test_01
    const Pos *p;
    const char fen[] =
        "brknrnqb/pp2pppp/8/2pp4/1P6/4N3/P1PPPPPP/BRK1RNQB w BEbe - 0 3";

    TEST_WITH_ARGS( fen, "b4c5", true )
    TEST_WITH_ARGS( fen, "c1b1", false )
    TEST_WITH_ARGS( fen, "e3d5", true )
    TEST_WITH_ARGS( fen, "f2f4", false )
    TEST_WITH_ARGS( fen, "a1g7", true )

#test is_capture_test_02
    const Pos *p;
    const char fen[] =
        "bRknrnqb/p4ppp/4p3/2pp4/3P2P1/4N3/P1P1PP1P/B1K1RNQB b Ee - 0 6";

    TEST_WITH_ARGS( fen, "c8b8", true )
    TEST_WITH_ARGS( fen, "c8d7", false )
    TEST_WITH_ARGS( fen, "c5d4", true )
    TEST_WITH_ARGS( fen, "e6e5", false )
    TEST_WITH_ARGS( fen, "a8b7", false )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_pawn_advance_tests

#define TEST_WITH_ARGS( fen_arg, move, expected ) \
    ck_assert( !che_fen_validator(fen_arg) ); \
    p = fen_to_pos(fen_arg); \
    ck_assert( is_pawn_advance( p, rawcode(move) ) == expected ); \
    free( (Pos *) p );

#test is_pawn_advance_test_01
    const Pos *p;
    const char fen[] =
        "brknrnqb/p4ppp/1p2p3/2Pp4/6P1/4N3/P1PPPP1P/BRK1RNQB w BEbe - 0 5";

    TEST_WITH_ARGS( fen, "a2a3", true )
    TEST_WITH_ARGS( fen, "a2a4", true )
    TEST_WITH_ARGS( fen, "c5b6", false )
    TEST_WITH_ARGS( fen, "c5c6", true )
    TEST_WITH_ARGS( fen, "b1b2", false )

#test is_pawn_advance_test_02
    const Pos *p;
    const char fen[] =
        "bk1nrnqb/p4ppp/4p3/3pB3/6P1/3p4/P1PNPPNP/2K1R1QB b E - 1 9";

    TEST_WITH_ARGS( fen, "g7g6", true )
    TEST_WITH_ARGS( fen, "g7g5", true )
    TEST_WITH_ARGS( fen, "b8b7", false )
    TEST_WITH_ARGS( fen, "d3c2", false)
    TEST_WITH_ARGS( fen, "d3e2", false)
    TEST_WITH_ARGS( fen, "f8g6", false)
    TEST_WITH_ARGS( fen, "d5d4", true )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_single_step_pawn_advance_tests

#define TEST_WITH_ARGS( fen, move, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    ck_assert( is_single_step_pawn_advance( \
        p, rawcode(move) ) == expected ); \
    free( (Pos *) p );

#test is_single_step_pawn_advance_test_01
    const Pos *p;
    const char fen[] =
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2";

    TEST_WITH_ARGS( fen, "d2d3", true )
    TEST_WITH_ARGS( fen, "d2d4", false )
    TEST_WITH_ARGS( fen, "d2d5", false )
    TEST_WITH_ARGS( fen, "a2a3", true )
    TEST_WITH_ARGS( fen, "h2h4", false )
    TEST_WITH_ARGS( fen, "h2g3", false )
    TEST_WITH_ARGS( fen, "g1f3", false )
    TEST_WITH_ARGS( fen, "b1a3", false )
    TEST_WITH_ARGS( fen, "g2g3", true )
    TEST_WITH_ARGS( fen, "e4e5", true )
    TEST_WITH_ARGS( fen, "e4e3", false )
    TEST_WITH_ARGS( fen, "e4e6", false )

#test is_single_step_pawn_advance_test_02
    const Pos *p;
    const char fen[] =
        "4k3/7p/6R1/4p3/8/8/p7/4K3 b - - 0 1";

    TEST_WITH_ARGS( fen, "a2a1", true )
    TEST_WITH_ARGS( fen, "e5e4", true )
    TEST_WITH_ARGS( fen, "e5e3", false )
    TEST_WITH_ARGS( fen, "e5e6", false )
    TEST_WITH_ARGS( fen, "h7g6", false )
    TEST_WITH_ARGS( fen, "h7h6", true )
    TEST_WITH_ARGS( fen, "h7h5", false )
    TEST_WITH_ARGS( fen, "e8e7", false )
    TEST_WITH_ARGS( fen, "e8d7", false )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_double_step_pawn_advance_tests

#define TEST_WITH_ARGS( fen, move, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    ck_assert( is_double_step_pawn_advance( \
        p, rawcode(move) ) == expected ); \
    free( (Pos *) p );

#test is_double_step_pawn_advance_test_01
    const Pos *p;
    const char fen[] =
        "4k3/4p2p/p7/1Rp2P2/3P4/8/8/4K3 b - d3 0 123";

    TEST_WITH_ARGS( fen, "e7e5", true )
    TEST_WITH_ARGS( fen, "e7e6", false )
    TEST_WITH_ARGS( fen, "a6b5", false )
    TEST_WITH_ARGS( fen, "a6a5", false )
    TEST_WITH_ARGS( fen, "c5c7", false )
    TEST_WITH_ARGS( fen, "c5d4", false )
    TEST_WITH_ARGS( fen, "h7h6", false )
    TEST_WITH_ARGS( fen, "h7h5", true )
    TEST_WITH_ARGS( fen, "e8d8", false )

#test is_double_step_pawn_advance_test_02
    const Pos *p;
    const char fen[] =
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2";

    TEST_WITH_ARGS( fen, "d2d4", true )
    TEST_WITH_ARGS( fen, "a2a4", true )
    TEST_WITH_ARGS( fen, "h2h4", true )
    TEST_WITH_ARGS( fen, "e4e5", false )
    TEST_WITH_ARGS( fen, "f1c4", false )
    TEST_WITH_ARGS( fen, "g2g3", false )
    TEST_WITH_ARGS( fen, "g2g4", true )
    TEST_WITH_ARGS( fen, "g1f3", false )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_promotion_tests

#define TEST_WITH_ARGS( fen, move, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    ck_assert( is_promotion(p, rawcode(move)) == expected ); \
    free( (Pos *) p );

#test is_promotion_tested_with_non_capturing_white_pawn_promotions
    const Pos *p;

    TEST_WITH_ARGS( INIT_POS, "e2e4", false )
    TEST_WITH_ARGS( INIT_POS, "b1c3", false )
    TEST_WITH_ARGS( "4k3/P7/8/8/8/8/8/4K3 w - - 1 83", "a7a8", true )
    TEST_WITH_ARGS( "8/3kPK2/8/8/8/8/8/8 w - - 1 123", "e7e8", true )
    TEST_WITH_ARGS( "4k3/7P/8/8/8/8/8/4K3 w - - 1 83", "h7h8", true )
    TEST_WITH_ARGS( "4k3/7P/8/8/8/8/8/4K3 w - - 1 83", "e1e2", false )
    TEST_WITH_ARGS( "3b4/P3P3/8/8/8/8/8/K6k w - - 1 123", "a7a8", true )

#test is_promotion_tested_with_non_capturing_black_pawn_promotions
    const Pos *p;

    TEST_WITH_ARGS(
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2",
        "d8a5", false )
    TEST_WITH_ARGS(
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2",
        "g8f6", false )
    TEST_WITH_ARGS(
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2",
        "d7d6", false )
    TEST_WITH_ARGS( "4k3/8/8/8/4P3/6p1/p1p4p/4K3 b - e3 0 1", "a2a1", true )
    TEST_WITH_ARGS( "4k3/8/8/8/4P3/6p1/p1p4p/4K3 b - e3 0 1", "c2c1", true )
    TEST_WITH_ARGS( "4k3/8/8/8/4P3/6p1/p1p4p/4K3 b - e3 0 1", "h2h1", true )
    TEST_WITH_ARGS( "4k3/8/8/8/4P3/6p1/p1p4p/4K3 b - e3 0 1", "g3g2", false )
    TEST_WITH_ARGS( "4k3/8/8/8/4P3/6p1/p1p4p/4K3 b - e3 0 1", "e8e7", false )

#test is_promotion_tested_with_capturing_white_pawn_promotions
    const Pos *p;

    TEST_WITH_ARGS( "1r2k1br/P1q1n1PP/3P4/1N6/8/8/8/4K3 w - - 1 2", "a7b8", true )
    TEST_WITH_ARGS( "1r2k1br/P1q1n1PP/3P4/1N6/8/8/8/4K3 w - - 1 2", "b5c7", false )
    TEST_WITH_ARGS( "1r2k1br/P1q1n1PP/3P4/1N6/8/8/8/4K3 w - - 1 2", "d6c7", false )
    TEST_WITH_ARGS( "1r2k1br/P1q1n1PP/3P4/1N6/8/8/8/4K3 w - - 1 2", "d6e7", false )
    TEST_WITH_ARGS( "1r2k1br/P1q1n1PP/3P4/1N6/8/8/8/4K3 w - - 1 2", "g7h8", true )
    TEST_WITH_ARGS( "1r2k1br/P1q1n1PP/3P4/1N6/8/8/8/4K3 w - - 1 2", "h7g8", true )

#test is_promotion_tested_with_capturing_black_pawn_promotions
    const Pos *p;

    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "a2b1", true )
    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "c2b1", true )
    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "c2d1", true )
    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "d4c3", false )
    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "f2e1", true )
    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "f2g1", true )
    TEST_WITH_ARGS( "8/8/8/8/3p4/2B2k2/p1p2p1p/1N1BRKR1 b EG - 1 25", "h2g1", true )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase is_en_passant_capture_tests

#define TEST_WITH_ARGS( fen, move, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    p = fen_to_pos(fen); \
    ck_assert( is_en_passant_capture(p, rawcode(move)) == expected ); \
    free( (Pos *) p );

#test is_en_passant_capture_tested_with_white_as_active_color_01
    const Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/Pp6/8/8/8/4K3 w - b6 0 10", "a5b6", true )
    TEST_WITH_ARGS( "4k3/8/1p6/P7/8/8/8/4K3 w - - 0 10", "a5b6", false )
    TEST_WITH_ARGS( "4k3/8/8/6pP/8/8/8/4K3 w - g6 0 10", "h5g6", true )
    TEST_WITH_ARGS( "4k3/8/8/6pP/8/8/8/4K3 w - g6 0 10", "h5h6", false )
    TEST_WITH_ARGS( "4k3/8/8/6pP/8/8/8/4K3 w - g6 0 10", "e1e2", false )

#test is_en_passant_capture_tested_with_white_as_active_color_02
    const Pos *p;

    TEST_WITH_ARGS( "8/5k2/8/3PpP2/8/8/8/4K3 w - e6 0 20", "f5e6", true )
    TEST_WITH_ARGS( "8/5k2/8/3PpP2/8/8/8/4K3 w - e6 0 20", "d5e6", true )
    TEST_WITH_ARGS( "8/5k2/8/3PpP2/8/8/8/4K3 w - - 0 20", "f5e6", false )
    TEST_WITH_ARGS( "8/5k2/8/3PpP2/8/8/8/4K3 w - - 0 20", "d5e6", false )
    TEST_WITH_ARGS( "8/5k2/8/3PpP2/8/8/8/4K3 w - e6 0 20", "f5f6", false )
    TEST_WITH_ARGS( "8/5k2/8/3PpP2/8/8/8/4K3 w - e6 0 20", "e1e2", false )

#test is_en_passant_capture_tested_with_white_as_active_color_03
    const Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/3BpP2/8/8/8/4K3 w - e6 0 75", "f5e6", true )
    TEST_WITH_ARGS( "4k3/8/8/3BpP2/8/8/8/4K3 w - e6 0 75", "d5e6", false )

#test is_en_passant_capture_tested_with_black_as_active_color_01
    const Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/1p6/PpP5/2P5/8/4K3 b - a3 0 20", "b4a3", true )
    TEST_WITH_ARGS( "4k3/8/8/1p6/PpP5/2P5/8/4K3 b - a3 0 20", "b4c3", false )
    TEST_WITH_ARGS( "4k3/8/8/1p6/PpP5/2P5/8/4K3 b - a3 0 20", "b5a4", false )
    TEST_WITH_ARGS( "4k3/8/8/1p6/PpP5/2P5/8/4K3 b - a3 0 20", "b5c4", false )
    TEST_WITH_ARGS( "4k3/8/8/1p6/PpP5/2P5/8/4K3 b - a3 0 20", "e8d8", false )

#test is_en_passant_capture_tested_with_black_as_active_color_02
    const Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/8/pP6/8/8/4K3 b - b3 0 20", "a4b3", true )
    TEST_WITH_ARGS( "4k3/8/8/8/pP6/8/8/4K3 b - b3 0 20", "a4a3", false )
    TEST_WITH_ARGS( "4k3/8/8/8/6Pp/8/8/4K3 b - g3 0 20", "h4g3", true )
    TEST_WITH_ARGS( "4k3/8/8/8/6Pp/8/8/4K3 b - g3 0 20", "e8e7", false )
    TEST_WITH_ARGS( "4k3/8/8/8/5PpP/5N2/8/4K3 b - h3 0 20", "g4h3", true )
    TEST_WITH_ARGS( "4k3/8/8/8/5PpP/5N2/8/4K3 b - h3 0 20", "g4f3", false )
    TEST_WITH_ARGS( "4k3/8/8/8/5PpP/5N2/8/4K3 b - h3 0 20", "g4g3", false )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase che_move_gen_tests

#define TEST_WITH_ARGS(fens, expected) \
    results = che_move_gen(fens); \
    ck_assert(!strcmp(results, expected)); \
    free(results);

#test che_move_gen_test_1
    char *results;

    TEST_WITH_ARGS(INIT_POS,
        "Na3 Nc3 Nf3 Nh3 a3 a4 b3 b4 c3 c4 d3 d4 e3 e4 f3 f4 g3 g4 h3 h4\n")
    TEST_WITH_ARGS("4k3/4P3/4K3/8/8/8/8/8 b - - 12 34",
        "-\n")
    TEST_WITH_ARGS("4k3/4P3/4K3/8/8/8/8/8 b - - 12 34\nk5r1/8/8/8/8/8/r7/7K w - - 12 34",
        "-\n-\n")
    TEST_WITH_ARGS(INIT_POS "\n" "4k3/4P3/4K3/8/8/8/8/8 b - - 12 34",
        "Na3 Nc3 Nf3 Nh3 a3 a4 b3 b4 c3 c4 d3 d4 e3 e4 f3 f4 g3 g4 h3 h4\n-\n")
    TEST_WITH_ARGS("4k3/4P3/4K3/8/8/8/8/8 b - - 12 34" "\n" FEN_PERSONALLY_SIGNIFICANT,
        "-\nKf8 Kh8\n")
    TEST_WITH_ARGS(INIT_POS "\n" FEN_PERSONALLY_SIGNIFICANT "\n",
        "Na3 Nc3 Nf3 Nh3 a3 a4 b3 b4 c3 c4 d3 d4 e3 e4 f3 f4 g3 g4 h3 h4\nKf8 Kh8\n")
    TEST_WITH_ARGS(FEN_PERSONALLY_SIGNIFICANT "\n" INIT_POS,
        "Kf8 Kh8\n" "Na3 Nc3 Nf3 Nh3 a3 a4 b3 b4 c3 c4 d3 d4 e3 e4 f3 f4 g3 g4 h3 h4\n")
    TEST_WITH_ARGS("4k3/4P3/4K3/8/8/8/8/8 b - - 12 34\n7k/8/8/8/8/8/r7/K7 w - - 0 123",
        "-\nKb1 Kxa2\n")

#define MOVE_LIST_FEN_SUPERPOSITION_1 \
    "Bc2 Bc5 Bd3 Bd4 Be3 Be4 Bf2 Bf5 Bh2 Bxa2 Ke1 Ke2 Kf2 Kg2 Nb3# Nc3 " \
    "Nd3 Ne2 Ne3 Nf2 Nxa2 Nxb2 Q2d3 Q2d4 Q2d5 Q2d6 Q7d3 Q7d4 Q7d5 Q7d6 " \
    "Qaa4 Qaa5 Qaa6 Qaa7 Qab3 Qab4 Qac3 Qac5 Qad3 Qad6 Qae3 Qae7 Qaf8 " \
    "Qaxa2# Qaxb2# Qba5 Qba6 Qba7 Qbb3 Qbb4 Qbb5 Qbb7 Qbb8 Qbc5 Qbc6 " \
    "Qbc7 Qbd4 Qbd6 Qbd8 Qbe3 Qbe6 Qbf2 Qbf6 Qbxb2# Qca4 Qca6 Qcb3 Qcb4 " \
    "Qcb5 Qcc2 Qcc3 Qcc5 Qcc6 Qcc7 Qcc8 Qcd3 Qcd4 Qcd5 Qce2 Qce4 Qce6 " \
    "Qcf4 Qcf7 Qcg4 Qcg8 Qcxa2# Qda4 Qda5 Qda7 Qdb4 Qdb5 Qdb7 Qdc2 Qdc3 " \
    "Qdc6 Qdc7 Qdc8 Qdd8 Qde1 Qde2 Qde3 Qde6 Qde7 Qde8 Qdf2 Qdf4 Qdf5 " \
    "Qdf7 Qdg2 Qdg4 Qdg5 Qdg7 Qdh2 Qdh3 Qdh6 Qdh7 Qdxb2# Qea5 Qeb5 Qeb8 " \
    "Qec3 Qec5 Qec7 Qed4 Qed5 Qed6 Qee1 Qee2 Qee3 Qee4 Qee6 Qee7 Qee8 " \
    "Qef4 Qef5 Qef6 Qeg3 Qeg5 Qeg7 Qeh2 Qeh5 Qexb2# Qfb3 Qfb7 Qfc3 Qfc6 " \
    "Qfd3 Qfd5 Qfe2 Qfe3 Qfe4 Qff2 Qff4 Qff5 Qff6 Qff7 Qff8 Qfg2 Qfg3 " \
    "Qfg4 Qfh1 Qfh3 Qfh5 Qgc2 Qgc6 Qgd3 Qgd6 Qge4 Qge6 Qge8 Qgf5 Qgf6 " \
    "Qgf7 Qgg2 Qgg3 Qgg4 Qgg5 Qgg7 Qgg8 Qgh5 Qgh6 Qgh7 Qhd4 Qhd8 Qhe1 " \
    "Qhe4 Qhe7 Qhf2 Qhf4 Qhf6 Qhg3 Qhg4 Qhg5 Qhh1 Qhh2 Qhh3 Qhh5 Qhh6 " \
    "Qhh7 Ra4 Ra5 Ra6 Ra7 Rab8 Rac8 Rad8 Rae8 Raf8 Rag8 Rh5 Rh6 Rh7 Rhb8 " \
    "Rhc8 Rhd8 Rhe8 Rhf8 Rhg8"
#define MOVE_LIST_FEN_SUPERPOSITION_2 \
    "Ba5 Bb3 Bb4 Bc2 Bc3 Bd2 Be2 Bf2 Bf3 Bg3 Bg4 Bh4 Ka1 Ka2 Kc1 Kc2 Nd2 Ne2 " \
    "Ne3 Nf3 Ng3# Nh3 Nxh2 Q2b3 Q2b4 Q2b5 Q2b6 Q3d4 Q3d5 Q3d6 Q3d7 Q7b3 Q7b4 " \
    "Q7b5 Q7b6 Q8d4 Q8d5 Q8d6 Q8d7 Qaa1 Qaa2 Qaa3 Qaa5 Qaa6 Qaa7 Qaa8 Qab3 " \
    "Qab4 Qab5 Qac2 Qac4 Qac6 Qad4 Qad7 Qae4 Qae8 Qba1 Qba2 Qba3 Qba6 Qba7 " \
    "Qba8 Qbb8 Qbc1 Qbc2 Qbc3 Qbc6 Qbc7 Qbc8 Qbd2 Qbd4 Qbd5 Qbd7 Qbe2 Qbe4 " \
    "Qbe5 Qbe7 Qbf2 Qbf3 Qbf6 Qbf7 Qca3 Qca5 Qca7 Qcb4 Qcb5 Qcb6 Qcc1 Qcc2 " \
    "Qcc3 Qcc4 Qcc6 Qcc7 Qcc8 Qcd4 Qcd5 Qcd6 Qce3 Qce5 Qce7 Qcf2 Qcf5 Qcf8 " \
    "Qcg5 Qda3 Qda5 Qda6 Qda8 Qdb3 Qdb5 Qdb6 Qdb8 Qdc2 Qdc3 Qdc4 Qdc7 Qdc8 " \
    "Qdd2 Qde2 Qde3 Qde4 Qde7 Qde8 Qdf3 Qdf5 Qdf6 Qdf8 Qdg3 Qdg5 Qdg6 Qdg8 " \
    "Qdh3 Qdh4 Qdh7 Qdh8 Qea2 Qea6 Qeb3 Qeb6 Qec4 Qec6 Qec8 Qed5 Qed6 Qed7 " \
    "Qee2 Qee3 Qee4 Qee5 Qee7 Qee8 Qef5 Qef6 Qef7 Qeg4 Qeg6 Qeg8 Qeh3 Qeh6 " \
    "Qfb4 Qfb8 Qfc1 Qfc4 Qfc7 Qfd2 Qfd4 Qfd6 Qfe3 Qfe4 Qfe5 Qff2 Qff3 Qff5 " \
    "Qff6 Qff7 Qff8 Qfg3 Qfg4 Qfg5 Qfh4 Qfh6 Qgc3 Qgc7 Qgd4 Qgd7 Qge5 Qge7 " \
    "Qgf6 Qgf7 Qgf8 Qgg3 Qgg4 Qgg5 Qgg6 Qgg8 Qgh6 Qgh7 Qgh8 Qxh2# Rc2# Rd2# " \
    "Rd5 Re2# Re5 Rf2# Rf5 Rg3# Rg4# Rg6# Rgg5# Rgxh2# Rh3 Rh4 Rh6 Rh7 Rh8 " \
    "Rhg5 Rhxh2#"

#test che_move_gen_test_2
    char *results;

    TEST_WITH_ARGS(FEN_SUPERPOSITION_1, MOVE_LIST_FEN_SUPERPOSITION_1 "\n")
    TEST_WITH_ARGS(FEN_SUPERPOSITION_2, MOVE_LIST_FEN_SUPERPOSITION_2 "\n")
    TEST_WITH_ARGS(FEN_SUPERPOSITION_1 "\n" FEN_SUPERPOSITION_2,
        MOVE_LIST_FEN_SUPERPOSITION_1 "\n" MOVE_LIST_FEN_SUPERPOSITION_2 "\n")
    TEST_WITH_ARGS(FEN_SUPERPOSITION_2 "\n" FEN_SUPERPOSITION_1 "\n",
        MOVE_LIST_FEN_SUPERPOSITION_2 "\n" MOVE_LIST_FEN_SUPERPOSITION_1 "\n")
    TEST_WITH_ARGS(FEN_SUPERPOSITION_1 "\n" FEN_PERSONALLY_SIGNIFICANT "\n"
            FEN_SUPERPOSITION_2,
        MOVE_LIST_FEN_SUPERPOSITION_1 "\nKf8 Kh8\n" MOVE_LIST_FEN_SUPERPOSITION_2 "\n")

#test che_move_gen_test_3
    char *results;

    TEST_WITH_ARGS(
        "r2q1rk1/2p2p2/p1Qp2pp/1p2Pn2/3PN3/1B2R2P/PPP3P1/1K2R3 w - - 7 21\n"
        "r1bqkb1r/pp3pp1/2p1pn1p/3p4/1n1PP3/2N2N2/PPP1BPPP/R1BQK2R w KQkq - 2 8\n"
        "k5r1/8/8/8/8/8/r7/7K w - - 12 34\n"
        "1q1r1rkb/pb1pn1pp/1p1npp2/2p1N3/8/QP3NP1/P1PPPPBP/B2RKR2 w DF - 0 9\n"
        ,
        "Ba4 Bc4 Bd5 Be6 Bxf7+ Ka1 Kc1 Nc3 Nc5 Nd2 Nf2 Nf6+ Ng3 Ng5 Nxd6 Qb6 "
        "Qb7 Qc3 Qc4 Qc5 Qd5 Qd7 Qe8 Qxa6 Qxa8 Qxb5 Qxc7 Qxd6 R1e2 R3e2 Rc1 "
        "Rc3 Rd1 Rd3 Rf1 Rf3 Rg1 Rg3 Rh1 a3 a4 c3 c4 d5 e6 exd6 g3 g4 h4\n"

        "Ba6 Bb5 Bc4 Bd2 Bd3 Be3 Bf1 Bf4 Bg5 Bxh6 Kd2 Kf1 Na4 Nb1 Nb5 Nd2 "
        "Ne5 Ng1 Ng5 Nh4 Nxd5 O-O Qd2 Qd3 Rb1 Rf1 Rg1 a3 a4 b3 e5 exd5 g3 "
        "g4 h3 h4\n"

        "-\n"

        "Bb2 Bc3 Bd4 Bh1 Bh3 Nc4 Nc6 Nd3 Nd4 Nf7 Ng1 Ng4 Ng5 Ng6 Nh4 Nxd7 "
        "O-O O-O-O Qa4 Qa5 Qa6 Qb2 Qb4 Qc1 Qxa7 Qxc5 Rb1 Rc1 Rg1 Rh1 b4 c3 "
        "c4 d3 d4 e3 e4 g4 h3 h4\n")

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase single_fen_move_gen_tests

#define TEST_WITH_ARGS(fen, expected) \
    ck_assert(!che_fen_validator(fen)); \
    actual = single_fen_move_gen(fen); \
    ck_assert(!strcmp(actual, expected)); \
    free(actual);

#test single_fen_move_gen_test_1
    char *actual;

    TEST_WITH_ARGS(INIT_POS,
        "Na3 Nc3 Nf3 Nh3 a3 a4 b3 b4 c3 c4 d3 d4 e3 e4 f3 f4 g3 g4 h3 h4")
    TEST_WITH_ARGS(FEN_PERSONALLY_SIGNIFICANT,
        "Kf8 Kh8")
    TEST_WITH_ARGS(FEN_GAME_OF_THE_CENTURY,
        "Bc8 Bd7 Be6 Bf5 Bh3 Bh5 Bh6 Bh8 Bxf3 Kh8 Na4 Nbd5 Nbd7 Nc4 Nc8 Ne8 "
        "Nfd5 Nfd7 Nh5 Nxe4 Qb8 Qc7 Qc8 Qd5 Qd6 Qd7 Qe8 Qxd4 Rb8 Rc8 Re8 a5 "
        "a6 e5 e6 h5 h6")
    TEST_WITH_ARGS("7k/P1p3pp/8/3Pp3/8/7p/2q4P/4K2R w K e6 0 123",
        "Kf1 O-O Rf1 Rg1 a8=B a8=N a8=Q# a8=R# d6 dxe6")

// Testing with the two "superpositions" (both have 218 legal moves available)
#test single_fen_move_gen_test_2
    char *actual;

    TEST_WITH_ARGS(FEN_SUPERPOSITION_1, MOVE_LIST_FEN_SUPERPOSITION_1)
    TEST_WITH_ARGS(FEN_SUPERPOSITION_2, MOVE_LIST_FEN_SUPERPOSITION_2)

#undef MOVE_LIST_FEN_SUPERPOSITION_1
#undef MOVE_LIST_FEN_SUPERPOSITION_2

// Positions with no moves available (stalemate or checkmate positions)
#test single_fen_move_gen_test_3
    char *actual;

    TEST_WITH_ARGS("4k3/4P3/4K3/8/8/8/8/8 b - - 12 34",
        "")
    TEST_WITH_ARGS("4k3/4Q3/4K3/8/8/8/8/8 b - - 12 34",
        "")
    TEST_WITH_ARGS("8/8/8/8/8/8/r7/5k1K w - - 13 37",
        "")
    TEST_WITH_ARGS("8/8/8/8/8/4k3/4q3/R3K2R w KQ - 19 83",
        "")

// Positions with pawn promotion moves
#test single_fen_move_gen_test_4
    char *actual;

    TEST_WITH_ARGS("6r1/5P2/8/8/8/7k/8/7K w - - 19 75",
        "f8=B f8=N f8=Q f8=R fxg8=B fxg8=N fxg8=Q fxg8=R")
    TEST_WITH_ARGS("8/5P2/8/8/8/7k/8/7K w - - 19 75",
        "Kg1 f8=B f8=N f8=Q f8=R")
    TEST_WITH_ARGS("r1k2r2/5p2/8/8/pP6/8/7p/4K1N1 b af b3 0 50",
        "Kb7 Kb8 Kc7 Kd7 Kd8 O-O O-O-O Ra5 Ra6 Ra7 Rb8 Rd8 Re8+ Rg8 Rh8 a3 axb3 "
        "f5 f6 h1=B h1=N h1=Q h1=R hxg1=B hxg1=N hxg1=Q+ hxg1=R+")

// Positions with castling moves
#test single_fen_move_gen_test_5
    char *actual;

    TEST_WITH_ARGS("5k2/8/8/8/8/8/8/R3K2R w KQ - 12 34",
        "Kd1 Kd2 Ke2 Kf1 Kf2 O-O+ O-O-O Ra2 Ra3 Ra4 Ra5 Ra6 Ra7 Ra8+ Rb1 Rc1 "
        "Rd1 Rf1+ Rg1 Rh2 Rh3 Rh4 Rh5 Rh6 Rh7 Rh8+")
    TEST_WITH_ARGS("5rkr/5p1p/5P1P/8/8/8/2P1P3/2RKR3 b hf - 0 123",
        "O-O-O# Ra8 Rb8 Rc8 Rd8# Re8")

// Positions with en passant captures
#test single_fen_move_gen_test_6
    char *actual;

    TEST_WITH_ARGS("8/3k4/8/3PpP2/8/7p/7P/7K w - e6 0 123",
        "Kg1 d6 dxe6+ f6 fxe6+")
    TEST_WITH_ARGS("rk6/7b/8/8/pPp5/8/8/K2n4 b - b3 0 123",
        "Bb1 Bc2 Bd3 Be4 Bf5 Bg6 Bg8 Ka7 Kb7 Kc7 Kc8 Nb2 Nc3 Ne3 Nf2 Ra5 "
        "Ra6 Ra7 a3 axb3# c3 cxb3")

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase king_in_check_tests

#test king_in_check_test_1
    struct fen_game_tree gt_ip3 = che_build_fen_gt(NULL, 3);
    int check_count = 0;

    for(uint32_t id = 1; id <= gt_ip3.nc; id++) {
        const Pos *p = fen_to_pos(gt_ip3.fen[id]);
        if(king_in_check(p)) ++check_count;
        free((void *) p); }

    che_free_fen_gt(gt_ip3);
    ck_assert(check_count == 12);
