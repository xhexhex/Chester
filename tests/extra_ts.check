#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

#include "../src/base.h"
#include "../src/utils.h"
#include "../src/extra.h"

#suite extra_ts

#tcase dyn_ttt_ppa_to_ppf_conv_tests

#define nine_1s 511

static const uint16_t ppas[][3] = {
    {nine_1s, 0, 0},
    {174, 257, 80},
    {255, 256, 0},
    {0, 393, 118},
    {136, 263, 112},
    {296, 82, 133},
    {0, nine_1s, 0} }; // stop
static const char *expected_ppfs[] = {
    "3/3/3",
    "o1x/1o1/x2",
    "2x/3/3",
    "oxx/xoo/xoo",
    "o1x/1oo/xxx",
    "xo1/1x1/oxo" };

#test dyn_ttt_ppa_to_ppf_conv_correctness_test
    for(int i = 0; ppas[i][1] != nine_1s; i++) {
        char *ppf = dyn_ttt_ppa_to_ppf_conv(ppas[i]);
        ck_assert(ppas[i][0] + ppas[i][1] + ppas[i][2] == nine_1s);
        ck_assert(!strcmp(ppf, expected_ppfs[i]));
        free(ppf); }

#test dyn_ttt_ppa_to_ppf_conv_performance_test
    const uint16_t ppa1[] = {nine_1s, 0, 0}, ppa2[] = {174, 257, 80};
    char *ppf;

    long long t1 = time_in_milliseconds(), t2;
    for(int count = 1; count <= 500 * 1000; count++) {
        ppf = dyn_ttt_ppa_to_ppf_conv(ppa1), free(ppf);
        ppf = dyn_ttt_ppa_to_ppf_conv(ppa2), free(ppf); }
    t2 = time_in_milliseconds();
    // printf("The operation took %lld ms\n", t2 - t1);

    ck_assert(t2 - t1 >= 0);
    // One million calls to dyn_ttt_ppa_to_ppf_conv() should take
    // less than half a second to complete.
    ck_assert(t2 - t1 < 500);

#tcase sta_ttt_ppa_to_ppf_conv_tests

#test sta_ttt_ppa_to_ppf_conv_correctness_test
    char ppf[11 + 1];
    for(int i = 0; ppas[i][1] != nine_1s; i++) {
        sta_ttt_ppa_to_ppf_conv(ppas[i], ppf);
        ck_assert(ppas[i][0] + ppas[i][1] + ppas[i][2] == nine_1s);
        ck_assert(!strcmp(ppf, expected_ppfs[i])); }

#undef nine_1s

//
// Test case
//
#tcase shredder_to_std_fen_conv_tests

#define TEST_WITH_ARGS(fen_str, expected) \
    strcpy(fen, fen_str); \
    ck_assert( !che_fen_validator(fen) ); \
    ck_assert( !che_fen_validator(expected) ); \
    shredder_to_std_fen_conv(fen); \
    ck_assert( !strcmp(fen, expected) );

#test shredder_to_std_fen_conv_test_with_length_4_std_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        INIT_POS,
        INIT_POS )
    TEST_WITH_ARGS(
        "rnbqk2r/ppp2p1p/3b4/3PN2n/2BP1ppP/8/PPP3P1/RNBQK2R w KQkq - 1 9",
        "rnbqk2r/ppp2p1p/3b4/3PN2n/2BP1ppP/8/PPP3P1/RNBQK2R w KQkq - 1 9" )

#test shredder_to_std_fen_conv_test_with_length_4_shredder_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b HAha - 1 2",
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2" )
    TEST_WITH_ARGS(
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b AHah - 1 2",
        "rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2" )
    TEST_WITH_ARGS(
        "nqnrkbbr/pppp1pp1/7p/8/2B2p2/1N2P3/PPPP2PP/1QNRK1BR b DHdh - 1 4",
        "nqnrkbbr/pppp1pp1/7p/8/2B2p2/1N2P3/PPPP2PP/1QNRK1BR b DHdh - 1 4" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/4p3/8/8/8/R3K2R w HAha e6 0 123",
        "r3k2r/8/8/4p3/8/8/8/R3K2R w KQkq e6 0 123" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/4p3/8/8/8/R3K2R w AHah e6 0 123",
        "r3k2r/8/8/4p3/8/8/8/R3K2R w KQkq e6 0 123" )

#test shredder_to_std_fen_conv_test_with_length_3_std_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/R3K2R w KQq - 0 1",
        "r3k3/8/8/8/8/8/8/R3K2R w KQq - 0 1" )
    TEST_WITH_ARGS(
        "4k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1",
        "4k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1" )

#test shredder_to_std_fen_conv_test_with_length_3_shredder_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "r3k2r/8/8/4p3/8/8/8/R3K2R w HAa e6 0 123",
        "r3k2r/8/8/4p3/8/8/8/R3K2R w KQq e6 0 123" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/4p3/8/8/8/R3K2R w AHa e6 0 123",
        "r3k2r/8/8/4p3/8/8/8/R3K2R w KQq e6 0 123" )
    TEST_WITH_ARGS(
        "nqnrkb1r/pppp1ppb/7p/8/2B5/1N2P3/PPPR2PP/1QN1K1BR b Hdh - 2 6",
        "nqnrkb1r/pppp1ppb/7p/8/2B5/1N2P3/PPPR2PP/1QN1K1BR b Hdh - 2 6" )
    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/R3K2R w HAa - 0 1",
        "r3k3/8/8/8/8/8/8/R3K2R w KQq - 0 1" )
    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/R3K2R w AHa - 0 1",
        "r3k3/8/8/8/8/8/8/R3K2R w KQq - 0 1" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K3 b Aah - 19 75",
        "r3k2r/8/8/8/8/8/8/R3K3 b Qkq - 19 75" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/R3K3 b Aha - 19 75",
        "r3k2r/8/8/8/8/8/8/R3K3 b Qkq - 19 75" )

#test shredder_to_std_fen_conv_test_with_length_2_std_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/4K2R w Kq - 0 2017",
        "r3k3/8/8/8/8/8/8/4K2R w Kq - 0 2017" )
    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/R3K3 w Qq - 0 4095",
        "r3k3/8/8/8/8/8/8/R3K3 w Qq - 0 4095" )

#test shredder_to_std_fen_conv_test_with_length_2_shredder_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "b1n2rk1/p1p2ppp/1q4n1/2b1p3/2P5/1P6/P2P1PPP/BR1QK1RN w BG - 3 12",
        "b1n2rk1/p1p2ppp/1q4n1/2b1p3/2P5/1P6/P2P1PPP/BR1QK1RN w BG - 3 12" )
    TEST_WITH_ARGS(
        "b1n2rk1/p1p2ppp/1q4n1/2b1p3/2P5/1P6/P2P1PPP/BR1QK1RN w GB - 3 12",
        "b1n2rk1/p1p2ppp/1q4n1/2b1p3/2P5/1P6/P2P1PPP/BR1QK1RN w GB - 3 12" )
    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/4K2R w Ha - 0 2017",
        "r3k3/8/8/8/8/8/8/4K2R w Kq - 0 2017" )
    TEST_WITH_ARGS(
        "4k2r/8/8/8/8/8/8/R3K3 b Ah - 19 83",
        "4k2r/8/8/8/8/8/8/R3K3 b Qk - 19 83" )
    TEST_WITH_ARGS(
        "2k5/8/8/8/8/8/8/R3K2R b AH - 19 84",
        "2k5/8/8/8/8/8/8/R3K2R b KQ - 19 84" )
    TEST_WITH_ARGS(
        "2k5/8/8/8/8/8/8/R3K2R b HA - 19 84",
        "2k5/8/8/8/8/8/8/R3K2R b KQ - 19 84" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/2K5 w ah - 19 85",
        "r3k2r/8/8/8/8/8/8/2K5 w kq - 19 85" )
    TEST_WITH_ARGS(
        "r3k2r/8/8/8/8/8/8/2K5 w ha - 19 85",
        "r3k2r/8/8/8/8/8/8/2K5 w kq - 19 85" )
    TEST_WITH_ARGS(
        "4k2r/8/8/8/4P3/8/8/4K2R b Hh e3 0 123",
        "4k2r/8/8/8/4P3/8/8/4K2R b Kk e3 0 123" )
    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/R3K3 w Aa - 0 123",
        "r3k3/8/8/8/8/8/8/R3K3 w Qq - 0 123" )

#test shredder_to_std_fen_conv_test_with_length_1_std_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/RR2K3 w Q - 0 50",
        "4k3/8/8/8/8/8/8/RR2K3 w Q - 0 50" )
    TEST_WITH_ARGS(
        "4k2r/8/8/8/8/8/8/4K3 b k - 19 83",
        "4k2r/8/8/8/8/8/8/4K3 b k - 19 83" )

#test shredder_to_std_fen_conv_test_with_length_1_shredder_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/4K2R w H - 19 83",
        "4k3/8/8/8/8/8/8/4K2R w K - 19 83" )
    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/R3K3 b A - 19 83",
        "4k3/8/8/8/8/8/8/R3K3 b Q - 19 83" )
    TEST_WITH_ARGS(
        "4k2r/8/8/8/8/8/8/4K3 w h - 19 83",
        "4k2r/8/8/8/8/8/8/4K3 w k - 19 83" )
    TEST_WITH_ARGS(
        "r3k3/8/8/8/8/8/8/K7 w a - 0 50",
        "r3k3/8/8/8/8/8/8/K7 w q - 0 50" )
    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/3K3R w H - 19 83",
        "4k3/8/8/8/8/8/8/3K3R w H - 19 83" )
    TEST_WITH_ARGS(
        "rk6/8/8/8/8/8/8/4K3 b a - 19 83",
        "rk6/8/8/8/8/8/8/4K3 b a - 19 83" )
    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/4K1R1 w G - 19 83",
        "4k3/8/8/8/8/8/8/4K1R1 w G - 19 83" )
    TEST_WITH_ARGS(
        "3rk3/8/8/8/8/8/8/4K3 b d - 19 83",
        "3rk3/8/8/8/8/8/8/4K3 b d - 19 83" )

#test shredder_to_std_fen_conv_test_with_zero_length_cafs
    char fen[FEN_MAX_LENGTH + 1];

    TEST_WITH_ARGS(
        "4k3/8/8/8/8/8/8/4K3 w - - 19 83",
        "4k3/8/8/8/8/8/8/4K3 w - - 19 83" )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase rawcode_bit_indexes_tests

#define TEST_WITH_ARGS( rawcode_arg, expected_orig, expected_dest ) \
    rawcode_bit_indexes( rawcode_arg, &orig, &dest ); \
    ck_assert( orig == expected_orig ); \
    ck_assert( dest == expected_dest );

#test rawcode_bit_indexes_tested_with_manually_selected_rawcodes
    int orig, dest;
    TEST_WITH_ARGS( 1, 0, 8 )
    TEST_WITH_ARGS( 666, 3, 51 )
    TEST_WITH_ARGS( 1337, 53, 36 )
    TEST_WITH_ARGS( 1791, 63, 47 )
    TEST_WITH_ARGS( 1792, 63, 55 )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase sq_bit_index_tests

#test sq_bit_index_all_valid_inputs_test
    for( int i = 0; i < 64; i++ )
        ck_assert( sq_bit_index( SBA[i] ) == i );

    const Bitboard one = 1;
    ck_assert( sq_bit_index(one) == 0 );
    ck_assert( sq_bit_index(one << 3) == 3 );
    ck_assert( sq_bit_index(8) == 3 );
    ck_assert( sq_bit_index((Bitboard) pow(2,0)) == 0 );
    ck_assert( sq_bit_index((Bitboard) pow(2,50)) == 50 );
    ck_assert( sq_bit_index((Bitboard) pow(2,63)) == 63 );
    ck_assert( sq_bit_index(one << 63) == 63 );
    ck_assert( sq_bit_index(SB.e4) == 28 );
    ck_assert( sq_bit_index(SB.a8) == 56 );
    ck_assert( sq_bit_index(SB.h8) == 63 );

//
// Test case
//
#tcase diag_of_sq_tests

#test diag_of_sq_tested_with_squares_of_main_antidiagonal
    ck_assert( diag_of_sq( SB.h1 ) == 0x80U );
    ck_assert( diag_of_sq( SB.g2 ) == 0x804020U );
    ck_assert( diag_of_sq( SB.f3 ) == 0x8040201008U );
    ck_assert( diag_of_sq( SB.e4 ) == 0x80402010080402U );
    ck_assert( diag_of_sq( SB.d5 ) == 0x4020100804020100U );
    ck_assert( diag_of_sq( SB.c6 ) == 0x1008040201000000U );
    ck_assert( diag_of_sq( SB.b7 ) == 0x402010000000000U );
    ck_assert( diag_of_sq( SB.a8 ) == 0x100000000000000U );

#test diag_of_sq_tested_with_squares_of_antidiagonal_g1a7
    ck_assert( diag_of_sq( SB.g1 ) == 0x8040U );
    ck_assert( diag_of_sq( SB.f2 ) == 0x80402010U );
    ck_assert( diag_of_sq( SB.e3 ) == 0x804020100804U );
    ck_assert( diag_of_sq( SB.d4 ) == 0x8040201008040201U );
    ck_assert( diag_of_sq( SB.c5 ) == 0x2010080402010000U );
    ck_assert( diag_of_sq( SB.b6 ) == 0x804020100000000U );
    ck_assert( diag_of_sq( SB.a7 ) == 0x201000000000000U );

#test diag_of_sq_tested_with_all_squares
    for( int i = 0; i < 64; i++ )
        ck_assert( diag_of_sq( SBA[ i ] ) );

//
// Test case
//
#tcase antidiag_of_sq_tests

#test antidiag_of_sq_tested_with_squares_of_main_diagonal
    ck_assert( antidiag_of_sq( SB.a1 ) == 0x1U );
    ck_assert( antidiag_of_sq( SB.b2 ) == 0x10204U );
    ck_assert( antidiag_of_sq( SB.c3 ) == 0x102040810U );
    ck_assert( antidiag_of_sq( SB.d4 ) == 0x1020408102040U );
    ck_assert( antidiag_of_sq( SB.e5 ) == 0x204081020408000U );
    ck_assert( antidiag_of_sq( SB.f6 ) == 0x810204080000000U );
    ck_assert( antidiag_of_sq( SB.g7 ) == 0x2040800000000000U );
    ck_assert( antidiag_of_sq( SB.h8 ) == 0x8000000000000000U );

#test antidiag_of_sq_tested_with_squares_of_diagonal_b1h7
    ck_assert( antidiag_of_sq( SB.b1 ) == 0x102U );
    ck_assert( antidiag_of_sq( SB.c2 ) == 0x1020408U );
    ck_assert( antidiag_of_sq( SB.d3 ) == 0x10204081020U );
    ck_assert( antidiag_of_sq( SB.e4 ) == 0x102040810204080U );
    ck_assert( antidiag_of_sq( SB.f5 ) == 0x408102040800000U );
    ck_assert( antidiag_of_sq( SB.g6 ) == 0x1020408000000000U );
    ck_assert( antidiag_of_sq( SB.h7 ) == 0x4080000000000000U );

#test antidiag_of_sq_tested_with_all_squares
    for( int i = 0; i < 64; i++ )
        ck_assert( antidiag_of_sq( SBA[ i ] ) );
