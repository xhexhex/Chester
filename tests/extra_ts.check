#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

#include "../src/base.h"
#include "../src/utils.h"
#include "../src/extra.h"

#suite extra_ts

#tcase dyn_ttt_ppa_to_ppf_conv_tests

#define nine_1s 511

static const uint16_t ppas[][3] = {
    {nine_1s, 0, 0},
    {174, 257, 80},
    {255, 256, 0},
    {0, 393, 118},
    {136, 263, 112},
    {296, 82, 133},
    {0, nine_1s, 0} }; // stop
static const char *expected_ppfs[] = {
    "3/3/3",
    "o1x/1o1/x2",
    "2x/3/3",
    "oxx/xoo/xoo",
    "o1x/1oo/xxx",
    "xo1/1x1/oxo" };

#test dyn_ttt_ppa_to_ppf_conv_correctness_test
    for(int i = 0; ppas[i][1] != nine_1s; i++) {
        char *ppf = dyn_ttt_ppa_to_ppf_conv(ppas[i]);
        ck_assert(ppas[i][0] + ppas[i][1] + ppas[i][2] == nine_1s);
        ck_assert(!strcmp(ppf, expected_ppfs[i]));
        free(ppf); }

#test dyn_ttt_ppa_to_ppf_conv_performance_test
    const uint16_t ppa1[] = {nine_1s, 0, 0}, ppa2[] = {174, 257, 80};
    char *ppf;

    long long t1 = time_in_milliseconds(), t2;
    for(int count = 1; count <= 500 * 1000; count++) {
        ppf = dyn_ttt_ppa_to_ppf_conv(ppa1), free(ppf);
        ppf = dyn_ttt_ppa_to_ppf_conv(ppa2), free(ppf); }
    t2 = time_in_milliseconds();
    // printf("The operation took %lld ms\n", t2 - t1);

    ck_assert(t2 - t1 >= 0);
    // One million calls to dyn_ttt_ppa_to_ppf_conv() should take
    // less than half a second to complete.
    ck_assert(t2 - t1 < 500);

#tcase sta_ttt_ppa_to_ppf_conv_tests

#test sta_ttt_ppa_to_ppf_conv_correctness_test
    char ppf[11 + 1];
    for(int i = 0; ppas[i][1] != nine_1s; i++) {
        sta_ttt_ppa_to_ppf_conv(ppas[i], ppf);
        ck_assert(ppas[i][0] + ppas[i][1] + ppas[i][2] == nine_1s);
        ck_assert(!strcmp(ppf, expected_ppfs[i])); }

#undef nine_1s

//
// Test case
//
#tcase rawcode_bit_indexes_tests

#define TEST_WITH_ARGS( rawcode_arg, expected_orig, expected_dest ) \
    rawcode_bit_indexes( rawcode_arg, &orig, &dest ); \
    ck_assert( orig == expected_orig ); \
    ck_assert( dest == expected_dest );

#test rawcode_bit_indexes_tested_with_manually_selected_rawcodes
    int orig, dest;
    TEST_WITH_ARGS( 1, 0, 8 )
    TEST_WITH_ARGS( 666, 3, 51 )
    TEST_WITH_ARGS( 1337, 53, 36 )
    TEST_WITH_ARGS( 1791, 63, 47 )
    TEST_WITH_ARGS( 1792, 63, 55 )

#undef TEST_WITH_ARGS

//
// Test case
//
#tcase sq_bit_index_tests

#test sq_bit_index_all_valid_inputs_test
    for( int i = 0; i < 64; i++ )
        ck_assert( sq_bit_index( SBA[i] ) == i );

    const Bitboard one = 1;
    ck_assert( sq_bit_index(one) == 0 );
    ck_assert( sq_bit_index(one << 3) == 3 );
    ck_assert( sq_bit_index(8) == 3 );
    ck_assert( sq_bit_index((Bitboard) pow(2,0)) == 0 );
    ck_assert( sq_bit_index((Bitboard) pow(2,50)) == 50 );
    ck_assert( sq_bit_index((Bitboard) pow(2,63)) == 63 );
    ck_assert( sq_bit_index(one << 63) == 63 );
    ck_assert( sq_bit_index(SB.e4) == 28 );
    ck_assert( sq_bit_index(SB.a8) == 56 );
    ck_assert( sq_bit_index(SB.h8) == 63 );

//
// Test case
//
#tcase diag_of_sq_tests

#test diag_of_sq_tested_with_squares_of_main_antidiagonal
    ck_assert( diag_of_sq( SB.h1 ) == 0x80U );
    ck_assert( diag_of_sq( SB.g2 ) == 0x804020U );
    ck_assert( diag_of_sq( SB.f3 ) == 0x8040201008U );
    ck_assert( diag_of_sq( SB.e4 ) == 0x80402010080402U );
    ck_assert( diag_of_sq( SB.d5 ) == 0x4020100804020100U );
    ck_assert( diag_of_sq( SB.c6 ) == 0x1008040201000000U );
    ck_assert( diag_of_sq( SB.b7 ) == 0x402010000000000U );
    ck_assert( diag_of_sq( SB.a8 ) == 0x100000000000000U );

#test diag_of_sq_tested_with_squares_of_antidiagonal_g1a7
    ck_assert( diag_of_sq( SB.g1 ) == 0x8040U );
    ck_assert( diag_of_sq( SB.f2 ) == 0x80402010U );
    ck_assert( diag_of_sq( SB.e3 ) == 0x804020100804U );
    ck_assert( diag_of_sq( SB.d4 ) == 0x8040201008040201U );
    ck_assert( diag_of_sq( SB.c5 ) == 0x2010080402010000U );
    ck_assert( diag_of_sq( SB.b6 ) == 0x804020100000000U );
    ck_assert( diag_of_sq( SB.a7 ) == 0x201000000000000U );

#test diag_of_sq_tested_with_all_squares
    for( int i = 0; i < 64; i++ )
        ck_assert( diag_of_sq( SBA[ i ] ) );

//
// Test case
//
#tcase antidiag_of_sq_tests

#test antidiag_of_sq_tested_with_squares_of_main_diagonal
    ck_assert( antidiag_of_sq( SB.a1 ) == 0x1U );
    ck_assert( antidiag_of_sq( SB.b2 ) == 0x10204U );
    ck_assert( antidiag_of_sq( SB.c3 ) == 0x102040810U );
    ck_assert( antidiag_of_sq( SB.d4 ) == 0x1020408102040U );
    ck_assert( antidiag_of_sq( SB.e5 ) == 0x204081020408000U );
    ck_assert( antidiag_of_sq( SB.f6 ) == 0x810204080000000U );
    ck_assert( antidiag_of_sq( SB.g7 ) == 0x2040800000000000U );
    ck_assert( antidiag_of_sq( SB.h8 ) == 0x8000000000000000U );

#test antidiag_of_sq_tested_with_squares_of_diagonal_b1h7
    ck_assert( antidiag_of_sq( SB.b1 ) == 0x102U );
    ck_assert( antidiag_of_sq( SB.c2 ) == 0x1020408U );
    ck_assert( antidiag_of_sq( SB.d3 ) == 0x10204081020U );
    ck_assert( antidiag_of_sq( SB.e4 ) == 0x102040810204080U );
    ck_assert( antidiag_of_sq( SB.f5 ) == 0x408102040800000U );
    ck_assert( antidiag_of_sq( SB.g6 ) == 0x1020408000000000U );
    ck_assert( antidiag_of_sq( SB.h7 ) == 0x4080000000000000U );

#test antidiag_of_sq_tested_with_all_squares
    for( int i = 0; i < 64; i++ )
        ck_assert( antidiag_of_sq( SBA[ i ] ) );

//
// Test case
//
#tcase kerc_tests

#test kerc_edge_squares_test
    ck_assert( kerc( SB.a1 ) == 0x30707U );
    ck_assert( kerc( SB.b1 ) == 0x70f0fU );
    ck_assert( kerc( SB.c1 ) == 0xe1f1fU );
    ck_assert( kerc( SB.d1 ) == 0x1c3e3eU );
    ck_assert( kerc( SB.e1 ) == 0x387c7cU );
    ck_assert( kerc( SB.f1 ) == 0x70f8f8U );
    ck_assert( kerc( SB.g1 ) == 0xe0f0f0U );
    ck_assert( kerc( SB.h1 ) == 0xc0e0e0U );

    ck_assert( kerc( SB.a2 ) == 0x3070707U );
    ck_assert( kerc( SB.a3 ) == 0x307070703U );
    ck_assert( kerc( SB.a4 ) == 0x30707070300U );
    ck_assert( kerc( SB.a5 ) == 0x3070707030000U );
    ck_assert( kerc( SB.a6 ) == 0x307070703000000U );
    ck_assert( kerc( SB.a7 ) == 0x707070300000000U );

    ck_assert( kerc( SB.h2 ) == 0xc0e0e0e0U );
    ck_assert( kerc( SB.h3 ) == 0xc0e0e0e0c0U );
    ck_assert( kerc( SB.h4 ) == 0xc0e0e0e0c000U );
    ck_assert( kerc( SB.h5 ) == 0xc0e0e0e0c00000U );
    ck_assert( kerc( SB.h6 ) == 0xc0e0e0e0c0000000U );
    ck_assert( kerc( SB.h7 ) == 0xe0e0e0c000000000U );

    ck_assert( kerc( SB.a8 ) == 0x707030000000000U );
    ck_assert( kerc( SB.b8 ) == 0xf0f070000000000U );
    ck_assert( kerc( SB.c8 ) == 0x1f1f0e0000000000U );
    ck_assert( kerc( SB.d8 ) == 0x3e3e1c0000000000U );
    ck_assert( kerc( SB.e8 ) == 0x7c7c380000000000U );
    ck_assert( kerc( SB.f8 ) == 0xf8f8700000000000U );
    ck_assert( kerc( SB.g8 ) == 0xf0f0e00000000000U );
    ck_assert( kerc( SB.h8 ) == 0xe0e0c00000000000U );

#test kerc_semiedge_squares_test
    ck_assert( kerc( SB.b2 ) == 0x70f0f0fU );
    ck_assert( kerc( SB.c2 ) == 0xe1f1f1fU );
    ck_assert( kerc( SB.d2 ) == 0x1c3e3e3eU );
    ck_assert( kerc( SB.e2 ) == 0x387c7c7cU );
    ck_assert( kerc( SB.f2 ) == 0x70f8f8f8U );
    ck_assert( kerc( SB.g2 ) == 0xe0f0f0f0U );

    ck_assert( kerc( SB.b3 ) == 0x70f0f0f07U );
    ck_assert( kerc( SB.b4 ) == 0x70f0f0f0700U );
    ck_assert( kerc( SB.b5 ) == 0x70f0f0f070000U );
    ck_assert( kerc( SB.b6 ) == 0x70f0f0f07000000U );

    ck_assert( kerc( SB.g3 ) == 0xe0f0f0f0e0U );
    ck_assert( kerc( SB.g4 ) == 0xe0f0f0f0e000U );
    ck_assert( kerc( SB.g5 ) == 0xe0f0f0f0e00000U );
    ck_assert( kerc( SB.g6 ) == 0xe0f0f0f0e0000000U );

    ck_assert( kerc( SB.b7 ) == 0xf0f0f0700000000U );
    ck_assert( kerc( SB.c7 ) == 0x1f1f1f0e00000000U );
    ck_assert( kerc( SB.d7 ) == 0x3e3e3e1c00000000U );
    ck_assert( kerc( SB.e7 ) == 0x7c7c7c3800000000U );
    ck_assert( kerc( SB.f7 ) == 0xf8f8f87000000000U );
    ck_assert( kerc( SB.g7 ) == 0xf0f0f0e000000000U );

#test kerc_extended_center_squares_test
    Bitboard kerc_pattern = 0xe1f1f1f0eU, // The KERC of c3
        sq_bit = SB.c3;
    for( int counter = 1; counter <= 16; counter++ ) {
        ck_assert( kerc_pattern == kerc( sq_bit ) );

        if( counter % 4 ) {
            kerc_pattern <<= 1;
            sq_bit <<= 1;
        }
        else {
            kerc_pattern <<= 5;
            sq_bit <<= 5;
        }
    }

//
// Test case
//
#tcase rectangle_of_sqs_tests

#test rectangle_of_sqs_test_1
    ck_assert( 0x3c3c3c3c0000U == rectangle_of_sqs( 42, 21 ) );
    ck_assert( 0x7e000000U == rectangle_of_sqs( 25, 30 ) );
    ck_assert( 0x1818000000U == rectangle_of_sqs( 35, 28 ) );
    ck_assert( UINT64_MAX == rectangle_of_sqs( 56, 7 ) );
    ck_assert( 0x303000000000000U == rectangle_of_sqs( 56, 49 ) );
    ck_assert( 0xc0c0000000000000U == rectangle_of_sqs( 62, 55 ) );
    ck_assert( 0x303U == rectangle_of_sqs( 8, 1 ) );
    ck_assert( 0xc0c0U == rectangle_of_sqs( 14, 7 ) );
    ck_assert( !rectangle_of_sqs( 28, 27 ) );
    ck_assert( !rectangle_of_sqs( 34, 42 ) );
    ck_assert( !rectangle_of_sqs(28, 35) );
    ck_assert( !rectangle_of_sqs( 7, 56 ) );

#test rectangle_of_sqs_test_2
    for(int i = 0; i < 64; i++)
        ck_assert(ONE << i == rectangle_of_sqs(i, i));

#test rectangle_of_sqs_test_3
    int ulc = 7;
    for(int lrc = 14; lrc <= 56; lrc += 7)
        ck_assert(!rectangle_of_sqs(ulc, lrc));

    ulc = 4;
    for(int lrc = 12; lrc <= 60; lrc += 8)
        ck_assert(!rectangle_of_sqs(ulc, lrc));

    ulc = 31;
    for(int lrc = 30; lrc >= 24; --lrc)
        ck_assert(!rectangle_of_sqs(ulc, lrc));

#test rectangle_of_sqs_test_4
    ck_assert(0x1010101010101010U == rectangle_of_sqs(60, 4));
    ck_assert(0xff00000000000000U == rectangle_of_sqs(56, 63));
    ck_assert(0xffU == rectangle_of_sqs(0, 7));
    ck_assert(0x101010101010101U == rectangle_of_sqs(56, 0));
