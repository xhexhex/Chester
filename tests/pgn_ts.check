#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

#include "../src/base.h"
#include "../src/utils.h"
#include "../src/pgn.h"

#suite pgn_ts

#tcase san_to_rawcode_tests

#define TEST_WITH_ARGS( fen, san, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    ck_assert( che_is_san(san) ); \
    p = fen_to_pos(fen); \
    ck_assert( san_to_rawcode(p, san) == rawcode(expected) ); \
    free(p);

#test san_to_rawcode_tested_with_castling_moves
    Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/R3K2R w KQ - 0 123", "O-O", "e1h1" )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/R3K2R w KQ - 0 123", "O-O-O", "e1a1" )
    TEST_WITH_ARGS( "1rk1r3/8/8/8/8/8/8/1RK1R3 b BEbe - 1 75", "O-O", "c8e8" )
    TEST_WITH_ARGS( "1rk1r3/8/8/8/8/8/8/1RK1R3 b BEbe - 1 75", "O-O-O", "c8b8" )

#test san_to_rawcode_tested_with_pawn_advances
    Pos *p;

    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "a8=Q+", "a7a8" )
    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "e3", "e2e3" )
    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "e4", "e2e4" )
    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "g6", "g5g6" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "c1=R+", "c2c1" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "e2", "e3e2" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "h6", "h7h6" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "h5", "h7h5" )

#test san_to_rawcode_tested_with_pawn_captures
    Pos *p;

    TEST_WITH_ARGS( "2r1k3/1P6/6b1/4pP2/8/8/8/4K3 w - e6 0 57", "bxc8=Q+", "b7c8" )
    TEST_WITH_ARGS( "2r1k3/1P6/6b1/4pP2/8/8/8/4K3 w - e6 0 57", "fxe6", "f5e6" )
    TEST_WITH_ARGS( "2r1k3/1P6/6b1/4pP2/8/8/8/4K3 w - e6 0 57", "fxg6", "f5g6" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "axb1=N", "a2b1" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "exd6", "e7d6" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "gxf3", "g4f3" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "gxh3", "g4h3" )

#test san_to_rawcode_tested_with_non_disambiguated_piece_moves
    Pos *p;

    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Ke2", "e1e2" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Qxd7+", "d1d7" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Rh4", "h1h4" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Bg7", "h8g7" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Nxf6+", "e4f6" )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/4K3 b kq - 0 75", "Rd8", "a8d8" )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/4K3 b kq - 0 75", "Rg8", "h8g8" )
    TEST_WITH_ARGS( "4k2B/8/8/8/3r4/8/1B6/4K3 w - - 10 68", "Be5", "h8e5" )
    TEST_WITH_ARGS( "4k2B/8/8/8/3r4/8/1B6/4K3 w - - 10 68", "Bc3", "b2c3" )
    TEST_WITH_ARGS( "8/8/q7/3K4/2R5/3k4/8/5q2 b - - 19 75", "Qxc4+", "a6c4" )
    TEST_WITH_ARGS( "4R3/8/8/4n2k/4n3/8/7K/4R3 w - - 23 68", "Rxe4", "e1e4" )
    TEST_WITH_ARGS( "4R3/8/8/4n2k/4n3/8/7K/4R3 w - - 23 68", "Rxe5+", "e8e5" )
    TEST_WITH_ARGS( "5rk1/8/8/8/1R3R2/8/8/5K2 w - - 0 123", "Rd4", "b4d4" )
    TEST_WITH_ARGS( "1k6/1b6/2R5/3b4/8/8/8/1RK5 b - - 0 83", "Bxc6", "d5c6" )

#test san_to_rawcode_tested_with_singly_disambiguated_piece_moves
    /*
    Pos *p;

    TEST_WITH_ARGS( "", "", "" )
    */

#undef TEST_WITH_ARGS
