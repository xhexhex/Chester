#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

#include "../src/base.h"
#include "../src/utils.h"
#include "../src/pgn.h"

#suite pgn_ts

//
// Test case
//
#tcase san_to_rawcode_tests

#define TEST_WITH_ARGS( fen, san, expected ) \
    ck_assert( !che_fen_validator(fen) ); \
    ck_assert( che_is_san(san) ); \
    p = fen_to_pos(fen); \
    ck_assert( san_to_rawcode(p, san) == rawcode(expected) ); \
    free(p);

#test san_to_rawcode_tested_with_castling_moves
    Pos *p;

    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/R3K2R w KQ - 0 123", "O-O", "e1h1" )
    TEST_WITH_ARGS( "4k3/8/8/8/8/8/8/R3K2R w KQ - 0 123", "O-O-O", "e1a1" )
    TEST_WITH_ARGS( "1rk1r3/8/8/8/8/8/8/1RK1R3 b BEbe - 1 75", "O-O", "c8e8" )
    TEST_WITH_ARGS( "1rk1r3/8/8/8/8/8/8/1RK1R3 b BEbe - 1 75", "O-O-O", "c8b8" )

#test san_to_rawcode_tested_with_pawn_advances
    Pos *p;

    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "a8=Q+", "a7a8" )
    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "e3", "e2e3" )
    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "e4", "e2e4" )
    TEST_WITH_ARGS( "4k3/P7/8/6P1/8/8/4P3/4K3 w - - 1 75", "g6", "g5g6" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "c1=R+", "c2c1" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "e2", "e3e2" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "h6", "h7h6" )
    TEST_WITH_ARGS( "4k3/7p/8/8/8/4p3/2p5/4K3 b - - 0 123", "h5", "h7h5" )

#test san_to_rawcode_tested_with_pawn_captures
    Pos *p;

    TEST_WITH_ARGS( "2r1k3/1P6/6b1/4pP2/8/8/8/4K3 w - e6 0 57", "bxc8=Q+", "b7c8" )
    TEST_WITH_ARGS( "2r1k3/1P6/6b1/4pP2/8/8/8/4K3 w - e6 0 57", "fxe6", "f5e6" )
    TEST_WITH_ARGS( "2r1k3/1P6/6b1/4pP2/8/8/8/4K3 w - e6 0 57", "fxg6", "f5g6" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "axb1=N", "a2b1" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "exd6", "e7d6" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "gxf3", "g4f3" )
    TEST_WITH_ARGS( "4k3/4p3/3Q4/8/6pP/5NK1/p7/1R6 b - h3 0 68", "gxh3", "g4h3" )

#test san_to_rawcode_tested_with_non_disambiguated_piece_moves
    Pos *p;

    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Ke2", "e1e2" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Qxd7+", "d1d7" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Rh4", "h1h4" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Bg7", "h8g7" )
    TEST_WITH_ARGS( "4k2B/3p4/5p2/8/4N3/8/8/3QK2R w K - 10 68", "Nxf6+", "e4f6" )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/4K3 b kq - 0 75", "Rd8", "a8d8" )
    TEST_WITH_ARGS( "r3k2r/8/8/8/8/8/8/4K3 b kq - 0 75", "Rg8", "h8g8" )
    TEST_WITH_ARGS( "4k2B/8/8/8/3r4/8/1B6/4K3 w - - 10 68", "Be5", "h8e5" )
    TEST_WITH_ARGS( "4k2B/8/8/8/3r4/8/1B6/4K3 w - - 10 68", "Bc3", "b2c3" )
    TEST_WITH_ARGS( "8/8/q7/3K4/2R5/3k4/8/5q2 b - - 19 75", "Qxc4+", "a6c4" )
    TEST_WITH_ARGS( "4R3/8/8/4n2k/4n3/8/7K/4R3 w - - 23 68", "Rxe4", "e1e4" )
    TEST_WITH_ARGS( "4R3/8/8/4n2k/4n3/8/7K/4R3 w - - 23 68", "Rxe5+", "e8e5" )
    TEST_WITH_ARGS( "5rk1/8/8/8/1R3R2/8/8/5K2 w - - 0 123", "Rd4", "b4d4" )
    TEST_WITH_ARGS( "1k6/1b6/2R5/3b4/8/8/8/1RK5 b - - 0 83", "Bxc6", "d5c6" )

#test san_to_rawcode_tested_with_singly_disambiguated_piece_moves
    Pos *p;

    TEST_WITH_ARGS( "4k3/8/4K3/8/8/8/8/R6R w - - 19 75", "Rad1", "a1d1" )
    TEST_WITH_ARGS( "4k3/8/4K3/8/8/8/8/R6R w - - 19 75", "Rhd1", "h1d1" )
    TEST_WITH_ARGS( "4k3/8/4b3/3r4/3R3K/3r3b/8/8 b - - 0 123", "R5xd4+", "d5d4" )
    TEST_WITH_ARGS( "4k3/8/4b3/3r4/3R3K/3r3b/8/8 b - - 0 123", "R3xd4+", "d3d4" )
    TEST_WITH_ARGS( "4k3/8/4b3/3r4/3R3K/3r3b/8/8 b - - 0 123", "Bef5", "e6f5" )
    TEST_WITH_ARGS( "4k3/8/4b3/3r4/3R3K/3r3b/8/8 b - - 0 123", "Bhf5", "h3f5" )
    TEST_WITH_ARGS( "k7/8/K4N2/8/8/8/3N4/8 w - - 12 34", "Nfe4", "f6e4" )
    TEST_WITH_ARGS( "k7/8/K2N1N2/8/8/8/8/8 w - - 12 34", "Nde4", "d6e4" )
    TEST_WITH_ARGS( "k7/8/K4N2/8/8/8/5N2/8 w - - 12 34", "N2e4", "f2e4" )

#test san_to_rawcode_tested_with_doubly_disambiguated_piece_moves
    Pos *p;

    TEST_WITH_ARGS( "k7/8/8/4R3/3R1R2/4R3/8/K7 w - - 13 37", "Re3e4", "e3e4" )
    TEST_WITH_ARGS( "7k/8/8/3K3b/8/5B2/8/3b3b b - - 0 100", "Bh1xf3+", "h1f3" )

#undef TEST_WITH_ARGS

#define TEST_WITH_ARGS(fen, rawmove, promotion, expected_san) \
    ck_assert(!che_fen_validator(fen)); \
    p = fen_to_pos(fen); \
    actual_san = rawcode_to_san(p, rawcode(rawmove), promotion); \
    ck_assert(!strcmp(actual_san, expected_san)); \
    free(actual_san);

// printf("Actual SAN: \"%s\"\n", actual_san);

//
// Test case
//
#tcase rawcode_to_san_tests

#test rawcode_to_san_test_1
    Pos *p; char *actual_san;

    TEST_WITH_ARGS(FEN_STD_START_POS, "g1f3", '-', "Nf3")
    TEST_WITH_ARGS(FEN_STD_START_POS, "b1a3", '-', "Na3")
    TEST_WITH_ARGS(FEN_STD_START_POS, "e2e4", '-', "e4")
    TEST_WITH_ARGS(FEN_STD_START_POS, "d2d3", '-', "d3")
    TEST_WITH_ARGS(FEN_STD_START_POS, "h2h4", '-', "h4")

#test rawcode_to_san_test_2
    Pos *p; char *actual_san;

    TEST_WITH_ARGS("4k3/8/6n1/4pP2/8/1r6/P7/4K3 w - e6 0 123", "a2a4", '-', "a4")
    TEST_WITH_ARGS("4k3/8/6n1/4pP2/8/1r6/P7/4K3 w - e6 0 123", "a2b3", '-', "axb3")
    TEST_WITH_ARGS("4k3/8/6n1/4pP2/8/1r6/P7/4K3 w - e6 0 123", "f5e6", '-', "fxe6")
    TEST_WITH_ARGS("4k3/8/6n1/4pP2/8/1r6/P7/4K3 w - e6 0 123", "f5g6", '-', "fxg6")
    TEST_WITH_ARGS("4k3/8/8/8/1p3pPp/1pP1N3/R7/4K3 b - g3 0 39", "b3a2", '-', "bxa2")
    TEST_WITH_ARGS("4k3/8/8/8/1p3pPp/1pP1N3/R7/4K3 b - g3 0 39", "b4c3", '-', "bxc3")
    TEST_WITH_ARGS("4k3/8/8/8/1p3pPp/1pP1N3/R7/4K3 b - g3 0 39", "f4e3", '-', "fxe3")
    TEST_WITH_ARGS("4k3/8/8/8/1p3pPp/1pP1N3/R7/4K3 b - g3 0 39", "f4g3", '-', "fxg3")
    TEST_WITH_ARGS("4k3/8/8/8/1p3pPp/1pP1N3/R7/4K3 b - g3 0 39", "h4g3", '-', "hxg3")

#test rawcode_to_san_test_3
    Pos *p; char *actual_san;

    TEST_WITH_ARGS("8/8/2r5/4k3/3N4/8/8/4K3 w - - 19 83", "d4c6", '-', "Nxc6+")
    TEST_WITH_ARGS("8/8/2r5/4k3/3N4/8/8/4K3 w - - 19 83", "d4f3", '-', "Nf3+")
    TEST_WITH_ARGS("r3k3/8/8/8/8/8/5PPP/R5K1 b q - 12 34", "a8a1", '-', "Rxa1#")
    TEST_WITH_ARGS("R5rk/6pp/8/3KN3/8/8/8/8 w - - 0 100", "e5f7", '-', "Nf7#")
    TEST_WITH_ARGS("R5rk/6pp/8/3KN3/8/8/8/8 w - - 0 100", "a8g8", '-', "Rxg8+")
    TEST_WITH_ARGS("K5nk/6pp/5P1P/8/8/8/8/8 w - - 19 39", "f6g7", '-', "fxg7#")
    TEST_WITH_ARGS("K5nk/6pp/5P1P/8/8/8/8/8 w - - 19 39", "h6g7", '-', "hxg7#")

#test rawcode_to_san_test_4
    Pos *p; char *actual_san;

    TEST_WITH_ARGS("8/4P3/8/8/8/8/8/k6K w - - 18 99", "e7e8", 'Q', "e8=Q")
    TEST_WITH_ARGS("8/4P3/8/8/8/8/8/k6K w - - 18 99", "e7e8", 'r', "e8=R")
    TEST_WITH_ARGS("8/4P3/8/8/8/8/8/k6K w - - 18 99", "e7e8", 'B', "e8=B")
    TEST_WITH_ARGS("8/4P3/8/8/8/8/8/k6K w - - 18 99", "e7e8", 'n', "e8=N")
    TEST_WITH_ARGS("5qnb/4P1rk/6pp/8/8/8/8/5K2 w - - 19 68", "e7e8", 'b', "e8=B")
    TEST_WITH_ARGS("5qnb/4P1rk/6pp/8/8/8/8/5K2 w - - 19 68", "e7f8", 'q', "exf8=Q")
    TEST_WITH_ARGS("5qnb/4P1rk/6pp/8/8/8/8/5K2 w - - 19 68", "e7f8", 'N', "exf8=N#")
    TEST_WITH_ARGS("4k3/8/8/8/8/8/p1PPp3/2KR4 b - - 0 123", "a2a1", 'Q', "a1=Q#")
    TEST_WITH_ARGS("4k3/8/8/8/8/8/p1PPp3/2KR4 b - - 0 123", "a2a1", 'r', "a1=R+")
    TEST_WITH_ARGS("4k3/8/8/8/8/8/p1PPp3/2KR4 b - - 0 123", "e2d1", 'q', "exd1=Q+")

#test rawcode_to_san_test_5
    Pos *p; char *actual_san;

    TEST_WITH_ARGS("4k2b/1r4r1/8/8/8/8/8/K7 b - - 12 34", "b7e7", '-', "Rbe7")
    TEST_WITH_ARGS("7k/8/8/4R3/R2R1R2/8/4R3/K3R3 w - - 19 39", "e2e4", '-', "R2e4")
    TEST_WITH_ARGS("7k/8/8/4R3/R2R1R2/8/4R3/K3R3 w - - 19 39", "d4e4", '-', "Rde4")

#undef TEST_WITH_ARGS
