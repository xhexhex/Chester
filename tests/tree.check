#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

#include "../src/base.h"
#include "../src/utils.h"

#suite tree_ts

//
// Test case
//
#tcase che_build_fen_gt_tests

#test che_build_fen_gt_test_1
    struct fen_game_tree gt = che_build_fen_gt(NULL, 0);

    ck_assert(gt.num_ufen == 1);
    ck_assert(gt.nc == 1);
    ck_assert(!strcmp(INIT_POS, gt.ufen[1]));
    ck_assert(gt.height == 0);
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.cc[1] == 20);
    ck_assert(!gt.parent[1]);
    ck_assert(gt.findex[1] == 1);

    che_free_fen_gt(gt);

#test che_build_fen_gt_test_2
    const char *the_ufens[] = {
        "",
        "rnbqkbnr/pppppppp/8/8/1P6/8/P1PPPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/2P5/8/PP1PPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/5P2/8/PPPPP1PP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/6P1/8/PPPPPP1P/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/7P/8/PPPPPPP1/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/1P6/P1PPPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/2N5/PPPPPPPP/R1BQKBNR b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/2P5/PP1PPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/3P4/PPP1PPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/4P3/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/5N2/PPPPPPPP/RNBQKB1R b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/5P2/PPPPP1PP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/6P1/PPPPPP1P/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/7N/PPPPPPPP/RNBQKB1R b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/7P/PPPPPPP1/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/N7/PPPPPPPP/R1BQKBNR b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/P7/1PPPPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/P7/8/1PPPPPPP/RNBQKBNR b KQkq - 0 1" };

    struct fen_game_tree gt = che_build_fen_gt(NULL, 1);

    ck_assert(!gt.parent[1]);
    for(uint32_t id = 2; id <= gt.nc; id++)
        ck_assert(gt.parent[id] == 1);
    ck_assert(gt.height == 1);
    ck_assert(gt.nc == 21);
    ck_assert(gt.num_ufen == 21);
    ck_assert(gt.cc[1] == 20);
    for(int i = 0; i < (int) gt.cc[1]; i++)
        ck_assert(gt.children[1][i] == (uint32_t) (i + 2));
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.lo[1] == 2);
    for(uint32_t id = gt.lo[1]; id <= gt.nc; ++id)
        ck_assert(gt.cc[id] == 20);

    for(uint32_t id = 1; id <= gt.num_ufen; ++id)
        ck_assert(!strcmp(gt.ufen[id], the_ufens[id]));

    uint32_t children_in_tree = 0;
    for(uint32_t id = 1; id <= gt.nc; ++id)
        children_in_tree += gt.cc[id];
    ck_assert(children_in_tree == 20 + 400); // perft(1) + perft(2)

    che_free_fen_gt(gt);

#test che_build_fen_gt_test_3
    struct fen_game_tree gt = che_build_fen_gt(NULL, 2);

    ck_assert(gt.height == 2);
    ck_assert(gt.nc == 421);
    ck_assert(gt.num_ufen == 421);
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.lo[1] == 2);
    ck_assert(gt.lo[2] == 22);

    uint32_t children_in_tree = 0;
    for(uint32_t id = 1; id <= gt.nc; ++id)
        children_in_tree += gt.cc[id];
    ck_assert(children_in_tree == 20 + 400 + 8902); // perft(1) + perft(2) + perft(3)

    che_free_fen_gt(gt);

#test che_build_fen_gt_test_4
    struct fen_game_tree gt = che_build_fen_gt(
        "R5k1/5ppp/8/8/8/8/8/4K3 b - - 1 1", 10); // Checkmate position

    ck_assert(gt.nc == 1);
    ck_assert(gt.num_ufen == 1);
    ck_assert(gt.height == 0);

    che_free_fen_gt(gt);

#test che_build_fen_gt_test_5
    struct fen_game_tree gt = che_build_fen_gt(FEN_SUPERPOSITION_1, 1);
    ck_assert(gt.nc == MAX_LEGAL_MOVE_COUNT + 1);
    ck_assert(gt.height == 1);
    che_free_fen_gt(gt);

#test che_build_fen_gt_test_6
    struct fen_game_tree gt = che_build_fen_gt(NO_BRAINER_MATE_IN_2, 1);

    char *three_children[] = {
        "R2kr1nN/PK1p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 1 1",  // Kb7+
        "RK1kr1n1/P2p1NPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1",  // Nxf7+
     // "RK1kr1nN/P2p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 w - - 0 1"   // Root
        "RK1kr1nN/PP1p1pPp/5PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1" }; // b7+

    ck_assert(gt.num_ufen == 4), ck_assert(gt.nc == 4);
    ck_assert(gt.height == 1), ck_assert(gt.cc[1] == 3);
    ck_assert(!strcmp(gt.ufen[1], three_children[0]));
    ck_assert(!strcmp(gt.ufen[2], three_children[1]));
    ck_assert(!strcmp(gt.ufen[3], NO_BRAINER_MATE_IN_2));
    ck_assert(!strcmp(gt.ufen[4], three_children[2]));
    ck_assert(gt.findex[1] == 3);

    che_free_fen_gt(gt);

#test che_build_fen_gt_test_7
    struct fen_game_tree gt = che_build_fen_gt(NO_BRAINER_MATE_IN_2, 2);

    printf("%s", che_move_gen(NO_BRAINER_MATE_IN_2));
    printf("%s", che_move_gen("R2kr1nN/PK1p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 1 1"));
    printf("%s", che_move_gen("RK1kr1n1/P2p1NPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1"));
    printf("%s", che_move_gen("RK1kr1nN/PP1p1pPp/5PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1"));

    che_free_fen_gt(gt);

/*
struct fen_game_tree {
    char **ufen; // ufen, unique FENs
    uint8_t height, *cc; // cc, child count
    // nc, node count; lo, level offset
    uint32_t nc, num_ufen, lo[FGT_LO_SIZE], *parent, **children,
        *findex;
};
*/
    // printf("%s", che_move_gen(NO_BRAINER_MATE_IN_2));

// #define STALEMATE
// #undef STALEMATE
