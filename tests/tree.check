#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

#include "../src/chester.h"
#include "../src/base.h"
#include "../src/utils.h"
#include "../src/move_gen.h"

#suite tree_ts

//
// Test case
//
#tcase che_build_explicit_gt_tests

static struct explicit_game_tree x_gt;
static uint32_t x_visit_count, x_check_count,
    x_checkmate_count, x_capture_count;

static void
x_dfs(uint32_t node)
{
    // printf("%u\n", node);
    ++x_visit_count;

    char *fen = x_gt.ufen[x_gt.findex[node]];
    const Pos *p = fen_to_pos(fen);
    if(king_in_check(p)) ++x_check_count;
    Rawcode *rc = rawcodes(p);
    if(!rc[0]) ++x_checkmate_count;
    for(int i = 1; i <= (int) rc[0]; ++i)
        if(is_capture(p, rc[i])) ++x_capture_count;
    free(rc), free((void *) p);

    if(node >= x_gt.lo[x_gt.height])
        return;

    for(int i = 0; i < x_gt.cc[node]; ++i)
        x_dfs(x_gt.children[node][i]);
}

#test che_build_explicit_gt_test_1
    struct explicit_game_tree gt = che_build_explicit_gt(NULL, 0);

    ck_assert(gt.num_ufen == 1);
    ck_assert(gt.nc == 1);
    ck_assert(!strcmp(INIT_POS, gt.ufen[1]));
    ck_assert(gt.height == 0);
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.cc[1] == 20);
    ck_assert(!gt.parent[1]);
    ck_assert(gt.findex[1] == 1);

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_2
    const char *the_ufens[] = {
        "",
        "rnbqkbnr/pppppppp/8/8/1P6/8/P1PPPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/2P5/8/PP1PPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/5P2/8/PPPPP1PP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/6P1/8/PPPPPP1P/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/7P/8/PPPPPPP1/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/1P6/P1PPPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/2N5/PPPPPPPP/R1BQKBNR b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/2P5/PP1PPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/3P4/PPP1PPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/4P3/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/5N2/PPPPPPPP/RNBQKB1R b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/5P2/PPPPP1PP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/6P1/PPPPPP1P/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/7N/PPPPPPPP/RNBQKB1R b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/7P/PPPPPPP1/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/8/N7/PPPPPPPP/R1BQKBNR b KQkq - 1 1",
        "rnbqkbnr/pppppppp/8/8/8/P7/1PPPPPPP/RNBQKBNR b KQkq - 0 1",
        "rnbqkbnr/pppppppp/8/8/P7/8/1PPPPPPP/RNBQKBNR b KQkq - 0 1" };

    struct explicit_game_tree gt = che_build_explicit_gt(NULL, 1);

    ck_assert(!gt.parent[1]);
    for(uint32_t id = 2; id <= gt.nc; id++)
        ck_assert(gt.parent[id] == 1);
    ck_assert(gt.height == 1);
    ck_assert(gt.nc == 21);
    ck_assert(gt.num_ufen == 21);
    ck_assert(gt.cc[1] == 20);
    for(int i = 0; i < (int) gt.cc[1]; i++)
        ck_assert(gt.children[1][i] == (uint32_t) (i + 2));
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.lo[1] == 2);
    for(uint32_t id = gt.lo[1]; id <= gt.nc; ++id)
        ck_assert(gt.cc[id] == 20);

    for(uint32_t id = 1; id <= gt.num_ufen; ++id)
        ck_assert(!strcmp(gt.ufen[id], the_ufens[id]));

    uint32_t children_in_tree = 0;
    for(uint32_t id = 1; id <= gt.nc; ++id)
        children_in_tree += gt.cc[id];
    ck_assert(children_in_tree == 20 + 400); // perft(1) + perft(2)

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_3
    struct explicit_game_tree gt = che_build_explicit_gt(NULL, 2);

    ck_assert(gt.height == 2);
    ck_assert(gt.nc == 421);
    ck_assert(gt.num_ufen == 421);
    ck_assert(gt.lo[0] == 1);
    ck_assert(gt.lo[1] == 2);
    ck_assert(gt.lo[2] == 22);

    uint32_t children_in_tree = 0;
    for(uint32_t id = 1; id <= gt.nc; ++id)
        children_in_tree += gt.cc[id];
    ck_assert(children_in_tree == 20 + 400 + 8902); // perft(1) + perft(2) + perft(3)

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_4
    struct explicit_game_tree gt = che_build_explicit_gt(
        "R5k1/5ppp/8/8/8/8/8/4K3 b - - 1 1", 10); // Checkmate position

    ck_assert(gt.nc == 1);
    ck_assert(gt.num_ufen == 1);
    ck_assert(gt.height == 0);

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_5
    struct explicit_game_tree gt = che_build_explicit_gt(FEN_SUPERPOSITION_1, 1);
    ck_assert(gt.nc == MAX_LEGAL_MOVE_COUNT + 1);
    ck_assert(gt.height == 1);
    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_6
    struct explicit_game_tree gt = che_build_explicit_gt(NO_BRAINER_MATE_IN_2, 1);

    char *three_children[] = {
        "R2kr1nN/PK1p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 1 1",  // Kb7+
        "RK1kr1n1/P2p1NPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1",  // Nxf7+
     // "RK1kr1nN/P2p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 w - - 0 1"   // Root
        "RK1kr1nN/PP1p1pPp/5PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1" }; // b7+

    ck_assert(gt.num_ufen == 4), ck_assert(gt.nc == 4);
    ck_assert(gt.height == 1), ck_assert(gt.cc[1] == 3);
    ck_assert(!strcmp(gt.ufen[1], three_children[0]));
    ck_assert(!strcmp(gt.ufen[2], three_children[1]));
    ck_assert(!strcmp(gt.ufen[3], NO_BRAINER_MATE_IN_2));
    ck_assert(!strcmp(gt.ufen[4], three_children[2]));
    ck_assert(gt.findex[1] == 3);

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_7
    struct explicit_game_tree gt = che_build_explicit_gt(NO_BRAINER_MATE_IN_2, 2);

    ck_assert(gt.num_ufen == 7), ck_assert(gt.nc == 7);
    ck_assert(gt.height == 2), ck_assert(gt.cc[1] == 3);

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_8
    struct explicit_game_tree gt = che_build_explicit_gt(NO_BRAINER_MATE_IN_2, 3);

    const char *pos[] = {
        "",
        "2Rkr1nN/PK1p1pPp/1P3PRP/Bp4P1/1P6/8/8/8 b - - 0 2",  // Rxc8#
        "R1qkr1nN/PK1p1pPp/1P3PRP/Bp4P1/1P6/8/8/8 w - - 2 2", // Qc8+
        "R2kr1n1/PK1p1qPp/1P3PRP/Bp4P1/1P6/8/8/8 b - - 1 2",  // Kb7#
        "R2kr1nN/PK1p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 1 1", // Kb7+
        "RK1kr1n1/P2p1NPp/1P3PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1", // Nxf7+
        "RK1kr1n1/P2p1qPp/1P3PRP/Bp4P1/1P6/8/8/8 w - - 0 2",  // Qxf7
        "RK1kr1n1/PP1p1qPp/5PRP/Bp4P1/1P6/8/8/8 b - - 0 2",   // b7#
        "RK1kr1nN/P2p1pPp/1P3PRP/Bp4P1/1Pq5/8/8/8 w - - 0 1", // Root
        "RK1kr1nN/PP1p1pPp/5PRP/Bp4P1/1Pq5/8/8/8 b - - 0 1",  // b7+
        "RK1kr1nN/PPBp1pPp/5PRP/1p4P1/1P6/8/8/8 b - - 0 2",   // Bxc7#
        "RK1kr1nN/PPqp1pPp/5PRP/Bp4P1/1P6/8/8/8 w - - 1 2" }; // Qc7+

    int mate_sequence[][4] = {
        {8, 4, 2, 1},     // 1.Kb7+  Qc8+ 2.Rxc8#
        {8, 5, 6, 3},     // 1.Nxf7+ Qxf7 2.Kb7#
        {8, 5, 6, 7},     // 1.Nxf7+ Qxf7 2.b7#
        {8, 9, 11, 10} }; // 1.b7+   Qc7+ 2.Bxc7#

    ck_assert(gt.height == 3), ck_assert(gt.num_ufen == 11);
    for(uint32_t j = 1; j <= gt.num_ufen; ++j) {
        ck_assert(!strcmp(gt.ufen[j], pos[j])); }

    for(int row = 0; row < 4; ++row) {
        for(int col = 3; col >= 0; --col) {
            uint32_t id = 0;
            int hit_count = 0;
            for(uint32_t current_id = 1; current_id <= gt.nc; ++current_id)
                if(!strcmp( pos[mate_sequence[row][col]],
                        gt.ufen[gt.findex[current_id]]))
                    ++hit_count, id = current_id;
            ck_assert(id), ck_assert(hit_count == 1);
            ck_assert(!col ||
                (uint32_t) mate_sequence[row][col - 1] == gt.findex[gt.parent[id]]);
        } // End inner for
    } // End outer for

    che_free_explicit_gt(gt);

#test che_build_explicit_gt_test_9
    struct explicit_game_tree gt1 = che_build_explicit_gt(NO_BRAINER_MATE_IN_2, 4);
    ck_assert(gt1.height == 3), ck_assert(gt1.nc == 11);
    che_free_explicit_gt(gt1);
    struct explicit_game_tree gt2 = che_build_explicit_gt(NO_BRAINER_MATE_IN_2, 10);
    ck_assert(gt2.height == 3), ck_assert(gt2.nc == 11);
    che_free_explicit_gt(gt2);

#test che_build_explicit_gt_test_10
    x_gt = che_build_explicit_gt(NO_BRAINER_MATE_IN_2, 3);
    x_visit_count = x_check_count = x_checkmate_count = x_capture_count = 0;
    x_dfs(1);
    ck_assert(x_visit_count == 11);
    ck_assert(x_check_count == 9);
    ck_assert(x_checkmate_count == 4);
    ck_assert(x_capture_count == 4);
    che_free_explicit_gt(x_gt);

//
// Test case
//
#tcase che_explicit_gt_stats_tests

#test che_explicit_gt_stats_test_1
    struct explicit_game_tree gt = che_build_explicit_gt(FEN_PERFT_POS_4, 3);
    ck_assert(gt.nc == 1 + 6 + 264 + 9467);

    uint32_t captures, en_passants, castles, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, &en_passants, &castles, &promotions, &checks, &checkmates));

    ck_assert(captures == 0 + 0 + 87 + 1021);
    ck_assert(en_passants == 0 + 0 + 0 + 4);
    ck_assert(castles == 0 + 0 + 6 + 0);
    ck_assert(promotions == 0 + 0 + 48 + 120);
    ck_assert(checks == 1 + 0 + 10 + 38);
    ck_assert(checkmates == 0 + 0 + 0 + 22);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_2
    struct explicit_game_tree gt = che_build_explicit_gt(FEN_PERFT_POS_3, 4);
    ck_assert(gt.nc == 1 + 14 + 191 + 2812 + 43238);

    uint32_t captures, en_passants, castles, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, &en_passants, &castles, &promotions, &checks, &checkmates));

    ck_assert(captures == 0 + 1 + 14 + 209 + 3348);
    ck_assert(en_passants == 0 + 0 + 0 + 2 + 123);
    ck_assert(castles == 0 + 0 + 0 + 0 + 0);
    ck_assert(promotions == 0 + 0 + 0 + 0 + 0);
    ck_assert(checks == 0 + 2 + 10 + 267 + 1680);
    ck_assert(checkmates == 0 + 0 + 0 + 0 + 17);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_3
    struct explicit_game_tree gt = che_build_explicit_gt(
        "4k3/8/8/8/3pPp2/8/8/4K3 b - e3 0 1", 1);
    ck_assert(gt.nc == 1 + 9);

    uint32_t en_passants;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        NULL, &en_passants, NULL, NULL, NULL, NULL));

    ck_assert(en_passants == 0 + 2);
    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_4
    struct explicit_game_tree gt = che_build_explicit_gt(
        "8/2p5/p1P5/PpP5/8/4b2k/8/7K w - b6 0 123", 1);
    ck_assert(gt.nc == 1 + 2);

    uint32_t en_passants;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        NULL, &en_passants, NULL, NULL, NULL, NULL));

    ck_assert(en_passants == 0 + 2);
    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_5
    struct explicit_game_tree gt = che_build_explicit_gt(
        "6n1/5pP1/5PR1/6Pp/3b4/6k1/8/7K w - h6 0 75", 1);
    ck_assert(gt.nc == 1 + 2);

    uint32_t en_passants, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        NULL, &en_passants, NULL, NULL, &checks, &checkmates));

    ck_assert(en_passants == 0 + 1);
    ck_assert(checks == 0 + 1);
    ck_assert(checkmates == 0 + 0);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_6
    struct explicit_game_tree gt = che_build_explicit_gt(
        "8/8/R7/7k/5pPP/7K/8/8 b - g3 0 1", 1);
    ck_assert(gt.nc == 1 + 1);

    uint32_t en_passants, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        NULL, &en_passants, NULL, NULL, &checks, &checkmates));

    ck_assert(en_passants == 0 + 1);
    ck_assert(checks == 1 + 0);
    ck_assert(checkmates == 0 + 0);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_7
    struct explicit_game_tree gt = che_build_explicit_gt(
        "k7/4P3/8/8/8/8/8/4K3 b - - 12 34", 2);
    ck_assert(gt.nc == 1 + 3 + 27);

    uint32_t en_passants, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        NULL, &en_passants, NULL, &promotions, &checks, &checkmates));

    ck_assert(en_passants == 0 + 0 + 0);
    ck_assert(promotions == 0 + 0 + 12);
    ck_assert(checks == 0 + 0 + 2);
    ck_assert(checkmates == 0 + 0 + 0);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_8
    struct explicit_game_tree gt = che_build_explicit_gt(INIT_POS, 3);
    ck_assert(gt.nc == 1 + 20 + 400 + 8902);

    uint32_t captures, en_passants, castles, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, &en_passants, &castles, &promotions, &checks, &checkmates));

    ck_assert(captures == 0 + 0 + 0 + 34);
    ck_assert(en_passants == 0 + 0 + 0 + 0);
    ck_assert(castles == 0 + 0 + 0 + 0);
    ck_assert(promotions == 0 + 0 + 0 + 0);
    ck_assert(checks == 0 + 0 + 0 + 12);
    ck_assert(checkmates == 0 + 0 + 0 + 0);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_9
    struct explicit_game_tree gt = che_build_explicit_gt(
        "4k3/8/8/8/8/8/1p6/R3K3 b - - 12 34", 1);
    ck_assert(gt.nc == 1 + 13);

    uint32_t captures, promotions, checks;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, NULL, NULL, &promotions, &checks, NULL));

    ck_assert(captures == 0 + 4);
    ck_assert(promotions == 0 + 8);
    ck_assert(checks == 0 + 4);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_10
    struct explicit_game_tree gt = che_build_explicit_gt(
        "k7/pp5P/8/1Pp5/8/8/8/4K2R w K c6 0 75", 1);
    ck_assert(gt.nc == 1 + 19);

    uint32_t captures, en_passants, castles, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, &en_passants, &castles, &promotions, &checks, &checkmates));

    ck_assert(captures == 0 + 1);
    ck_assert(en_passants == 0 + 1);
    ck_assert(castles == 0 + 1);
    ck_assert(promotions == 0 + 4);
    ck_assert(checks == 0 + 2);
    ck_assert(checkmates == 0 + 2);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_11
    struct explicit_game_tree gt = che_build_explicit_gt(FEN_KIWIPETE, 2);
    ck_assert(gt.nc == 1 + 48 + 2039);

    uint32_t captures, en_passants, castles, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, &en_passants, &castles, &promotions, &checks, &checkmates));

    ck_assert(captures == 0 + 8 + 351);
    ck_assert(en_passants == 0 + 0 + 1);
    ck_assert(castles == 0 + 2 + 91);
    ck_assert(promotions == 0 + 0 + 0);
    ck_assert(checks == 0 + 0 + 3);
    ck_assert(checkmates == 0 + 0 + 0);

    che_free_explicit_gt(gt);

#test che_explicit_gt_stats_test_12
    struct explicit_game_tree gt = che_build_explicit_gt(
        FEN_PERFT_POS_4_MIRROR, 3);
    ck_assert(gt.nc == 1 + 6 + 264 + 9467);

    uint32_t captures, en_passants, castles, promotions, checks, checkmates;
    ck_assert(gt.nc == che_explicit_gt_stats(gt,
        &captures, &en_passants, &castles, &promotions, &checks, &checkmates));

    ck_assert(captures == 0 + 0 + 87 + 1021);
    ck_assert(en_passants == 0 + 0 + 0 + 4);
    ck_assert(castles == 0 + 0 + 6 + 0);
    ck_assert(promotions == 0 + 0 + 48 + 120);
    ck_assert(checks == 1 + 0 + 10 + 38);
    ck_assert(checkmates == 0 + 0 + 0 + 22);

    che_free_explicit_gt(gt);
